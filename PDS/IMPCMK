*        COPYRIGHT (C) 1991  PRYCROFT SIX PTY LTD
         TITLE 'DATA GATHERER DYNAMIC AREA'
         COPY  IMGATDAT
         TITLE 'PERFORMANCE HISTORICAL KNOWLEDGE DISPLAY'
&IMPSECT CSECT
         USING KNOWSHOW,R11
KNOWSHOW DS    0H
         MVC   INCHARS(L'INCHARS-1),INCHARS+1
         MVI   INCHARS+L'INCHARS-1,C' '      ADJUST ANY COMMAND INPUT.
         MVI   INBUFF+1,0        INDICATE CURSOR IN PRIMARY INPUT AREA.
         B     CMDSCANK          PROCESS ANY (OTHER) INITIAL REQUEST.
         SPACE
REDOKNOW DS    0H
         MVC   HEADING,BLANKS    INITIALIZE HEADING.
         MVC   HEADING(L'HEADNGK0),HEADNGK0
         TM    KFLAGS,KDGNOW     IN DATA GATHERING MODE?
         BO    KPUTPARM          YES, ISSUE PARAMETER PROMPT.
         TM    KFLAGS,KXM        USING CROSS-MEMORY MODE?
         BO    KXMINIT           YES, CHECK FOR IMPGAT STARTED TASK.
         ICM   R5,15,DGEPADDR    USING PRIVATE PROCESSING?
         BNZ   KGOTDGEP          YES, ALREADY HAVE DATA SO LOOK AT IT.
         SLR   R5,R5             NO, SO LOOK FOR SMFPRIME DD.
         L     R4,PSATOLD        GET POINTER TO CURRENT TCB.
         L     R4,12(,R4)        POINT TO TIOT.
         LA    R4,24(,R4)        POINT TO TIOELNGH.
CHKGATDD CLC   SMFPRIME,4(R4)
         BE    VFYGATDD          FILE EXISTS SO VERIFY DEVICE TYPE.
         IC    R5,0(,R4)         GET TIOT ENTRY LENGTH.
         AR    R4,R5             POINT TO NEXT TIOT ENTRY.
         CLI   0(R4),0           ZERO LENGTH ENTRY?
         BNE   CHKGATDD          NO, CHECK OUT THIS ENTRY.
         LA    R3,1              YES, PREPARE FOR MESSAGE 1.
         B     BADGATDD          NOT IN TIOT SO NO PRIMING FILE.
VFYGATDD LA    R3,3              PREPARE FOR MESSAGE 3.
         ICM   R5,7,17(R4)       LOAD UCB POINTER.
         BZ    BADGATDD          ZERO SO CAN'T BE DASD OR TAPE.
         TM    18(R5),X'A0'      TAPE OR DASD DEVICE TYPE?
         BM    KCALLGAT          YES, GO CALL IMDATGAT.
BADGATDD TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    KGATDOWN          NO, DISPLAY ERROR MESSAGE.
KXMINIT  L     R10,=A(KGQSCAN)   YES, TRY FOR STARTED TASK.
         BR    R10               PERFORM CROSS-MEMORY INITIALIZATION.
         SPACE
KCALLGAT DS    0H
         LA    R3,4              PREPARE FOR MESSAGE 4.
         LOAD  EPLOC=DATGATNM,ERRET=KGATDOWN
         LR    R1,R0             GET THE ENTRY POINT OF IMDATGAT.
         ST    R0,DGEPADDR       SAVE IT FOR LATER.
         LA    R0,DGOPTKNM       POINT TO TEMPORARY NAME TO IDENTIFY.
         IDENTIFY EPLOC=(0),ENTRY=(1)
         OI    KFLAGS,KDGNOW     FLAG ABOUT TO CALL IMDATGAT.
KPUTPARM LA    R1,KPARMPRM       POINT TO PARAMETER PROMPTING SCREEN.
         LA    R0,KPARMLEN       GET THE SCREEN DATA STREAM LENGTH.
         B     PUTSCRNK          GO PROMPT FOR PARAMETERS.
         SPACE
KGATDOWN DS    0H
         XC    KTOPADRS(KTOPADLN),KTOPADRS    RESET TOP ADDRESS.
         MVI   KHDGCNT+1,1       REFRESH HEADING LINE COUNT.
         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.
         MVC   KSHOWSYS,BLANKS   FLAG NO GATHERED DATA SHOWING.
         LA    R2,BUFFER         POINT TO FIRST DETAIL LINE.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(2)
         SLL   R3,5              MULTIPLY MESSAGE ID FOR INDEX.
         LA    R3,KBADMSGS(R3)   POINT TO THE ERROR MESSAGE.
         MVC   LL-56(32,R2),0(R3) LOAD THE ERROR MESSAGE.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         B     KNOWSUMM          GO SHOW THE SYSTEM SUMMARY LINE.
         SPACE
KBASESPN L     R6,DGTCBADR       POINT TO THE DATA GATHERER TCB.
         LA    R0,4
         BAS   R14,R6ACCESS
         L     R4,0(,R6)         POINT TO THE TOP RB.
         LA    R0,32
DGRBLOOP LR    R5,R4             COPY THE RB ADDRESS.
         BAS   R14,R4ACCESS
         ICM   R4,7,29(R4)       POINT TO NEXT RB.
         C     R4,DGTCBADR       IS THIS THE TCB ADDRESS?
         BNE   DGRBLOOP          NO, FOLLOW CHAIN TO ORIGINAL RB.
         LA    R0,16
         BAS   R14,R5ACCESS
         L     R4,12(,R5)        YES, POINT TO THE ORIGINAL CDE.
         SLL   R4,8
         SRL   R4,8              ENSURE 24-BIT ADDRESS.
         LA    R0,32
         BAS   R14,R4ACCESS
         L     R5,16(,R4)        POINT TO IMDATGAT ENTRY POINT.
         LA    R0,64
         BAS   R14,R5ACCESS
KGOTDGEP ICM   R4,15,52(R5)      POINT TO GATHERED DATA BASE ENTRY.
         BZ    KBASESPN          SPIN IF NOT FILLED IN YET.
         LA    R0,DGBASLEN
         BAS   R14,R4ACCESS
         ST    R4,KBASEADR       SAVE ADDRESS OF BASE ENTRY.
         USING DGBASE,R4
         CLI   KSHOWSYS,C' '     ANY SELECTION YET?
         BH    KTESTSYS          YES, GO TEST WHAT IT IS.
KLISTSYS L     R10,=A(KDISPSYS)  NO, GO FORMAT AND SHOW SELECTION LIST.
         BR    R10               INVOKE IT.
KTESTSYS CLI   KSHOWSYS,C'*'     ANY SYSTEM SELECTED?
         BNE   KUSESYS           YES, GO LOOK FOR PERFORMANCE DATA.
         L     R10,=A(KSMFITEM)  YES, POINT TO SMF ITEM LIST ROUTINE.
         BR    R10               INVOKE IT.
KUSESYS  ICM   R0,15,DGNUMSYS    ANY SYSTEMS IN LIST?
         BZ    KLISTSYS          NO, DISPLAY SELECTION LIST.
         LA    R4,DGFSTSYS       YES, POINT TO FIRST SYSTEM ENTRY ADDR.
         B     KSYSFRST          SEE IF ANY SYSTEMS YET.
         DROP  R4                DGBASE.
         USING DGSYSTEM,R4
KSYSSRCH LA    R0,DGSYSLEN
         BAS   R14,R4ACCESS
         CLC   KSHOWSYS,DGSYSID  FOUND THE REQUIRED SYSTEM ENTRY?
         BE    KSYSPERF          YES.
KSYSFRST LR    R5,R4             NO, SAVE THIS SYSTEM ENTRY'S ADDRESS.
         ICM   R4,15,DGSYSNXT    POINT TO THE NEXT ONE.
         BNZ   KSYSSRCH          CHECK IT OUT.
         LR    R4,R5             END OF LIST SO POINT BACK TO LAST ONE.
         MVC   KSHOWSYS,DGSYSID  SELECT THE LAST ONE BY DEFAULT.
KSYSPERF ICM   R10,15,DGNUMINT   ANY PERFORMANCE DATA AVAILABLE?
         BZ    KZOOMOUT          NO, CAN'T SELECT THIS SYSTEM.
         L     R10,=A(KNOWSYS)   GET PERFORMANCE DISPLAY SETUP ROUTINE.
         BR    R10               INVOKE IT.
         SPACE
         USING DGRMFINT,R5
KDGINTLP LA    R0,DGINTLEN
         BAS   R14,R5ACCESS
KINTAXOK LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.
         CR    R2,R15            CURRENTLY LOADING THIS LINE?
         BNE   KHDGOKAY          NO, LEAVE HEADING AS IS.
         CLI   DGPRSMNM,C' '     YES, ANY PR/SM PARTITION NAME PRESENT?
         BNH   KHDGOKAY          NO.
         MVC   HEADING+35(18),=CL18'IN PR/SM PARTITION'
         MVC   HEADING+54(8),DGPRSMNM
KHDGOKAY MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         CLC   DGINTDAT,CVTDATE  RMF DATE GREATER THAN CVTDATE?
         BH    KPDLFINT          YES, DATA MUST BE FROM PDLF.
         DROP  R1                CVT.
         TM    KFLAGS,KDATEFMT   NO, USING YYMMDD DATE FORMAT ANYWAY?
         BO    KINTYMD           YES.
         MVC   WORK(9),EDKYYDDD  NO, SHOW THE JULIAN DATE.
         ED    WORK(9),DGINTDAT  DISPLAY THE DATE OF THE RMF INTERVAL.
         MVC   LL-79(6,R2),WORK+3
         B     KINTDTOK
KINTYMD  L     R1,DGINTDAT       GET THE RMF INTERVAL JULIAN DATE.
         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.
         BASR  R14,R7            CONVERT THE JULIAN DATE.
         MVC   LL-79(2,R2),WORK  LOAD YY
         MVC   LL-77(2,R2),WORK+3 AND MM
         MVC   LL-75(2,R2),WORK+6 AND DD.
         B     KINTDTOK
KPDLFINT MVC   WORK,ED7
         ED    WORK,DGINTDAT     DISPLAY THE DATE OF THE PDLF INTERVAL.
         MVC   LL-79(6,R2),WORK+2
KINTDTOK MVC   WORK,EDKHHMM
         ED    WORK,DGINTTIM     DISPLAY THE TIME OF THE RMF INTERVAL.
         MVC   LL-72(2,R2),WORK+2
         MVI   LL-70(R2),C':'
         MVC   LL-69(2,R2),WORK+4
         LA    R1,KLEFT          POINT TO LEFT DISPLAY SPECIFICATION.
         BAS   R14,KNOWDISP      INVOKE DISPLAY ROUTINE.
         MVI   LL-66(R2),X'3B'   SEPARATE THIS DISPLAY AREA.
         LA    R1,KRIGHT         POINT TO RIGHT DISPLAY SPECIFICATION.
         BAS   R14,KNOWDISP      INVOKE DISPLAY ROUTINE.
         MVI   LL-33(R2),X'3B'   SEPARATE THIS DISPLAY AREA.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         C     R2,PAGEND         IS THE SCREEN NOW FILLED?
         BNL   KEODGDAT          YES, END OF DATA GATHERER DISPLAY.
         ICM   R5,15,DGINTNXT    NO, POINT TO NEXT RMF INTERVAL ENTRY.
         BNZ   KDGINTLP          DISPLAY DATA FROM NEXT INTERVAL.
         DROP  R4,R5             DGSYSTEM, DGRMFINT.
KEODGDAT DS    0H
         TM    KFLAGS,KXM        USING CROSS-MEMORY ACCESS?
         BZ    KXMUNDUN          NO, SKIP CROSS-MEMORY STUFF.
         L     R10,=A(KXMUNDO)   YES, RESTORE NORMAL ENVIRONMENT.
         BR    R10               PERFORM CROSS-MEMORY TERMINATION.
KXMUNDUN DS    0H                NO LONGER IN CROSS-MEMORY ENVIRONMENT.
         C     R2,PAGEND         IS THE SCREEN NOW FILLED?
         BNL   KNOWFILL          YES.
         SPACE
KNOWSUMM DS    0H
         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.
         C     R2,PAGEND         IS THE SCREEN NOW FILLED?
         BNL   KNOWFILL          YES.
         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.
         LA    R2,4(,R2)         ADJUST BUFFER POINTER.
         SPACE
KNOWFILL DS    0H
         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.
         CLI   KSHOWSYS,C' '     IN SYSTEM SELECTION MODE?
         BNH   KNOWTRLR          YES, DATA STREAM IS NOW COMPLETE.
         CLI   KSHOWSYS,C'*'     NO, SHOWING GENERAL SMF EVENTS?
         BE    KNOWTRLR          YES, DATA STREAM IS NOW COMPLETE.
         MVC   0(TRLRKLEN,R2),TRAILERK  NO, LOAD THE SCREEN TRAILER.
         LA    R2,TRLRKLEN(,R2)  ADJUST BUFFER POINTER.
         TM    KFLAGS,KDATEFMT   USING YYMMDD DATE FORMAT?
         BZ    KNOWTRLJ          NO, USING JULIAN DATE FORMAT.
         MVC   0(TRLRKGLN,R2),TRAILRKG  LOAD THE DATE SCREEN TRAILER.
         LA    R2,TRLRKGLN(,R2)  ADJUST BUFFER POINTER.
         B     KNOWTRLR          DATA STREAM IS NOW COMPLETE.
KNOWTRLJ MVC   0(TRLRKJLN,R2),TRAILRKJ  LOAD THE DATE SCREEN TRAILER.
         LA    R2,TRLRKJLN(,R2)  ADJUST BUFFER POINTER.
KNOWTRLR L     R9,CCTADDR        GET CCT ADDRESS.
         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).
         CVD   R9,WORK           CONVERT IT TO DECIMAL.
         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.
         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.
         LA    R1,HOME           POINT TO START OF SCREEN BUFFER.
         LR    R0,R2             POINT TO END OF SCREEN BUFFER.
         SR    R0,R1             GET SCREEN BUFFER LENGTH.
PUTSCRNK BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.
         TM    MODESW2,XFLG      NO, SUBROUTINE EXIT REQUIRED?
         BZ    NOTEXITK          NO, PROCESS SUBCOMMAND.
DOEXITK  DS    0H
         AIF   (&MSPMON).DOEXITK
         MODESET MF=(E,MDSTSUP0)
         L     R5,KGATALET       GET THE ALET TO DELETE.
         ALESERV DELETE,ALET=(5),CHKEAX=NO,MF=(E,ALESERVL)
         ST    R15,KGATALET      ZERO THE REMEMBERED ALET VALUE.
         MODESET MF=(E,MDSTPROB)
.DOEXITK ANOP
         BR    R9                RETURN TO MAINLINE VIA SCREENIO.
NOTEXITK L     R15,=A(KNOWPARS)  GET FIELD PARSE ROUTINE ENTRY POINT.
         BASR  R14,R15           PROCESS SECONDARY INPUT FIELDS.
         TM    KFLAGS,KDGNOW     IN DATA GATHERING MODE?
         BZ    KCHKPERR          NO, CHECK FOR PARSING ERRORS.
         LA    R1,KDGPLIST       POINT TO PARAMETER LIST FOR IMDATGAT.
         LINK  EPLOC=DGOPTKNM    INVOKE IMDATGAT.
         NI    KFLAGS,255-KDGNOW FLAG NO LONGER CALLING IMDATGAT.
         L     R5,DGEPADDR       GET THE LOAD MODULE ADDRESS.
         B     KGOTDGEP          GO LOOK AT GATHERED DATA.
KCHKPERR CLI   KERRSPLN,8        ANY INPUT FIELD ERRORS?
         BL    GETCMDHK          NO, CONTINUE INPUT PROCESSING.
         SLR   R0,R0             YES.
         IC    R0,KERRSPLN       GET THE ERROR RESPONSE LENGTH.
         LA    R1,KERRRESP       POINT TO THE WCC OF THE DATA STREAM.
         MVI   KERRSPLN,7        RESET LENGTH TO JUST HEADER.
         B     PUTSCRNK          SHOW THE ERRORS FOR USER CORRECTION.
GETCMDHK CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?
         BH    KNOWAUTO          YES.
         CLI   INBUFF,1          PF1/13?
         BE    GIVEHLPK          YES, HELP.
         CLI   INBUFF,3          PF3/15?
         BE    KNOWPFK3          YES, HELP.
         CLI   INBUFF,5          PF5/17?
         BE    KNOWPFK5          YES.
         CLI   INBUFF,7          PF7/19?
         BE    KNOWPFUP          YES, SCROLL UP.
         CLI   INBUFF,8          PF8/20?
         BE    KNOWPFDN          YES, SCROLL DOWN.
         CLI   INBUFF,10         PF10/22?
         BE    KNOWLEFT          YES, SCROLL LEFT.
         CLI   INBUFF,11         PF11/23?
         BE    KNOWRITE          YES, SCROLL RIGHT.
CMDSCANK CLI   INCHARS,C'S'      SYSTEM SELECTION LIST REQUEST?
         BE    KZOOMOUT          YES.
         CLI   INCHARS,C'D'      DATE FORMAT TOGGLE REQUEST?
         BE    KCHGDATE          YES.
         CLI   INCHARS,C'B'      BOTTOM REQUESTED?
         BE    KNOWDOWN          YES.
         CLI   INCHARS,C'T'      TOP REQUESTED?
         BE    KNOWUP            YES.
         CLI   INCHARS,C'+'      SCROLL DOWN REQUESTED?
         BE    KNOWDOWN          YES.
         CLI   INCHARS,C'-'      SCROLL UP REQUESTED?
         BE    KNOWUP            YES.
         CLI   INCHARS,C'<'      SCROLL LEFT REQUESTED?
         BE    KNOWLEFT          YES.
         CLI   INCHARS,C'>'      SCROLL RIGHT REQUESTED?
         BE    KNOWRITE          YES.
         CLI   INCHARS,C'F'      FIX OR FREE REQUEST?
         BE    KNOWFIDL          YES.
         CLI   INCHARS,C'J'      SPECIFY JOB NAME MASK REQUEST?
         BE    KGETJMSK          YES.
         CLI   INCHARS,C'L'      SMF ITEM NAME LOCATE REQUEST?
         BE    KLOCITEM          YES.
         CLI   INCHARS,C' '      CONTINUE REQUESTED?
         BE    REDOKNOW          YES.
         CLI   INCHARS,C'G'      "GRAPH PAPER" TOGGLE REQUESTED?
         BNE   GIVEHLPK          NO, SHOW HELP PANEL.
         CLI   INCHARS+1,C'L'    TOGGLE LEFT DISPLAY MODE?
         BE    KMODELFT          YES.
         CLI   INCHARS+1,C'R'    TOGGLE RIGHT DISPLAY MODE?
         BE    KMODERIT          YES.
         XI    KGCHAR,C' '+X'09' ALTER GRAPH BACKGROUND.
         B     REDOKNOW          REGENERATE DISPLAY.
GIVEHLPK MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.
         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     PUTSCRNK          GO DISPLAY HELP PANEL.
KCHGDATE XI    KFLAGS,KDATEFMT   TOGGLE YY.DDD/YYMMDD DATE FORMATS.
         B     REDOKNOW          REGENERATE DISPLAY.
KMODELFT XI    KLEFT+8,X'80'     TOGGLE LEFT DISPLAY MODE FLAG.
         B     REDOKNOW          REGENERATE DISPLAY.
KMODERIT XI    KRIGHT+8,X'80'    TOGGLE RIGHT DISPLAY MODE FLAG.
         B     REDOKNOW          REGENERATE DISPLAY.
KNOWPFK3 SLR   R0,R0             GET ZERO.
         ST    R0,KEVNTADR       ERASE EVENT LIST POINTER.
         MVC   KSHOWITM,BLANKS   CLEAR SMF ITEM NAME SELECTION.
         CLI   ENDDEPTH+1,0      ZOOM OUT TO ITEM LIST?
         BNE   REDOKNOW          YES.
KZOOMOUT MVC   KSHOWSYS,BLANKS   FORCE SYSTEM SELECTION LIST DISPLAY.
         XC    KTOPADRS(KTOPADLN),KTOPADRS    RESET TOP ADDRESS.
         MVI   KHDGCNT+1,1       UPDATE HEADING LINE COUNT.
         B     REDOKNOW
KNOWPFDN ICM   R1,15,SCRLAMT     ANY SCROLL AMOUNT SPECIFIED?
         BNZ   KNOWDNOK          YES, USE IT.
KNOWDOWN MVI   INBUFF,8          REMEMBER 'DOWN' EXPLICITLY REQUESTED.
         CLI   INCHARS,C'M'      SCROLL DOWN MAXIMUM REQUESTED?
         BE    KNOWDNMX          YES, GO DO IT.
         CLI   INCHARS,C'B'      BOTTOM REQUESTED?
         BE    KNOWDNMX          YES, GO DO IT.
         CLI   INCHARS,C'+'      PLUS SUBCOMMAND?
         BNE   KNOWDNPG          NO, SCROLL DOWN A PAGE.
         CLI   INCHARS+1,C'M'    YES, SCROLL DOWN MAXIMUM REQUEST?
         BE    KNOWDNMX          YES, GO DO IT.
         CLI   INCHARS+1,C'0'    NO, NUMERIC OPERAND?
         BL    KNOWDNPG          NO, SO SCROLL DOWN A PAGE.
         MVC   KSCRLAMT+3(1),INCHARS+1
         NI    KSCRLAMT+3,X'0F'  YES, SAVE THE NUMBER FOR DISPLAY TIME.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWDNMX MVI   KSCRLAMT,X'7F'    SCROLL DOWN AS FAR AS POSSIBLE.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWAUTO MVI   INBUFF,8          REMEMBER 'DOWN' EXPLICITLY REQUESTED.
KNOWDNPG L     R1,LINES          GET LINES PER SCREEN.
         SH    R1,KHDGCNT        GET DETAIL LINES TO SCROLL.
KNOWDNOK ST    R1,KSCRLAMT       SAVE FOR FOR DISPLAY TIME.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWPFUP ICM   R1,15,SCRLAMT     ANY SCROLL AMOUNT SPECIFIED?
         BNZ   KNOWUPOK          YES, USE IT.
KNOWUP   CLI   INCHARS,C'M'      SCROLL UP MAXIMUM REQUESTED?
         BE    KNOWUPMX          YES, GO DO IT.
         CLI   INCHARS,C'T'      TOP REQUESTED?
         BE    KNOWUPMX          YES, GO DO IT.
         CLI   INCHARS,C'-'      MINUS SUBCOMMAND?
         BNE   KNOWUPPG          NO, SCROLL UP A PAGE.
         CLI   INCHARS+1,C'M'    YES, SCROLL UP MAXIMUM REQUEST?
         BE    KNOWUPMX          YES, GO DO IT.
         CLI   INCHARS+1,C'0'    NO, NUMERIC OPERAND?
         BL    KNOWUPPG          NO, SO SCROLL UP A PAGE.
         MVC   KSCRLAMT+3(1),INCHARS+1
         NI    KSCRLAMT+3,X'0F' YES, GET THE NUMBER.
         L     R1,KSCRLAMT
         LNR   R1,R1             MAKE IT NEGATIVE FOR UP.
         ST    R1,KSCRLAMT       SAVE THE NUMBER FOR DISPLAY TIME.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWUPMX SLR   R0,R0             CAUSE TOP TO BE DIRECTLY ACCESSED.
         LA    R1,KTOPADLN/4     GET THE NUMBER OF POINTERS TO CHECK.
         LA    R15,KTOPADRS+KTOPADLN POINT PAST LAST ONE.
KUPMAXLP AHI   R15,-4            BACKUP ONE POINTER.
         CL    R0,0(,R15)        IS THIS POINTER ZERO?
         BNE   KUPMAXNX          NO, TAKE ACTION.
         BCT   R1,KUPMAXLP       YES, CONTINUE POINTER SCAN.
KUPMAXNX ST    R0,0(,R15)        ZERO THE ACTIVE POINTER.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWUPPG L     R1,LINES          GET LINES PER SCREEN.
         SH    R1,KHDGCNT        GET DETAIL LINES TO SCROLL.
KNOWUPOK LNR   R1,R1             MAKE IT NEGATIVE FOR UP.
         ST    R1,KSCRLAMT       SAVE FOR FOR DISPLAY TIME.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWLEFT CLI   KSHOWSYS,C' '     IN SYSTEM SELECTION MODE?
         BNH   REDOKNOW          YES, UPDATE IMDATGAT STATUS.
         CLI   KSHOWSYS,C'*'     DISPLAYING SMF EVENTS?
         BE    KSMFLEFT          YES.
         LA    R15,KLEFT         POINT TO LEFT SIDE DISPLAY PARAMETERS.
         BAS   R14,KGOLEFT       INVOKE SCROLL LEFT PROCESSING.
         LA    R15,KRIGHT        POINT TO RIGHT SIDE DISPLAY PARMS.
         BAS   R14,KGOLEFT       INVOKE SCROLL LEFT PROCESSING.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KGOLEFT  ICM   R1,15,0(R15)      GET DISPLAY CODE OF THIS SIDE.
         BMR   R14               FROZEN SO RETURN WITHOUT ACTION.
         CLI   INCHARS+1,C'<'    PREVIOUS DISPLAY TYPE REQUESTED?
         BE    KLEFTER           YES.
         L     R7,4(,R15)        NO, GET DISPLAY ITEM NUMBER.
         BCTR  R7,0              DECREMENT IT.
         LTR   R7,R7             STILL A POSITIVE NUMBER?
         BNP   KLEFTER           NO, SCROLL LEFT TO PREVIOUS TYPE.
         ST    R7,4(,R15)        YES, UPDATE THE ITEM NUMBER.
         BR    R14               RETURN.
KLEFTER  BCTR  R1,0              DECREMENT FOR SCROLL LEFT.
         ST    R1,0(,R15)        SAVE THE NEW CODE.
         LTR   R1,R1             IS IT LESS THAN ZERO?
         BM    KLFTWRAP          YES, SO WRAP-AROUND.
         LR    R7,R1             COPY DISPLAY CODE.
         SLL   R7,2              MULTIPLY BY FOUR FOR INDEX.
         L     R7,KMAXITEM(R7)   GET THE MAXIMUM ITEM NUMBER.
         LTR   R7,R7             ANY ITEMS FOR THIS DISPLAY TYPE?
         BNP   KLEFTER           NO, GO A WHOLE CATEGORY LEFT AGAIN.
         ST    R7,4(,R15)        YES, SUPPLY DISPLAY ITEM NUMBER.
         BR    R14               RETURN.  (ITEM NEEDED TO AVOID LOOP.)
KLFTWRAP LA    R1,1              SCROLL LEFT TO RIGHT-MOST ITEM.
         A     R1,KMAXSHOW       GET MAXIMUM TYPE CODE PLUS ONE.
         B     KLEFTER           SCROLL LEFT A WHOLE DISPLAY CATEGORY.
KSMFLEFT MVI   INBUFF,10         ENSURE SCROLL LEFT REQUEST FLAGGED.
         B     REDOKNOW          GO UPDATE DISPLAY.
KNOWRITE CLI   KSHOWSYS,C' '     IN SYSTEM SELECTION MODE?
         BNH   REDOKNOW          YES, UPDATE IMDATGAT STATUS.
         CLI   KSHOWSYS,C'*'     DISPLAYING SMF EVENTS?
         BE    KSMFRITE          YES.
         LA    R15,KLEFT         POINT TO LEFT SIDE DISPLAY PARAMETERS.
         BAS   R14,KGORIGHT      INVOKE SCROLL RIGHT PROCESSING.
         LA    R15,KRIGHT        POINT TO RIGHT SIDE DISPLAY PARMS.
         BAS   R14,KGORIGHT      INVOKE SCROLL RIGHT PROCESSING.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KGORIGHT ICM   R1,15,0(R15)      GET DISPLAY CODE OF THIS SIDE.
         BMR   R14               FROZEN SO RETURN WITHOUT ACTION.
         CLI   INCHARS+1,C'>'    NEXT DISPLAY TYPE REQUESTED?
         BE    KRIGHTER          YES.
         LR    R7,R1             NO, COPY DISPLAY CODE.
         SLL   R7,2              MULTIPLY BY FOUR FOR INDEX.
         L     R7,KMAXITEM(R7)   GET THE MAXIMUM ITEM NUMBER.
         C     R7,4(,R15)        GREATER THAN CURRENT ITEM NUMBER?
         BNH   KRIGHTER          NO, GO RIGHT TO NEXT CATEGORY.
         L     R7,4(,R15)        YES, GET THE CURRENT ITEM NUMBER.
         LA    R7,1(,R7)         INCREMENT IT.
         ST    R7,4(,R15)        SAVE IT.
         BR    R14               RETURN.
KRIGHTER LA    R1,1(,R1)         INCREMENT FOR SCROLL RIGHT.
         LA    R7,1
         ST    R7,4(,R15)        FORCE FIRST ITEM OF DISPLAY TYPE.
KISRIGHT ST    R1,0(,R15)        SAVE THE NEW CODE.
         C     R1,KMAXSHOW       GONE PAST MAXIMUM DISPLAY VALUE?
         BH    KRITWRAP          YES, SO WRAP-AROUND.
         LR    R7,R1             COPY DISPLAY CODE.
         SLL   R7,2              MULTIPLY BY FOUR FOR INDEX.
         L     R7,KMAXITEM(R7)   GET THE MAXIMUM ITEM NUMBER.
         LTR   R7,R7             ANY ITEMS IN THIS CATEGORY?
         BPR   R14               YES, RETURN.
         B     KRIGHTER          NO, TRY NEXT DISPLAY TYPE.
KRITWRAP SLR   R1,R1             SHOW LEFT-MOST DISPLAY TYPE.
         B     KISRIGHT          SAVE THE ZERO VALUE.
KSMFRITE MVI   INBUFF,11         ENSURE SCROLL RIGHT REQUEST FLAGGED.
         B     REDOKNOW          GO UPDATE DISPLAY.
KNOWFIDL CLI   INCHARS+1,C' '    FREE REQUEST?
         BE    KNOWFREE          YES.
         CLI   INCHARS+1,C'L'    FIX LEFT REQUEST?
         BE    KNOWFIXL          YES.
         CLI   INCHARS+1,C'R'    FIX RIGHT REQUEST?
         BNE   GIVEHLPK          NO, SHOW THE HELP PANEL.
         OI    KRIGHT,X'80'      YES, FIX THE RIGHT SIDE DISPLAY.
         NI    KLEFT,X'7F'       ALLOW LEFT SIDE TO SCROLL SIDEWAYS.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWFIXL OI    KLEFT,X'80'       FIX THE LEFT SIDE DISPLAY.
         NI    KRIGHT,X'7F'      ALLOW THE RIGHT TO SCROLL SIDEWAYS.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWFREE NI    KLEFT,X'7F'       ALLOW LEFT SIDE TO SCROLL SIDEWAYS.
         NI    KRIGHT,X'7F'      ALLOW THE RIGHT TO SCROLL SIDEWAYS.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KNOWPFK5 XI    KLEFT+8,X'80'     TOGGLE LEFT DISPLAY MODE FLAG.
         XI    KRIGHT+8,X'80'    TOGGLE RIGHT DISPLAY MODE FLAG.
         B     REDOKNOW          REGENERATE DISPLAY.
         SPACE
KNULDATA DS    0H                RELEVANT RMF DATA NOT ENCOUNTERED YET.
         TM    8(R1),X'80'       IN TABULAR MODE?
         BOR   R14               YES, SO JUST RETURN.
         L     R1,8(,R1)         NO, GET LINE DISPLAY SLOT OFFSET.
         ALR   R1,R2             POINT TO DISPLAY SLOT.
KNULPLOT DS    0H                "GRAPH PAPER" ONLY WHEN NO DATA.
         SLR   R9,R9             ZERO THE QUANTITY TO BE PLOTTED.
KNOWPLOT DS    0H                GRAPH PLOT SUBROUTINE.
         CLI   0(R1),X'3B'       BEEN HERE BEFORE?
         BE    KNOPLTOK          YES, THE BACKGROUND STUFF IS DONE.
         MVI   0(R1),X'3B'       NO, SEPARATE THIS DISPLAY AREA.
         MVC   1(1,R1),KGCHAR    LOAD THE BACKGROUND CHARACTER.
         MVC   2(24,R1),1(R1)    BUBBLE IT ALONG THE GRAPH AREA.
KNOPLTOK LA    R9,2(,R9)         ROUND THE VALUE UPWARDS.
         SRA   R9,2              QUARTER IT.
         BZR   R14               DON'T PLOT ANYTHING FOR ZERO PERCENT.
         STC   R15,1(,R1)        SUPPLY GRAPHIC CODE.
         BCTR  R9,0              DECREMENT FOR BYTE ALREADY SUPPLIED.
         BCTR  R9,0              DECREMENT FOR EXECUTE.
         LTR   R9,R9             MORE THAN ONE SCREEN BYTE REQUIRED?
         BMR   R14               NO, THIS PLOT NOW COMPLETE.
         CHI   R9,23             YES, WILL IT FIT ON THE GRAPH?
         BNH   KNOPLTEX          YES, PROCEED.
         LA    R9,23             NO, SO TRUNCATE IT TO THE MAXIMUM.
KNOPLTEX EX    R9,KNOPLTMV       SUPPLY THE REST.
         BR    R14               NOW THIS PLOT IS COMPLETE.
KNOPLTMV MVC   2(0,R1),1(R1)                    <<< EXECUTED >>>
         SPACE 2
KNOWDISP DS    0H                DISPLAY SUBROUTINE.
         ST    R14,KSAVER14      SAVE RETURN ADDRESS.
         L     R15,0(,R1)        GET DISPLAY TYPE.
         SLL   R15,2             MUTLIPLY BY 4 FOR INDEX.
         L     R10,KDISPTBL(R15) LOAD APPROPRIATE ROUTINE ENTRY POINT.
         BR    R10               BRANCH TO APPROPRIATE ROUTINE.
KLOCITEM CLI   KSHOWSYS,C'*'     LOOKING AT SMF EVENT LIST?
         BNE   GIVEHLPK          NO, SHOW THE HELP PANEL.
         MVC   KLOCNAME,INCHARS+1    PREPARE FOR PRE-PROMPT VALUE.
         CLI   INCHARS+1,C' '    PRE-PROMPT VALUE SPECIFIED?
         BH    REDOKNOW          YES, GO UPDATE DISPLAY.
KGETLOCN LA    R1,KLOCNPRM
         LA    R0,KLOCNLEN       FULL SCREEN TPUT THE PROMPT MESSAGE.
         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.
         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?
         BO    DOEXITK           YES, DO IT.
         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?
         BE    KGETLOCN          YES, UNEXPECTED SO REDRIVE THE PROMPT.
         MVC   KLOCNAME,INCHARS  LOAD SUPPLIED DATA SET NAME/PREFIX.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
KGETJMSK XC    SELJOBNM,SELJOBNM ERASE PREVIOUS JOBNAME.
         SLR   R1,R1
         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?
         BE    KALLJOBS          YES, DO IT.
KGETJNAM LA    R1,JPRFXMSG
         LA    R0,JOBSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.
         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.
         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?
         BE    KGETJNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.
         MVC   SELJOBNM,INCHARS  EXTRACT SPECIFIED PREFIX.
         MVI   INBUFF+2,0        PREVENT ANY ZOOM PROCESSING.
         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.
         AHI   R1,-6             GET LENGTH OF TEXT.
KALLJOBS STH   R1,JPRFXLEN       STORE PREFIX LENGTH.
         B     REDOKNOW          GO CONSTRUCT A NEW SCREEN IMAGE.
R4ACCESS DS    0H                MAKE GPR 4 ADDRESS RELEVANT DATA.
         TM    KFLAGS,KXM        USING CROSS-MEMORY MODE?
         BZR   R14               NO, ADDRESSABILITY IS OKAY.
         AIF   (&MSPMON).R4XAK
         TM    OSBITS,X'9B'      MVS/ESA?
         BOR   R14               YES, USING ACCESS REGISTERS.
.R4XAK   ANOP
         STM   R14,R12,12(R13)   SAVE REGISTERS.
         LA    R3,X'80'          USE STORAGE KEY EIGHT.
         LR    R8,R0             GET THE LENGTH OF DATA TO FETCH.
         LA    R7,SECTIOWA       POINT TO THE TARGET AREA.
         XC    0(256,R7),0(R7)   RESET RESIDUAL DATA.
         MVCP  0(8,R7),0(R4),3   FETCH THE DATA.
         LM    R14,R12,12(R13)   RESTORE REGISTERS.
         LA    R4,SECTIOWA       POINT TO THE FETCHED DATA.
         BR    R14
R5ACCESS DS    0H                MAKE GPR 5 ADDRESS RELEVANT DATA.
         TM    KFLAGS,KXM        USING CROSS-MEMORY MODE?
         BZR   R14               NO, ADDRESSABILITY IS OKAY.
         AIF   (&MSPMON).R5XAK
         TM    OSBITS,X'9B'      MVS/ESA?
         BOR   R14               YES, USING ACCESS REGISTERS.
.R5XAK   ANOP
         STM   R14,R12,12(R13)   SAVE REGISTERS.
         LA    R3,X'80'          USE STORAGE KEY EIGHT.
         LR    R8,R0             GET THE LENGTH OF DATA TO FETCH.
         LA    R0,256            GET MAXIMUM "CHUNK" SIZE.
         LA    R7,SECTCT         POINT TO THE TARGET AREA.
R5AXESLP XC    0(256,R7),0(R7)   RESET RESIDUAL DATA.
         MVCP  0(R8,R7),0(R5),R3 FETCH THE DATA.
         SR    R8,R0             DID 256 BYTES CONTAIN THE WHOLE AREA?
         BNP   R5AXESOK          YES, RETURN TO CALLER.
         ALR   R7,R0             NO, ADVANCE TARGET POINTER.
         ALR   R5,R0             ADVANCE THE SOURCE POINTER.
         B     R5AXESLP          GET ANOTHER CHUNK.
R5AXESOK LM    R14,R12,12(R13)   RESTORE REGISTERS.
         LA    R5,SECTCT         POINT TO THE FETCHED DATA.
         BR    R14
R6ACCESS DS    0H                MAKE GPR 6 ADDRESS RELEVANT DATA.
         TM    KFLAGS,KXM        USING CROSS-MEMORY MODE?
         BZR   R14               NO, ADDRESSABILITY IS OKAY.
         AIF   (&MSPMON).R6XAK
         TM    OSBITS,X'9B'      MVS/ESA?
         BOR   R14               YES, USING ACCESS REGISTERS.
.R6XAK   ANOP
         STM   R14,R12,12(R13)   SAVE REGISTERS.
         LA    R3,X'80'          USE STORAGE KEY EIGHT.
         LR    R8,R0             GET THE LENGTH OF DATA TO FETCH.
         LA    R7,SECTCT+512     POINT TO THE TARGET AREA.
         XC    0(256,R7),0(R7)   RESET RESIDUAL DATA.
         MVCP  0(R8,R7),0(R6),R3 FETCH THE DATA.
         LM    R14,R12,12(R13)   RESTORE REGISTERS.
         LA    R6,SECTCT+512     POINT TO THE FETCHED DATA.
         BR    R14
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - VARIABLES AND CONSTANTS'
DGSTOKEN DC    D'0'              DATA GATHERER SPACE TOKEN.
IMPMAJOR DC    CL8'IMPMAJOR'
IMPMINOR DC    C'IMPDATGAT ACTIVE'
IMINRLEN EQU   *-IMPMINOR
SMFPRIME DC    CL8'SMFPRIME'
DATGATNM DC    CL8'IMDATGAT'
DGOPTKNM DC    CL8'IMDGOPTK'
KLOCDATE DC    PL4'0'            REQUESTED DATE TO LOCATE.
KSAVER14 DC    F'0'              GPR 14 SAVE AREA.
KGATALET DC    F'0'              ALET FOR DATA GATHERER ADDRESS SPACE.
GQKTOKEN DC    F'0'              GQSCAN TOKEN.
DGTCBADR DC    F'0'              DATA GATHERER TCB ADDRESS.
DGEPADDR DC    F'0'              DATA GATHERER ENTRY POINT ADDRESS.
KGATASID DC    F'0'              DATA GATHERER ASID.
KBASEADR DC    F'0'              DATA GATHERER BASE ENTRY ADDRESS.
KSHOWSYS DC    CL4' '            SYSTEM OWNING THE DISPLAYED HISTORY.
KSHOWITM DC    CL44' '           SMF ITEM NAME WHOSE EVENTS ARE LISTED.
KTOPADRS DS    0F                TOP-OF-SCREEN ADDRESS LIST.
KINTADDR DC    A(0)              TOP-OF-SCREEN INTERVAL ADDRESS.
KITEMADR DC    A(0)              TOP-OF-SCREEN SMF ITEM NAME ADDRESS.
KEVNTADR DC    A(0)              TOP-OF-SCREEN SMF EVENT ADDRESS.
KTOPADLN EQU   *-KTOPADRS
KSCRLAMT DC    F'0'              LINES TO SCROLL.
KMAXSHOW DC    F'28'             HIGHEST DISPLAY TYPE CODE SUPPORTED.
KMAXITEM DS    0F                MAXIMUM ITEM COUNT OF DISPLAY TYPES.
KCPUCNT  DC    F'1'              TYPE 00 - CPU UTILIZATION.
KIORCNT  DC    F'1'              TYPE 01 - SYSTEM I/O RATE.
KPGRCNT  DC    F'1'              TYPE 02 - SYSTEM PAGING RATE.
KUICCNT  DC    F'1'              TYPE 03 - SYSTEM HIGH UIC.
KCNTCNT  DC    F'1'              TYPE 04 - CENTRAL STORAGE USAGE.
KEIOCNT  DC    F'1'              TYPE 05 - EXPANDED STORAGE I/O RATE.
KMIGCNT  DC    F'1'              TYPE 06 - EXPANDED STORAGE MIGR. AGE.
KEXPCNT  DC    F'1'              TYPE 07 - EXPANDED STORAGE USAGE.
KCSACNT  DC    F'1'              TYPE 08 - COMMON SERVICE AREA USAGE.
KECSCNT  DC    F'1'              TYPE 09 - EXTENDED CSA USAGE.
KRDYCNT  DC    F'1'              TYPE 10 - READY ASID COUNT.
KINUCNT  DC    F'1'              TYPE 11 - IN ASID COUNT.
KOTUCNT  DC    F'1'              TYPE 12 - OUT ASID COUNT.
KWTUCNT  DC    F'1'              TYPE 13 - WAIT ASID COUNT.
KJOBCNT  DC    F'1'              TYPE 14 - BATCH JOB ASID COUNT.
KSTCCNT  DC    F'1'              TYPE 15 - STARTED TASK ASID COUNT.
KTSUCNT  DC    F'1'              TYPE 16 - TSO USER ASID COUNT.
KLRDCNT  DC    F'1'              TYPE 17 - LOGICAL READY ASID COUNT.
KLWTCNT  DC    F'1'              TYPE 18 - LOGICAL WAIT ASID COUNT.
KASCCNT  DC    F'1'              TYPE 19 - ASCH ASID COUNT.
KOEDCNT  DC    F'1'              TYPE 20 - OPEN EDITION MVS ASID COUNT.
KPRTCNT  DC    F'1'              TYPE 21 - PRINT OUTPUT VOLUMES.
KPDACNT  DC    F'0'              TYPE 22 - PAGE/SWAP DATA SET ACTIVITY.
KPDFCNT  DC    F'0'              TYPE 23 - PAGE/SWAP DATA SET FULLNESS.
KCHNCNT  DC    F'0'              TYPE 24 - CHANNEL PATH UTILIZATION.
KDVUCNT  DC    F'0'              TYPE 25 - DEVICE UTILIZATION.
KDVTCNT  DC    F'0'              TYPE 26 - DEVICE SERVICE TIME.
KTRTCNT  DC    F'0'              TYPE 27 - TRANSACTION RESPONSE TIME.
KSRVCNT  DC    F'0'              TYPE 28 - SERVICE UNIT ABSORPTION.
KMAXEND  DS    0F                END OF MAXIMUM ITEM VECTOR.
KGSBH1TB DC    A(KSUBHDG1)       GRAPHIC SUBHEADING 1 TABLE ADDRESS.
KGSBH2TB DC    A(KSUBHDG2)       GRAPHIC SUBHEADING 2 TABLE ADDRESS.
KTSBH1TB DC    A(KSUBHDT1)       TABULAR SUBHEADING 1 TABLE ADDRESS.
KTSBH2TB DC    A(KSUBHDT2)       TABULAR SUBHEADING 2 TABLE ADDRESS.
KSCLTBAD DC    A(KSCLTABL)       VARIABLE CALLIBRATION TABLE ADDRESS.
KNAMTBAD DC    A(KNAMETBL)       DISPLAY TYPE NAME TABLE ADDRESS.
KDISPTBL DS    0F                DISPLAY SUBROUTINE ENTRY POINT TABLE.
         DC    A(KDISPCPU)       TYPE 00 - CPU UTILIZATION.
         DC    A(KDISPIOR)       TYPE 01 - SYSTEM I/O RATE.
         DC    A(KDISPPGR)       TYPE 02 - SYSTEM PAGING RATE.
         DC    A(KDISPUIC)       TYPE 03 - SYSTEM HIGH UIC.
         DC    A(KDISPCNT)       TYPE 04 - CENTRAL STORAGE USAGE.
         DC    A(KDISPEIO)       TYPE 05 - EXPANDED STORAGE I/O RATE.
         DC    A(KDISPMIG)       TYPE 06 - EXPANDED STORAGE MIGR. AGE.
         DC    A(KDISPEXP)       TYPE 07 - EXPANDED STORAGE USAGE.
         DC    A(KDISPCSA)       TYPE 08 - COMMON SERVICE AREA USAGE.
         DC    A(KDISPECS)       TYPE 09 - EXTENDED CSA USAGE.
         DC    A(KDISPAS#)       TYPE 10 - READY ASID COUNT.
         DC    A(KDISPAS#)       TYPE 11 - IN ASID COUNT.
         DC    A(KDISPAS#)       TYPE 12 - OUT ASID COUNT.
         DC    A(KDISPAS#)       TYPE 13 - WAIT ASID COUNT.
         DC    A(KDISPAS#)       TYPE 14 - BATCH JOB ASID COUNT.
         DC    A(KDISPAS#)       TYPE 15 - STARTED TASK ASID COUNT.
         DC    A(KDISPAS#)       TYPE 16 - TSO USER ASID COUNT.
         DC    A(KDISPAS#)       TYPE 17 - LOGICAL READY ASID COUNT.
         DC    A(KDISPAS#)       TYPE 18 - LOGICAL WAIT ASID COUNT.
         DC    A(KDISPAS#)       TYPE 19 - ASCH ASID COUNT.
         DC    A(KDISPAS#)       TYPE 20 - OPEN EDITION MVS ASID COUNT.
         DC    A(KDISPPRT)       TYPE 21 - PRINT OUTPUT VOLUMES.
         DC    A(KDISPPDU)       TYPE 22 - PAGE/SWAP DATA SET ACTIVITY.
         DC    A(KDISPPDF)       TYPE 23 - PAGE/SWAP DATA SET FULLNESS.
         DC    A(KDISPCHN)       TYPE 24 - CHANNEL PATH UTILIZATION.
         DC    A(KDISPDVU)       TYPE 25 - DEVICE UTILIZATION.
         DC    A(KDISPDVT)       TYPE 26 - DEVICE SERVICE TIME.
         DC    A(KDISPTRT)       TYPE 27 - TRANSACTION RESPONSE TIME.
         DC    A(KDISPSRV)       TYPE 28 - SERVICE UNIT ABSORPTION.
KVARI    EQU   22                FIRST DISPLAY TYPE THAT CAN HAVE
*                                MORE THAN ONE ITEM.
KCHAN    EQU   24                ONLY CHANNEL PATH DISPLAY TYPE CODE.
*                                DEVICE DISPLAYS MUST BE AFTER
*                                CHANNEL PATH DISPLAYS AND BEFORE
*                                PERFORMANCE GROUP DISPLAYS.
KPERF    EQU   27                FIRST PERF. GROUP DISPLAY TYPE CODE.
*                                            DISPLAY VECTOR.
*                                     +0     X'80' - DISPLAY FIXED.
*                                     +0     DISPLAY TYPE.
*                                     +4     X'FF' - GET ITEM NUMBER.
*                                     +4     DISPLAY ITEM NUMBER.
*                                     +8     X'80' - TABULAR MODE.
*                                     +8     DISPLAY LINE OFFSET.
*                                     +C     DISPLAY ITEM IDENTIFIER.
*                                    +10     DISPLAY SCALING FACTOR.
KLEFT    DC    F'0',F'1',AL1(X'80'),AL3(LL-66),F'0',F'1',XL36'00'
KRIGHT   DC    F'1',F'1',AL1(X'80'),AL3(LL-33),F'0',F'1',XL36'00'
KDGPLIST DC    X'80',AL3(KPDGPLEN)   PROGRAM PARAMETER FOR IMDATGAT.
KHDGCNT  DC    H'1'              CURRENT (SUB-) HEADING LINE COUNT.
EDK2PNT3 DC    X'4021204B202020'
EDK3PNT2 DC    X'402021204B20206C'
EDK4PNT1 DC    X'40202021204B206C'
EDK5PNT2 DC    X'4020202021204B2020'
EDK6PNT1 DC    X'402020202021204B206C'
EDKYYDDD DC    X'40202120204B202020'
EDKHHMM  DC    X'4021202020202020'
         AIF   (&MVSMON).KGRFPAP
KGCHAR   DC    C' '              GRAPH BACKGROUND CHARACTER.
         AGO   .KGRFOK
.KGRFPAP ANOP
KGCHAR   DC    X'09'             GRAPH BACKGROUND CHARACTER.
.KGRFOK  ANOP
KFLAGS   DC    X'00'             VARIOUS LOCAL FLAGS.
KXM      EQU   X'80'             USING CROSS-MEMORY ACCESS.
KDGNOW   EQU   X'40'             PERFORMING LOCAL DATA GATHERING.
*        EQU   X'20'             UNUSED.
*        EQU   X'10'             UNUSED.
*        EQU   X'08'             UNUSED.
*        EQU   X'04'             UNUSED.
*        EQU   X'02'             UNUSED.
KDATEFMT EQU   X'01'             JULIAN/YMD DATE FORMAT SWITCH.
PL1ZERO  DC    PL1'0'            ZERO IN PACKED DECIMAL.
HEADNGK0 DC    C'PERFORMANCE HISTORY DISPLAY'
HEADNGK1 DC    CL71'PLACE CURSOR ON LINE AND HIT ENTER TO SELECT 1 FROM+
                ZZ9 ITEM(S) LISTED '
HEADINGK DC    C'PERFORMANCE HISTORY OF SYSTEM'
TRAILERK DCS   SA,HILITE,NORMAL,SA,COLOUR,WHITE,SBA,(1,67)
         DCS   C' FIXD:',SF,UNPHI,SA,HILITE,USCORE
TRLKFIXD DC    C'?'
         DCS   SF,PROHIS,SA,COLOUR,GREEN,SBA,(2,16),SF,UNPLO
TRLKLNAM DC    CL7'_______'
         DCS   SF,PROLOS,SBA,(2,45),SF,UNPLO
TRLKLGRF DC    C'?'
         DCS   SF,PROLOS,SBA,(2,49),SF,UNPLO
TRLKRNAM DC    CL7'_______'
         DCS   SF,PROLOS,SBA,(2,78),SF,UNPLO
TRLKRGRF DC    C'?'
         DCS   SF,PROLOS
TRLRKLEN EQU   *-TRAILERK
TRAILRKJ DCS   SBA,(2,8),SF,UNPLO
         DC    CL5'YYDDD'
         DCS   SF,PROLOS
TRLRKJLN EQU   *-TRAILRKJ
TRAILRKG DCS   SBA,(2,7),SF,UNPLO
         DC    CL6'YYMMDD'
         DCS   SF,PROLOS
TRLRKGLN EQU   *-TRAILRKG
KERRSPLN DC    AL1(7)            ACCUMULATED LENGTH OF ERROR RESPONSE.
KERRRESP DS    0X                INPUT FIELD ERROR RESPONSE.
         DCS   X'C6',SA,COLOUR,RED,SA,HILITE,REVERSE
         DC    3CL10' '          ROOM FOR THREE INPUT FIELD ERRORS.
         SPACE
         LTORG
         SPACE
KBADMSGS DS    0X                ERROR MESSAGE TABLE.
KBADMSG0 DC    CL32'IMON DATA GATHERER IS NOT ACTIVE'
KBADMSG1 DC    CL32' SMFPRIME DD NOT PRE-ALLOCATED  '
KBADMSG2 DC    CL32'   ALESERV ADD FAILED - RC=??   '
KBADMSG3 DC    CL32' SMFPRIME NOT TAPE OR DISK FILE '
KBADMSG4 DC    CL32'PGM=IMDATGAT COULD NOT BE LOADED'
         SPACE
KLOCNPRM DC    X'C11140403C40400011C5C2&LOW'
         DC    C'ENTER ITEM NAME OR PREFIX'
         DC    X'&MED',C'===>',X'1BC94E132841F4'
KLOCNAME DC    XL44'00'
         DC    X'2841001BF8C2'
KLOCNLEN EQU   *-KLOCNPRM
         SPACE
KPARMPRM DC    X'C11140403C4040401B404E132841F400001BF8C62842F7'
         DC    CL76'         HISTORICAL KNOWLEDGE DATA SELECTION PARAME+
               TERS             &IMPDATE',X'284100'
         DCS   SBA,(4,2)
         DC    X'&HIGH',C'PERFORM =',X'1D402841F42842F4',C'Y'
         DC    X'284100&MED',C'(Y/N)',X'&LOW'
         DC    C' (COLLECT RMF/PDLF PERFORMANCE HISTORY?)'
         DCS   SBA,(6,2)
         DC    X'&HIGH',C'DATASET =',X'1D402841F42842F4',C'Y'
         DC    X'284100&MED',C'(Y/N)',X'&LOW'
         DC    C' (COLLECT DATA SET EVENT HISTORY?)'
         DCS   SBA,(8,2)
         DC    X'&HIGH',C'JOBSTEP =',X'1D402841F42842F4',C'Y'
         DC    X'284100&MED',C'(Y/N)',X'&LOW'
         DC    C' (COLLECT JOB STEP EVENT HISTORY?)'
         DCS   SBA,(10,2)
         DC    X'&HIGH',C'TAPEJOB =',X'1D402841F42842F4',CL8'CADISP**'
         DC    X'284100&MED',C'(JOB NAME MASK)',X'&LOW'
         DCS   SBA,(11,22)
         DC    C'(IGNORE TAPE DATA SET EVENTS FOR THIS JOB NAME MASK.)'
         DCS   SBA,(13,2)
         DC    X'&HIGH',C'DASDJOB =',X'1D402841F42842F4',CL8'DFHSM***'
         DC    X'284100&MED',C'(JOB NAME MASK)',X'&LOW'
         DCS   SBA,(14,22)
         DC    C'(IGNORE DASD DATA SET EVENTS FOR THIS JOB NAME MASK.)'
         DCS   SBA,(16,1)
         DC    X'&HIGH',C'TRACEJOB =',X'1D402841F42842F4',CL8'********'
         DC    X'284100&MED',C'(JOB NAME MASK)',X'&LOW'
         DCS   SBA,(17,22)
         DC    C'(COLLECT SMF EVENTS FOR ONLY THIS JOB NAME MASK.)'
         DCS   SBA,(20,1)
         DC    X'1DF02842F1'
         DC    CL40'   BY USING THESE PARAMETERS TO REDUCE T'
         DC    CL40'HE COLLECTION OF UNWANTED DATA, YOU CAN '
         DC    CL40'INCREASE THE QUANTITY OF RELEVANT DATA T'
         DC    CL40'HAT WILL FIT INTO YOUR REGION, AS WELL  '
         DC    CL40'AS DECREASE THE PROCESSING REQUIRED TO P'
         DC    C'RODUCE A DISPLAY SCREEN IMAGE.'
KPARMLEN EQU   *-KPARMPRM
         SPACE
         DS    0F
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SUBHEADINGS'
KSUBHDG1 DS    0F               GRAPHIC SUBHEADING 1 TABLE.
         DC    CL32'  CPU UTILIZATION (PERCENTAGE)  '
         DC    C'I/O RATE - ',X'06',C'=TPI/CC=1 ',X'05',C'=I/O-SLIH'
         DC    C'PAGING - '
         DC    X'03',C'=DEMAND ',X'05',C'=SWAP ',X'06',C'=VIO  '
         DC    C'SYS-HIGH-UIC - '
         DC    X'04',C'=MIN ',X'05',C'=AVG ',X'01',C'=MAX'
         DC    C' ',X'03',C'NUC ',X'05',C'SQA ',X'04',C'RGN '
         DC    X'05',C'LSQA ',X'06',C'LPA ',X'01',C'CSA '
         DC    C'EXPANDED STG I/O- ',X'04',C'=READ ',X'06',C'=WRITE'
         DC    C'MIGRATION AGE- '
         DC    X'04',C'=MIN ',X'05',C'=AVG ',X'01',C'=MAX'
         DC    C' ',X'07',C'VIO ',X'05',C'SQA ',X'04',C'RGN '
         DC    X'05',C'LSQA ',X'06',C'LPA ',X'01',C'CSA '
         DC    C' CSA -  ',X'04',C'=227 ',X'05',C'=228 '
         DC    X'06',C'=231 ',X'03',C'=241 '
         DC    C' ',X'05',C'=AVERAGE USAGE ',X'06',C'=MAXIMUM USAGE'
         DC    CL32' READY USER ADDRESS SPACE COUNT '
         DC    CL32'   IN USER ADDRESS SPACE COUNT  '
         DC    CL32'  OUT USER ADDRESS SPACE COUNT  '
         DC    CL32' WAIT USER ADDRESS SPACE COUNT  '
         DC    C' BATCH JOBS: '
         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '
         DC    C'  STC ASIDS: '
         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '
         DC    C'  TSU ASIDS: '
         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '
         DC    CL32' LOGICAL READY USER ASID COUNT  '
         DC    CL32'  LOGICAL WAIT USER ASID COUNT  '
         DC    C' ASCH ASIDS: '
         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '
         DC    C' OMVS ASIDS: '
         DC    X'05',C'=MIN ',X'06',C'=AVG ',X'03',C'=MAX  '
         DC    C'PRINT LINES (000''S) '
         DC    X'06',C'=XWTR ',X'03',C'=NJE'
         DC    CL32'_____________________ IO/BSY/XFR'
         DC    CL32'________________________ FULL(%)'
         DC    CL32'  CHANNEL PATH __               '
         DC    C' ___        '
         DC    X'05',C'CON ',X'06',C'DISC ',X'02',C'PND ',X'01',C'MTP'
         DC    C' ___        '
         DC    X'05',C'=CON ',X'06',C'=DISC ',X'02',C'=PEND '
         DC    C'PGN ___         '
         DC    X'04',C'P1 ',X'03',C'P2 ',X'06',C'P3 ',X'01',C'P>3'
         DC    C'PGN ___         '
         DC    X'04',C'P1 ',X'03',C'P2 ',X'06',C'P3 ',X'01',C'P>3'
         SPACE
KSUBHDG2 DS    0F               GRAPHIC SUBHEADING 2 TABLE.
         DC    CL32'---2+0--4+0--6+0--8+0---% TOTAL '
         DC    CL32'----+---1+0---+---2+0---+ /SEC  '
         DC    CL32'----+---1+0---+---2+0---+ /SEC  '
         DC    CL32'----+---100---+---200---+   AVG '
         DC    C'---2+0--4+0--6+0--8+0---%  ',X'0C',C'AVL '
         DC    CL32'----+---1+0---+---2+0---+ /SEC  '
         DC    CL32'----+---1+0---+---2+0---+   AVG '
         DC    C'---2+0--4+0--6+0--8+0---%  ',X'02',C'HIPR'
         DC    C'---2+0--4+0--6+0--8+0---% ',X'02',C'=MAX '
         DC    CL32'---2+0--4+0--6+0--8+0---%   MAX '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  MAX  '
         DC    CL32'---2+0--4+0--6+0--8+0---+  TOTAL'
         DC    CL32'---2+0--4+0--6+0--8+0---+  BUSY%'
         DC    CL32'---2+0--4+0--6+0--8+0---%   AVG '
         DC    CL32'---2+0--4+0--6+0--8+0---%   AVG '
         DC    CL32'---2+0--4+0--6+0--8+0---%   AVG '
         DC    C'---1+0--2+0--3+0--4+0--',X'94A2',C' SERVTM'
         DC    C'----2----4----6----8-',X'A28583A2',C' PG-RSP'
         DC    CL32'----+--40+00--+--80+00--+ SU/SEC'
         SPACE
KSUBHDT1 DS    0F                NON-GRAPHIC SUBHEADING 1 TABLE.
         DC    CL32'  CPU UTILIZATION (PERCENTAGE)  '
         DC    CL32'         SYSTEM I/O RATE        '
         DC    CL32'       SYSTEM PAGING RATE       '
         DC    CL32'HIGH UNREFERENCED INTERVAL COUNT'
         DC    CL32'  CENTRAL (REAL) STORAGE USAGE  '
         DC    CL32'   EXPANDED STORAGE I/O RATE    '
         DC    CL32' EXPANDED STORAGE MIGRATION AGE '
         DC    CL32'     EXPANDED STORAGE USAGE     '
         DC    CL32'    COMMON SERVICE AREA USAGE   '
         DC    CL32'  EXTENDED COMMON SERVICE AREA  '
         DC    CL32' READY USER ADDRESS SPACE COUNT '
         DC    CL32'   IN USER ADDRESS SPACE COUNT  '
         DC    CL32'  OUT USER ADDRESS SPACE COUNT  '
         DC    CL32' WAIT USER ADDRESS SPACE COUNT  '
         DC    CL32' BATCH JOB ADDRESS SPACE COUNT  '
         DC    CL32'    STARTED TASK ASID COUNT     '
         DC    CL32'  TIME SHARING USER ASID COUNT  '
         DC    CL32' LOGICAL READY USER ASID COUNT  '
         DC    CL32'  LOGICAL WAIT USER ASID COUNT  '
         DC    CL32'    ASCH ADDRESS SPACE COUNT    '
         DC    CL32'   OPEN EDITION MVS ASID COUNT  '
         DC    CL32'   PRINT LINE OUTPUT VOLUMES    '
         DC    CL32'_______________________ ACTIVITY'
         DC    CL32'________________________ FULL(%)'
         DC    CL32'  CHANNEL PATH __               '
         DC    CL32'DEVICE ___        UTILIZATION(%)'
         DC    CL29'DEV ___         SERVICE TIME(',XL2'94A2',CL1')'
         DC    CL32'PGN ___         RATE + RESP-TIME'
         DC    CL32'PGN ___         PAGE-IN + ABSORP'
         SPACE
KSUBHDT2 DS    0F                NON-GRAPHIC SUBHEADING 2 TABLE.
         DC    CL32'CAPTURED  CAPTURE-RATIO   TOTAL '
         DC    CL32'   TPI%    TPI     SLIH    TOTAL'
         DC    CL32'  DEMAND    SWAP     VIO   TOTAL'
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32' NUC SQA  RGN LSQA LPA CSA  AVL '
         DC    CL32'READ/SEC   WRITE/SEC  READ+WRITE'
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32' VIO SQA  RGN LSQA LPA CSA HIPER'
         DC    CL32' AVERAGE MAXIMUM MAXUSED BIGFREE'
         DC    CL32' AVERAGE MAXIMUM MAXUSED BIGFREE'
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'  MINIMUM    AVERAGE   MAXIMUM  '
         DC    CL32'LCL-NODE EXT-WTR NJE-XMIT  TOTAL'
         DC    CL32'BAD  XFRTM   IORT  XFRRT   BUSY%'
         DC    CL32'BAD MIN-FULL  AVG-FULL  MAX-FULL'
         DC    CL32'            UTILIZATION PERCENT '
         DC    CL32' RESV CONN DISC PEND  MNTP NTRDY'
         DC    CL32' CONN DISC PEND  CUB DEVB  DPB  '
         DC    CL32'TRN/S PP-1 PP-2 PP-3 PP-4  GROUP'
         DC    CL32'PGS/S PP-1 PP-2 PP-3 PP-4 TOTAL '
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - VARIABLE CALLIBRATIONS'
KSCLTABL DS    0F                                FULL-SCALE VALUE:
         DC    F'500000',F'1'
         DC    CL24'----+--40+00--+--80+00--'        10,000
KSCLTBSZ EQU   *-KSCLTABL
         DC    F'250000',F'2'
         DC    CL24'----+--20+00--+--40+00--'         5,000
         DC    F'200000',F'4'
         DC    CL24'----+--10+00--+--20+00--'         2,500
         DC    F'125000',F'5'
         DC    CL24'----+---800---+--16+00--'         2,000
         DC    F'100000',F'8'
         DC    CL24'----+---500---+--10+00--'         1,250
         DC    F'50000',F'10'
         DC    CL24'----+---400---+---800---'         1,000
         DC    F'25000',F'20'
         DC    CL24'----+---200---+---400---'           500
         DC    F'20000',F'40'
         DC    CL24'----+---100---+---200---'           250
         DC    F'12500',F'50'
         DC    CL24'---4+0--8+0--120--160---'           200
         DC    F'10000',F'80'
         DC    CL24'---2+5--5+0--7+5--100---'           125
         DC    F'5000',F'100'
         DC    CL24'---2+0--4+0--6+0--8+0---'           100
         DC    F'2500',F'200'
         DC    CL24'---1+0--2+0--3+0--4+0---'            50
         DC    F'2000',F'400'
         DC    CL24'----+---1+0---+---2+0---'            25
         DC    F'1250',F'500'
         DC    CL24'----4----8---1+2--1+6---'            20
         DC    F'1000',F'800'
         DC    CL24'-1-2-3-4-5-6-7-8-9-+----'            12.5
         DC    F'500',F'1000'
         DC    CL24'----2----4----6----8----'            10
         DC    F'250',F'2000'
         DC    CL24'----1----2----3----4----'             5
         DC    F'125',F'4000'
         DC    CL24'----+----1----+----2----'             2.5
KSCLTBNO EQU   (*-KSCLTABL)/KSCLTBSZ
         DC    F'0',F'8000'
         DC    CL24'----+----+----+----1----'             1.25
         SPACE 2
KNAMETBL DS    0F                DISPLAY TYPE NAME TABLE.
         DC    C'CPU '           TYPE 00 - CPU UTILIZATION.
         DC    C'IOR '           TYPE 01 - SYSTEM I/O RATE.
         DC    C'PGR '           TYPE 02 - SYSTEM PAGING RATE.
         DC    C'UIC '           TYPE 03 - SYSTEM HIGH UIC.
         DC    C'CNT '           TYPE 04 - CENTRAL STORAGE USAGE.
         DC    C'EIO '           TYPE 05 - EXPANDED STORAGE I/O RATE.
         DC    C'MIG '           TYPE 06 - EXPANDED STORAGE MIGR. AGE.
         DC    C'EXP '           TYPE 07 - EXPANDED STORAGE USAGE.
         DC    C'CSA '           TYPE 08 - COMMON SERVICE AREA USAGE.
         DC    C'ECS '           TYPE 09 - EXTENDED CSA USAGE.
         DC    C'RDY '           TYPE 10 - READY ASID COUNT.
         DC    C'INU '           TYPE 11 - IN ASID COUNT.
         DC    C'OTU '           TYPE 12 - OUT ASID COUNT.
         DC    C'WTU '           TYPE 13 - WAIT ASID COUNT.
         DC    C'JOB '           TYPE 14 - BATCH JOB ASID COUNT.
         DC    C'STC '           TYPE 15 - STARTED TASK ASID COUNT.
         DC    C'TSU '           TYPE 16 - TSO USER ASID COUNT.
         DC    C'LRD '           TYPE 17 - LOGICAL READY ASID COUNT.
         DC    C'LWT '           TYPE 18 - LOGICAL WAIT ASID COUNT.
         DC    C'ASC '           TYPE 19 - ASCH ASID COUNT.
         DC    C'OED '           TYPE 20 - OPEN EDITION MVS ASID COUNT.
         DC    C'PRT '           TYPE 21 - PRINT OUTPUT VOLUMES.
         DC    C'PDA?'           TYPE 22 - PAGE/SWAP DATA SET ACTIVITY.
         DC    C'PDF?'           TYPE 23 - PAGE/SWAP DATA SET FULLNESS.
         DC    C'CHN?'           TYPE 24 - CHANNEL PATH UTILIZATION.
         DC    C'DVU?'           TYPE 25 - DEVICE UTILIZATION.
         DC    C'DVT?'           TYPE 26 - DEVICE SERVICE TIME.
         DC    C'TRT?'           TYPE 27 - TRANSACTION RESPONSE TIME.
         DC    C'SRV?'           TYPE 28 - SERVICE UNIT ABSORPTION.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - INPUT FIELD PARSING'
         USING KNOWPARS,R15
KNOWPARS DS    0H                PARSE INPUT BUFFER FOR CONTROL FIELDS.
         LH    R1,TGETLEN        GET THE INPUT LENGTH.
         LA    R2,INBUFF(R1)     POINT PAST LAST INPUT BYTE.
         AHI   R1,-3             GET DATA LENGTH WITHOUT READ HEADER.
KPARSFLD MVC   0(12,R2),BLANKS   REMOVE FIELD JUST PARSED FROM BUFFER.
         LTR   R1,R1             ANY MORE DATA REMAINING TO PARSE?
         BNPR  R14               NO, SO RETURN.
KPARSELP BCTR  R2,0              BACK UP ONE BYTE.
         CLI   0(R2),X'11'       SBA ORDER?
         BE    KPGOTSBA          YES.
         BCT   R1,KPARSELP       DECREMENT BYTES-TO-PROCESS COUNTER.
         BR    R14               RETURN AT EODAD (SHOULD NOT HAPPEN).
KPGOTSBA BCTR  R1,0              DECREMENT FOR SBA BYTE.
         CLC   1(2,R2),KPFIXAD   UPDATE TO "FIXED" FIELD?
         BE    KPFIX             YES.
         CLC   1(2,R2),KPLC2AD   UPDATE TO "LOCATE" FIELD?
         BE    KPLC2             YES.
         CLC   1(2,R2),KPLOCAD   UPDATE TO "LOCATE" FIELD?
         BE    KPLOC             YES.
         CLC   1(2,R2),KPLNMAD   UPDATE TO LEFT "NAME" FIELD?
         BE    KPLNM             YES.
         CLC   1(2,R2),KPLGMAD   UPDATE TO LEFT "GRAPHIC MODE" FIELD?
         BE    KPLGM             YES.
         CLC   1(2,R2),KPRNMAD   UPDATE TO RIGHT "NAME" FIELD?
         BE    KPRNM             YES.
         CLC   1(2,R2),KPRGMAD   UPDATE TO RIGHT "GRAPHIC MODE" FIELD?
         BE    KPRGM             YES.
         CLC   1(2,R2),KPPRFAD   UPDATE TO PERFORM= PARAMETER FIELD?
         BE    KPPRF             YES.
         CLC   1(2,R2),KPDSNAD   UPDATE TO DATASET= PARAMETER FIELD?
         BE    KPDSN             YES.
         CLC   1(2,R2),KPPGMAD   UPDATE TO PROGRAM= PARAMETER FIELD?
         BE    KPPGM             YES.
         CLC   1(2,R2),KPMTJAD   UPDATE TO TAPEJOB= PARAMETER FIELD?
         BE    KPMTJ             YES.
         CLC   1(2,R2),KPDAJAD   UPDATE TO DASDJOB= PARAMETER FIELD?
         BE    KPDAJ             YES.
         CLC   1(2,R2),KPTRJAD   UPDATE TO TRACEJOB= PARAMETER FIELD?
         BE    KPTRJ             YES.
         BR    R14               RETURN IF PRIMARY OR UNKNOWN INPUT.
         SPACE
KPFIX    CLI   3(R2),C' '        ANY INPUT CHARACTER?
         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.
         CLI   3(R2),C'L'        FIX THE LEFT DISPLAY?
         BE    KPFIXLFT          YES.
         CLI   3(R2),C'R'        FIX THE RIGHT DISPLAY?
         BE    KPFIXRIT          YES.
         NI    KLEFT,X'7F'       ANY OTHER INPUT FREES BOTH DISPLAYS.
         NI    KRIGHT,X'7F'
         B     KPARSFLD          RETURN.
KPFIXLFT OI    KLEFT,X'80'       FIX THE LEFT DISPLAY.
         NI    KRIGHT,X'7F'      FREE THE RIGHT DISPLAY.
         B     KPARSFLD          RETURN.
KPFIXRIT NI    KLEFT,X'7F'       FREE THE LEFT DISPLAY.
         OI    KRIGHT,X'80'      FIX THE RIGHT DISPLAY.
         B     KPARSFLD          RETURN.
         SPACE
KPLC2    CLI   3(R2),C' '        ANY INPUT CHARACTER?
         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.
         LA    R0,6              GET THE NUMBER OF REQUIRED DIGITS.
         LA    R6,3(,R2)         POINT PAST SBA ORDER.
KPLC2LP  CLI   0(R6),C'0'        DECIMAL DIGIT?
         BL    KPLC2ERR          NO, ERROR.
         LA    R6,1(,R6)         YES, POINT TO NEXT DIGIT.
         BCT   R0,KPLC2LP
         CLC   5(2,R2),=C'00'    RIDICULOUS MONTH NUMBER?
         BNH   KPLC2ERR          YES, REJECT DATE.
         CLC   5(2,R2),=C'12'    RIDICULOUS MONTH NUMBER?
         BH    KPLC2ERR          YES, REJECT DATE.
         CLC   7(2,R2),=C'00'    RIDICULOUS DAY OF MONTH NUMBER?
         BNH   KPLC2ERR          YES, REJECT DATE.
         CLC   5(2,R2),=C'31'    RIDICULOUS DAY OF MONTH NUMBER?
         BH    KPLC2ERR          YES, REJECT DATE.
         PACK  KLOCDATE,3(6,R2)  GET THE REQUESTED DATE.
         L     R0,KLOCDATE       LOAD 0YYMMDDC.
         ST    R14,KSAVER14      SAVE RETURN ADDRESS.
         BAS   R14,GREG2JUL      CONVERT TO JULIAN DATE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         ST    R0,KLOCDATE       SAVE 00YYDDDC.
         B     KCENTCHK          GO DETERMINE WHICH CENTURY.
KPLC2ERR SLR   R7,R7
         IC    R7,KERRSPLN       GET ERROR DATA STREAM LENGTH SO FAR.
         LA    R0,10(,R7)        GET NEW LENGTH.
         STC   R0,KERRSPLN       SAVE IT.
         B     KP2NDERR          BRANCH TO COMMON CODE.
         SPACE
KPLOC    CLI   3(R2),C' '        ANY INPUT CHARACTER?
         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.
         LA    R0,5              GET THE NUMBER OF REQUIRED DIGITS.
         LA    R6,3(,R2)         POINT PAST SBA ORDER.
KPLOCLP  CLI   0(R6),C'0'        DECIMAL DIGIT?
         BL    KPLOCERR          NO, ERROR.
         LA    R6,1(,R6)         YES, POINT TO NEXT DIGIT.
         BCT   R0,KPLOCLP
         CLC   5(3,R2),=C'366'   RIDICULOUS JULIAN DAY?
         BH    KPLOCERR          YES, REJECT DATE.
         PACK  KLOCDATE,3(5,R2)  GET THE REQUESTED DATE.
         CP    KLOCDATE,PL1ZERO  NON-ZERO DATE SPECIFIED?
         BE    KPARSFLD          NO, RETURN WITHOUT ACTION.
KCENTCHK CLI   KLOCDATE+1,X'70'  IS THE YEAR AFTER 1970?
         BH    KPARSFLD          YES, LEAVE CENTURY BYTE ZERO.
         MVI   KLOCDATE,X'01'    NO, ADJUST THE CENTURY FOR AFTER 1999.
         B     KPARSFLD          RETURN.
KPLOCERR SLR   R7,R7
         IC    R7,KERRSPLN       GET ERROR DATA STREAM LENGTH SO FAR.
         LA    R0,9(,R7)         GET NEW LENGTH.
         STC   R0,KERRSPLN       SAVE IT.
         B     KP2NDERR          BRANCH TO COMMON CODE.
         SPACE
KPLNM    LA    R3,KLEFT          POINT TO LEFT DISPLAY VECTOR.
         B     KPNAME            BRANCH TO COMMON CODE.
KPRNM    LA    R3,KRIGHT         POINT TO RIGHT DISPLAY VECTOR.
KPNAME   CLI   3(R2),C' '        ANY INPUT CHARACTER?
         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.
         L     R7,KNAMTBAD       POINT TO DISPLAY NAME TABLE.
         SLR   R6,R6             ZERO DISPLAY TYPE COUNTER.
KPNMSRCH CLC   3(3,R2),0(R7)     REQUEST FOR THIS DISPLAY TYPE?
         BE    KPFNDNAM          YES, FOUND IT.
         C     R6,KMAXSHOW       NO, WAS THAT THE LAST TYPE?
         BNL   KPNAMERR          YES, INPUT FIELD ERROR.
         LA    R6,1(,R6)         NO, INCREMENT THE DISPLAY TYPE CODE.
         LA    R7,4(,R7)         POINT TO THE NEXT DISPLAY TYPE NAME.
         B     KPNMSRCH          CONTINUE SEARCH FOR A NAME MATCH.
KPFNDNAM STCM  R6,R7,1(R3)       UPDATE THE DISPLAY CODE.
         CLI   3(R3),KCHAN       ANY NEED TO CHECK FOR NUMBER?
         BL    KPARSFLD          NO, RETURN.
         CLI   3(R3),KPERF       YES, DECIMAL OR HEXADECIMAL?
         BL    KPNAMHEX          HEXADECIMAL.
         CLI   6(R2),C'0'        DECIMAL.  ANY DIGIT SUPPLIED?
         BL    KPARSFLD          NO, RETURN.
         SLR   R0,R0             YES, ZERO ACCUMULATOR.
         SLR   R7,R7
         LA    R8,6(,R2)         POINT TO FIRST DIGIT.
KPNDECLP CLI   0(R8),C'0'        VALID DIGIT HERE?
         BL    KPGOTIID          NO, NOW HAVE ITEM IDENTIFIER.
         NI    0(R8),X'0F'       YES, RESET ZONE.
         IC    R7,0(,R8)         GET NUMERIC.
         MH    R0,TEN+2          PROMOTE PREVIOUS DIGITS.
         AR    R0,R7             ADD THIS DIGIT.
         LA    R8,1(,R8)         POINT TO NEXT DIGIT CANDIDATE.
         B     KPNDECLP          SEE IF ANY MORE DIGITS.
KPGOTIID ST    R0,12(,R3)        PUT ITEM IDENTIFIER IN DISPLAY VECTOR.
         MVI   4(R3),X'FF'       FLAG DETERMINE ITEM NUMBER FROM ID.
         B     KPARSFLD          RETURN.
KPNAMHEX CLI   6(R2),C'A'        ANY HEXADECIMAL DIGIT SUPPLIED?
         BL    KPARSFLD          NO, RETURN.
         STM   R1,R2,WORK        SAVE REGISTERS ALTERED BY TRT.
         TRT   6(1,R2),KPHEXTAB  ANY HEXADECIMAL DIGIT SUPPLIED?
         LM    R1,R2,WORK        RESTORE REGISTERS ALTERED BY TRT.
         BZ    KPARSFLD          NO, RETURN.
         SLR   R0,R0             YES, ZERO ACCUMULATOR.
         SLR   R7,R7
         LA    R8,6(,R2)         POINT TO FIRST DIGIT.
KPNHEXLP CLI   0(R8),C'A'        VALID DIGIT HERE?
         BL    KPGOTIID          NO, NOW HAVE ITEM IDENTIFIER.
         TR    0(1,R8),KPHEXTAB  CONVERT HEX CHARACTER TO A NUMBER.
         CLI   0(R8),C'0'        VALID DIGIT HERE?
         BL    KPGOTIID          NO, NOW HAVE ITEM IDENTIFIER.
         NI    0(R8),X'0F'       YES, RESET ZONE.
         IC    R7,0(,R8)         GET NUMERIC.
         SLL   R0,4              PROMOTE PREVIOUS DIGITS.
         AR    R0,R7             ADD THIS DIGIT.
         LA    R8,1(,R8)         POINT TO NEXT DIGIT CANDIDATE.
         B     KPNHEXLP          SEE IF ANY MORE DIGITS.
KPNAMERR SLR   R7,R7
         IC    R7,KERRSPLN       GET ERROR DATA STREAM LENGTH SO FAR.
         LA    R0,10(,R7)        GET NEW LENGTH.
         STC   R0,KERRSPLN       SAVE IT.
KP2NDERR LA    R7,KERRRESP(R7)   POINT TO NEXT BUFFER PART TO UPDATE.
         MVI   0(R7),X'11'       SUPPLY SET BUFFER ADDRESS ORDER.
         MVI   3(R7),X'13'       SUPPLY IC ORDER.
         MVC   4(6,R7),3(R2)     SUPPLY ERRONEOUS INPUT TEXT.
         SLR   R0,R0             CLEAR FOR INSERT.
         SLR   R6,R6             CLEAR FOR INSERT.
         IC    R0,1(,R2)         GET THE RELATIVE ROW NUMBER.
         IC    R6,2(,R2)         GET THE RELATIVE LINE NUMBER.
         MH    R0,COLUMNS+2
         AR    R0,R6             GET SCREEN BUFFER LOCATION.
         STCM  R0,1,2(R7)        LOAD SECOND ADDRESS BYTE.
         SLL   R0,2
         STCM  R0,2,1(R7)        LOAD FIRST ADDRESS BYTE.
         NI    2(R7),X'3F'       RESET EXTRANEOUS BITS.
         TR    1(2,R7),TABLE     RE-TRANSLATE TO 3270 DATA STREAM CHAR.
         B     KPARSFLD          RETURN.
         SPACE
KPLGM    LA    R3,KLEFT          POINT TO LEFT DISPLAY VECTOR.
         B     KPGRFMD           BRANCH TO COMMON CODE.
KPRGM    LA    R3,KRIGHT         POINT TO RIGHT DISPLAY VECTOR.
KPGRFMD  CLI   3(R2),C' '        ANY INPUT CHARACTER?
         BNH   KPARSFLD          NO, RETURN WITHOUT ACTION.
         CLI   3(R2),C'Y'        TURN ON GRAPHIC MODE?
         BE    KPGMON            YES.
         CLI   3(R2),C'N'        TURN OFF GRAPHIC MODE?
         BE    KPGMOFF           YES.
         XI    8(R3),X'80'       ANY OTHER NON-BLANK TOGGLES IT.
         B     KPARSFLD          RETURN.
KPGMON   NI    8(R3),X'7F'       TURN ON GRAPHIC MODE.
         B     KPARSFLD          RETURN.
KPGMOFF  OI    8(R3),X'80'       TURN ON TABULAR MODE.
         B     KPARSFLD          RETURN.
         SPACE
KPPRF    MVC   KPDGPPRF(1),3(R2) COPY PERFORMANCE DATA SWITCH.
         B     KPARSFLD          RETURN.
         SPACE
KPDSN    MVC   KPDGPDSN(1),3(R2) COPY DATA SET DATA SWITCH.
         B     KPARSFLD          RETURN.
         SPACE
KPPGM    MVC   KPDGPPGM(1),3(R2) COPY PROGRAM DATA SWITCH.
         B     KPARSFLD          RETURN.
         SPACE
KPMTJ    MVC   KPDGPTAP(8),3(R2) COPY TAPE EXCLUSION JOB NAME MASK.
         B     KPARSFLD          RETURN.
         SPACE
KPDAJ    MVC   KPDGPDSK(8),3(R2) COPY DASD EXCLUSION JOB NAME MASK.
         B     KPARSFLD          RETURN.
         SPACE
KPTRJ    MVC   KPDGPTRC(8),3(R2) COPY DASD EXCLUSION JOB NAME MASK.
         B     KPARSFLD          RETURN.
         SPACE
KPFIXAD  DC    AL1(0,73)         DCS   (1,74)
KPLC2AD  DC    AL1(1,07)         DCS   (2,08)
KPLOCAD  DC    AL1(1,08)         DCS   (2,09)
KPLNMAD  DC    AL1(1,16)         DCS   (2,17)
KPLGMAD  DC    AL1(1,45)         DCS   (2,46)
KPRNMAD  DC    AL1(1,49)         DCS   (2,50)
KPRGMAD  DC    AL1(1,78)         DCS   (2,79)
KPPRFAD  DC    AL1(3,12)         DCS   (4,13)
KPDSNAD  DC    AL1(5,12)         DCS   (6,13)
KPPGMAD  DC    AL1(7,12)         DCS   (8,13)
KPMTJAD  DC    AL1(9,12)         DCS   (10,13)
KPDAJAD  DC    AL1(12,12)        DCS   (13,13)
KPTRJAD  DC    AL1(15,12)        DCS   (16,13)
         DS    0F
KPHEXTAB EQU   *-X'C0'
         DC    XL16'00FAFBFCFDFEFF000000000000000000'
         DC    XL16'00000000000000000000000000000000'
         DC    XL16'00000000000000000000000000000000'
         DC    XL16'F0F1F2F3F4F5F6F7F8F9000000000000'
         SPACE
         DS    0F                PROGRAM PARAMETER ALIGNMENT.
KPDGPLEN DC    AL2(KPDGPLN)      PROGRAM PARAMETER LENGTH INDICATOR.
KPDGPARM EQU   *
         DC    C'PERF='
KPDGPPRF DC    C'Y DSET='
KPDGPDSN DC    C'Y STEP='
KPDGPPGM DC    C'Y TAPEJOB='
KPDGPTAP DC    C'CADISP** DASDJOB='
KPDGPDSK DC    C'DFHSM*** TRACEJOB='
KPDGPTRC DC    C'********'
KPDGPLN  EQU   *-KPDGPARM        PROGRAM PARAMETER LENGTH.
         SPACE 2
GREG2JUL DS    0H                CONVERT CYYMMDDF TO 0CYYDDDF.
         STM   R14,R12,12(R13)   SAVE REGISTERS.
         LR    R1,R0             COPY INPUT DATE.
         SLL   R1,4              GET YY IN TOP BYTE.
         ST    R1,WORK           PLACE IN WORK AREA.
         MVI   MONTHTAB+5,28     ASSUME NOT A LEAP YEAR.
         TM    WORK,X'01'        ODD NUMBERED YEAR?
         BO    LEAPOKAY          YES, NOT A LEAP YEAR.
         TM    WORK,X'12'        LEAP YEAR?
         BM    LEAPOKAY          NO.
         MVI   MONTHTAB+5,29     YES.
LEAPOKAY XC    WORK,WORK         CLEAR A WORK AREA.
         STCM  R0,B'0110',WORK+6
         NI    WORK+6,X'0F'
         OI    WORK+7,X'0F'      GET 00000MMF.
         CVB   R1,WORK           GET THE BINARY MONTH NUMBER.
         LA    R2,MONTHTAB       POINT TO DAYS PER MONTH TABLE.
         SLR   R3,R3             CLEAR ACCUMULATOR.
MNTHLOOP AH    R3,0(,R2)         ADD DAYS OF A PREVIOUS MONTH.
         LA    R2,2(,R2)         POINT TO NEXT MONTH'S ENTRY.
         BCT   R1,MNTHLOOP
         XC    WORK,WORK         CLEAR A WORK AREA.
         STH   R0,WORK+6
         NI    WORK+6,X'0F'      GET 00000DDF.
         CVB   R1,WORK           GET BINARY DAY OF MONTH.
         AR    R3,R1             GET JULIAN DAY OF YEAR.
         CVD   R3,WORK           GET DECIMAL JULIAN DAY OF YEAR.
         OI    WORK+7,X'0F'      GET REQUIRED DECIMAL POSITIVE SIGN.
         SRL   R0,4              GET 0CYYMMDD FROM INPUT DATE.
         ICM   R0,3,WORK+6       GET 0CYYDDDF.
         ST    R0,20(,R13)       SAVE VALUE IN R0 SLOT.
         LM    R14,R12,12(R13)   RESTORE REGISTERS.
         BR    R14               RETURN TO CALLER.
         SPACE
MONTHTAB DC    AL2(0,31,28,31,30,31,30,31,31,30,31,30)
         SPACE
         DROP  R15               KNOWPARS.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PERFORMANCE SELECTION'
         USING DGSYSTEM,R4
         USING KNOWSYS,R10
KNOWSYS  DS    0H                POSITION PERFORMANCE HISTORY DISPLAY.
         MVI   KUICCNT+3,0       ZERO "UIC" ITEM COUNT.
         MVI   KCNTCNT+3,0       ZERO "CNT" ITEM COUNT.
         MVI   KEIOCNT+3,0       ZERO "EIO" ITEM COUNT.
         MVI   KMIGCNT+3,0       ZERO "MIG" ITEM COUNT.
         MVI   KEXPCNT+3,0       ZERO "EXP" ITEM COUNT.
         MVI   KCSACNT+3,0       ZERO "CSA" ITEM COUNT.
         MVI   KECSCNT+3,0       ZERO "ECS" ITEM COUNT.
         LA    R7,KRDYCNT        POINT TO "RDY" ITEM COUNT.
         LH    R0,DGMAXRDY       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KINUCNT        POINT TO "INU" ITEM COUNT.
         LH    R0,DGMAXINU       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KOTUCNT        POINT TO "OTU" ITEM COUNT.
         LH    R0,DGMAXOTU       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KWTUCNT        POINT TO "WTU" ITEM COUNT.
         LH    R0,DGMAXWTU       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KJOBCNT        POINT TO "JOB" ITEM COUNT.
         LH    R0,DGMAXJOB       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KSTCCNT        POINT TO "STC" ITEM COUNT.
         LH    R0,DGMAXSTC       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KTSUCNT        POINT TO "TSU" ITEM COUNT.
         LH    R0,DGMAXTSU       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KLRDCNT        POINT TO "LRD" ITEM COUNT.
         LH    R0,DGMAXLRD       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KLWTCNT        POINT TO "LWT" ITEM COUNT.
         LH    R0,DGMAXLWT       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KASCCNT        POINT TO "ASC" ITEM COUNT.
         LH    R0,DGMAXASC       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KOEDCNT        POINT TO "OED" ITEM COUNT.
         LH    R0,DGMAXOED       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         LA    R7,KPRTCNT        POINT TO "PRT" ITEM COUNT.
         L     R0,DGMAXPRT       LOAD MAXIMUM ENOUNTERED.
         BAS   R14,KSETITEM      DETERMINE DISPLAY STATUS.
         TM    DGSYSFLG,DGRMFSYS
         BZ    KNOWPDLF          SUPPRESS RMF-ONLY DATA IF PDLF.
         MVI   KUICCNT+3,1       SHOW "UIC".
         MVI   KCNTCNT+3,1       SHOW "CNT".
         MVI   KEIOCNT+3,1       SHOW "EIO".
         MVI   KMIGCNT+3,1       SHOW "MIG".
         MVI   KEXPCNT+3,1       SHOW "EXP".
         MVI   KCSACNT+3,1       SHOW "CSA".
         MVI   KECSCNT+3,1       SHOW "ECS".
KNOWPDLF XC    KSRVCNT,KSRVCNT   ZERO "SRV" PERFORMANCE GROUP COUNT.
         TM    DGSYSFLG,DGRMFPRF
         BZ    KNOWSERV          SUPPRESS "SRV" IF PDLF DATA ONLY.
         MVC   KSRVCNT,DGNUMPG#  COPY KNOWN PERFORMANCE GROUP COUNT.
KNOWSERV MVC   KTRTCNT,DGNUMPG#  COPY KNOWN PERFORMANCE GROUP COUNT.
         MVC   KCHNCNT,DGNUMCH#  COPY KNOWN CHPID COUNT.
         MVC   KDVUCNT,DGNUMDV#  COPY KNOWN DEVICE COUNT.
         MVC   KDVTCNT,DGNUMDV#  COPY KNOWN DEVICE COUNT.
         MVC   KPDACNT,DGNUMPDN  COPY KNOWN PAGE/SWAP DATA SET COUNT.
         MVC   KPDFCNT,DGNUMPDN  COPY KNOWN PAGE/SWAP DATA SET COUNT.
         MVC   HEADING,BLANKS    LOAD HEADING FOR THIS OPTION.
         MVC   HEADING(L'HEADINGK),HEADINGK
         MVC   HEADING+30(4),KSHOWSYS
         MVC   HEADING+63(7),=C'FIXD: L'
         MVI   KHDGCNT+1,4       UPDATE HEADING LINE COUNT.
         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'S'.
         TM    KLEFT,X'80'       IS THE LEFT DISPLAY FIXED?
         BO    KHDFIXOK          YES.
         MVI   HEADING+69,C'R'   NO.
         TM    KRIGHT,X'80'      IS THE RIGHT DISPLAY FIXED?
         BO    KHDFIXOK          YES.
         MVI   HEADING+69,C'N'   NO, NEITHER DISPLAY IS FIXED.
KHDFIXOK MVC   TRLKFIXD,HEADING+69  UPDATE SCREEN TRAILER.
         LA    R2,BUFFER         INITIALIZE SCREEN BUFFER POINTER.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)
         MVI   LL-79(R2),C' '    BLANK THE DIRECT ACCESS LOCATOR LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-77(10,R2),=C'LOC: _____'
         TM    KFLAGS,KDATEFMT   NO, USING YYMMDD DATE FORMAT?
         BZ    KLOCHDOK          NO.
         MVC   LL-78(5,R2),LL-77(R2) YES, ADJUST HEADING.
KLOCHDOK L     R3,=A(KNOWITEM)   GET ITEM IDENTIFICATION ROUTINE EP.
         LA    R1,KLEFT          POINT TO LEFT DISPLAY SPECIFICATION.
         BASR  R14,R3            INVOKE ITEM IDENTIFICATION ROUTINE.
         MVI   LL-66(R2),X'3B'   SEPARATE THIS DISPLAY AREA.
         LA    R1,KRIGHT         POINT TO RIGHT DISPLAY SPECIFICATION.
         BASR  R14,R3            INVOKE ITEM IDENTIFICATION ROUTINE.
         MVI   LL-33(R2),X'3B'   SEPARATE THIS DISPLAY AREA.
         MVC   TRLKLNAM,LL-64(R2)
         MVC   TRLKLGRF,LL-35(R2)
         MVC   TRLKRNAM,LL-31(R2)
         MVC   TRLKRGRF,LL-2(R2) UPDATE SCREEN TRAILER.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVI   LL-79(R2),C' '    BLANK THE SUB-HEADING-1 LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-79(12,R2),=CL12'INTRVL-START'
         L     R1,KLEFT          GET LEFT DISPLAY TYPE.
         SLL   R1,5              MULTIPLY BY 32 FOR INDEX.
         TM    KLEFT+8,X'80'     LEFT DISPLAY IN TABULAR MODE?
         BZ    KL1G              NO, GRAPHIC MODE.
         AL    R1,KTSBH1TB       POINT TO CORRECT SUB-HEADING-1.
         MVC   LL-65(32,R2),0(R1) LOAD LEFT SUB-HEADING-1.
         TR    LL-65(32,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.
         B     KL1OK
KL1G     AL    R1,KGSBH1TB       POINT TO CORRECT SUB-HEADING-1.
         MVC   LL-65(32,R2),0(R1) LOAD LEFT SUB-HEADING-1.
KL1OK    MVI   LL-66(R2),X'3B'   SEPARATE THIS DISPLAY AREA.
         L     R1,KRIGHT         GET RIGHT DISPLAY TYPE.
         SLL   R1,5              MULTIPLY BY 32 FOR INDEX.
         TM    KRIGHT+8,X'80'    RIGHT DISPLAY IN TABULAR MODE?
         BZ    KR1G              NO, GRAPHIC MODE.
         AL    R1,KTSBH1TB       POINT TO CORRECT SUB-HEADING-1.
         MVC   LL-32(32,R2),0(R1) LOAD RIGHT SUB-HEADING-1.
         TR    LL-32(32,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.
         B     KR1OK
KR1G     AL    R1,KGSBH1TB       POINT TO CORRECT SUB-HEADING-1.
         MVC   LL-32(32,R2),0(R1) LOAD RIGHT SUB-HEADING-1.
KR1OK    MVI   LL-33(R2),X'3B'   SEPARATE THIS DISPLAY AREA.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVI   LL-79(R2),C' '    BLANK THE SUB-HEADING-2 LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-78(10,R2),=CL10'DATE  TIME'
         L     R1,KLEFT          GET LEFT DISPLAY TYPE.
         SLL   R1,5              MULTIPLY BY 32 FOR INDEX.
         TM    KLEFT+8,X'80'     LEFT DISPLAY IN TABULAR MODE?
         BZ    KL2G              NO, GRAPHIC MODE.
         AL    R1,KTSBH2TB       POINT TO CORRECT SUB-HEADING-2.
         MVC   LL-65(32,R2),0(R1) LOAD LEFT SUB-HEADING-2.
         TR    LL-65(32,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.
         B     KL2OK
KL2G     AL    R1,KGSBH2TB       POINT TO CORRECT SUB-HEADING-2.
         MVC   LL-65(32,R2),0(R1) LOAD LEFT SUB-HEADING-2.
         TR    LL-65(25,R2),XLATETBL  PERHAPS FOLD TO UPPER CASE.
KL2OK    MVI   LL-66(R2),X'3B'   SEPARATE THIS DISPLAY AREA.
         L     R1,KRIGHT         GET RIGHT DISPLAY TYPE.
         SLL   R1,5              MULTIPLY BY 32 FOR INDEX.
         TM    KRIGHT+8,X'80'    RIGHT DISPLAY IN TABULAR MODE?
         BZ    KR2G              NO, GRAPHIC MODE.
         AL    R1,KTSBH2TB       POINT TO CORRECT SUB-HEADING-2.
         MVC   LL-32(32,R2),0(R1) LOAD RIGHT SUB-HEADING-2.
         TR    LL-32(32,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.
         B     KR2OK
KR2G     AL    R1,KGSBH2TB       POINT TO CORRECT SUB-HEADING-2.
         MVC   LL-32(32,R2),0(R1) LOAD RIGHT SUB-HEADING-2.
         TR    LL-32(25,R2),XLATETBL   PERHAPS FOLD TO UPPER CASE.
KR2OK    MVI   LL-33(R2),X'3B'   SEPARATE THIS DISPLAY AREA.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         ICM   R5,15,KINTADDR    POINT TO FIRST INTERVAL TO DISPLAY.
         BZ    KSHOWTOP          IF ZERO THEN SHOW FROM THE TOP.
         USING DGRMFINT,R5
         CP    KLOCDATE,PL1ZERO  ANY DATE LOCATION REQUESTED?
         BE    KINTSCRL          NO, PERFORM ANY SCROLLING.
         MVC   WORK(4),KLOCDATE  COPY THE DATE TO LOCATE.
         ZAP   KLOCDATE,PL1ZERO  REMEMBER THAT THE DATE IS NOW LOCATED.
         L     R5,DGFSTINT       POINT TO THE FIRST RMF INTERVAL ENTRY.
         LA    R0,DGINTLEN
         BAS   R14,R5ACCESS
         CLC   DGINTDAT,WORK
         BNL   KSHOWTOP          REQUESTED DATE BEFORE FIRST INTERVAL.
         SLR   R1,R1             IGNORE SCROLLING.
         L     R5,KINTADDR       POINT TO THE TOP-OF-SCREEN ENTRY.
         LA    R0,DGINTLEN
         BAS   R14,R5ACCESS
         CLC   DGINTDAT,WORK
         BNL   KLOCNEXT          DATE BEFORE CURRENT TOP INTERVAL.
         L     R5,DGLSTINT       POINT TO THE LAST RMF INTERVAL ENTRY.
KLOCLOOP ST    R5,KINTADDR       THIS MAY BE THE NEW TOP OF SCREEN.
         LA    R0,DGINTLEN
         BAS   R14,R5ACCESS
         CLC   DGINTDAT,WORK
         BL    KINTAXOK          NOW AT CORRECT LOCATION.
KLOCNEXT ICM   R5,15,DGINTPRV    POINT TO THE PREVIOUS INTERVAL ENTRY.
         BNZ   KLOCLOOP          GO TEST ITS DATE.
         B     KSHOWTOP          BACKWARD CHAIN END SO SHOW FROM TOP.
KINTSCRL CLI   KSCRLAMT,X'7F'    BOTTOM RQUESTED?
         BE    KSHOWBTM          YES, DIRECTLY ACCESS THE BOTTOM.
         ICM   R1,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.
         BZ    KDGINTLP          ZERO SO START FORMATTING.
         BP    KFWDLOOP          POSITIVE SO SCROLL FORWARD.
         LPR   R1,R1             NEGATIVE SO GET COUNT TO SCROLL BACK.
KBWDLOOP LA    R0,DGINTLEN
         BAS   R14,R5ACCESS
         ICM   R5,15,DGINTPRV    POINT TO THE PREVIOUS INTERVAL ENTRY.
         BZ    KSHOWTOP          BACKWARD CHAIN END SO SHOW FROM TOP.
         BCT   R1,KBWDLOOP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KSHOTHIS          NOW AT THE CORRECT LOCATION.
KSHOWBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.
         L     R5,DGLSTINT       POINT TO THE LAST INTERVAL.
         L     R1,LINES          GET THE SCREEN LINE COUNT.
         AHI   R1,-6             GET THE SCROLL UP VALUE.
         B     KBWDLOOP          GO DO IT.
KFWDLOOP LA    R0,DGINTLEN
         BAS   R14,R5ACCESS
         ICM   R5,15,DGINTNXT    POINT TO THE NEXT INTERVAL ENTRY.
         BZ    KSHOWTOP          HANDLE END OF CHAIN IF ENCOUNTERED.
         BCT   R1,KFWDLOOP       CONTINUE SCROLLING TO CORRECT ENTRY.
KSHOTHIS ST    R1,KSCRLAMT       RESET THE AMOUNT TO BE SCROLLED.
         ST    R5,KINTADDR       THIS IS THE NEW TOP OF SCREEN.
         B     KDGINTLP          GET FORMATTING.
KSHOWTOP ST    R5,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?
         BE    KSHOWBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.
         L     R5,DGFSTINT       POINT TO THE FIRST RMF INTERVAL ENTRY.
         ST    R5,KINTADDR       THIS IS THE NEW TOP OF SCREEN.
         B     KDGINTLP          GET FORMATTING.
         SPACE
KSETITEM MVI   3(R7),0           FLAG NO ITEMS IN THIS CATEGORY.
         LTR   R0,R0             ANY DATA TO SHOW?
         BZR   R14               NO, RETURN WITH CATEGORY SUPPRESSED.
         MVI   3(R7),1           YES, ONE ITEM TO SHOW.
         BR    R14               RETURN.
         SPACE
         DROP  R10,R5            KNOWSYS, DGRMFINT.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - ITEM IDENTIFICATION'
         USING KNOWITEM,R3
KNOWITEM DS    0H                DETERMINE ITEM NUMBER AND IDENTIFIER.
         ST    R14,KSAVER14      SAVE RETURN ADDRESS.
         L     R15,0(,R1)        GET DISPLAY TYPE.
         SLL   R15,2             MUTLIPLY BY 4 FOR INDEX.
         B     KITEMTBL(R15)     BRANCH TO APPROPRIATE ROUTINE.
KITEMTBL B     KNULITEM          TYPE 00 - CPU UTILIZATION.
         B     KIORITEM          TYPE 01 - SYSTEM I/O RATE.
         B     KPGRITEM          TYPE 02 - SYSTEM PAGING RATE.
         B     KNULITEM          TYPE 03 - SYSTEM HIGH UIC.
         B     KNULITEM          TYPE 04 - CENTRAL STORAGE USAGE.
         B     KEIOITEM          TYPE 05 - EXPANDED STORAGE I/O RATE.
         B     KMIGITEM          TYPE 06 - EXPANDED STORAGE MIGR. AGE.
         B     KNULITEM          TYPE 07 - EXPANDED STORAGE USAGE.
         B     KNULITEM          TYPE 08 - COMMON SERVICE AREA USAGE.
         B     KNULITEM          TYPE 09 - EXTENDED CSA USAGE.
         B     KAS#ITEM          TYPE 10 - READY ASID COUNT.
         B     KAS#ITEM          TYPE 11 - IN ASID COUNT.
         B     KAS#ITEM          TYPE 12 - OUT ASID COUNT.
         B     KAS#ITEM          TYPE 13 - WAIT ASID COUNT.
         B     KAS#ITEM          TYPE 14 - BATCH JOB ASID COUNT.
         B     KAS#ITEM          TYPE 15 - STARTED TASK ASID COUNT.
         B     KAS#ITEM          TYPE 16 - TSO USER ASID COUNT.
         B     KAS#ITEM          TYPE 17 - LOGICAL READY ASID COUNT.
         B     KAS#ITEM          TYPE 18 - LOGICAL WAIT ASID COUNT.
         B     KAS#ITEM          TYPE 19 - ASCH ASID COUNT.
         B     KAS#ITEM          TYPE 20 - OPEN EDITION MVS ASID COUNT.
         B     KPRTITEM          TYPE 21 - PRINT OUTPUT VOLUMES.
         B     KPDNITEM          TYPE 22 - PAGE/SWAP DATA SET ACTIVITY.
         B     KPDNITEM          TYPE 23 - PAGE/SWAP DATA SET FULLNESS.
         B     KCHNITEM          TYPE 24 - CHANNEL PATH UTILIZATION.
         B     KDEVITEM          TYPE 25 - DEVICE UTILIZATION.
         B     KDEVITEM          TYPE 26 - DEVICE SERVICE TIME.
         B     KPGNITEM          TYPE 27 - TRANSACTION RESPONSE TIME.
         B     KPGNITEM          TYPE 28 - SERVICE UNIT ABSORPTION.
KIORITEM L     R6,DGMAXIOR       LOAD MAXIMUM I/O RATE FOR SYSTEM.
         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.
KPGRITEM L     R6,DGMAXPGR       LOAD MAXIMUM PAGING RATE FOR SYSTEM.
         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.
KEIOITEM L     R6,DGMAXEIO       LOAD MAXIMUM SYSTEM ESTG READ RATE.
         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.
KMIGITEM L     R6,DGMAXMIG       LOAD MAXIMUM MIGRATION AGE FOR SYSTEM.
         MH    R6,TEN+2          CONVERT TO HUNDREDTHS.
         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.
KAS#ITEM L     R15,0(,R1)        GET ITEM CATEGORY.
         S     R15,TEN           MAKE IT RELATIVE TO ASID DISPLAYS.
         SLL   R15,1             DOUBLE IT FOR INDEX.
         LA    R6,DGMAXRDY(R15)  POINT TO MAXIMUM COUNT ENCOUNTERED.
         SLR   R7,R7             CLEAR FOR INSERT.
         ICM   R7,3,0(R6)        GET THE HIGHEST VALUE FOUND.
         MH    R7,HUNDRED        CORRECT THE ORDER OF MAGNITUDE.
         LR    R6,R7             GET THE ANSWER.
         B     KITMSCAL          DETERMINE GRAPH SCALE TO BE USED.
KPRTITEM SLR   R6,R6             PREPARE FOR DIVIDE.
         L     R7,DGMAXPRT       LOAD MAXIMUM INTERVAL PRINT LINES.
         D     R6,TEN            CORRECT THE ORDER OF MAGNITUDE.
         LA    R6,1(,R7)         GET THE ANSWER AND ROUND UP.
KITMSCAL DS    0H                ONLY SCALE SINGLE ITEM CATEGORIES.
         L     R9,0(,R1)         GET DISPLAY TYPE CODE.
         SLL   R9,5              MULTIPLY BY 32 FOR INDEX.
         AL    R9,KGSBH2TB       POINT TO TYPE'S GRAPH SCALE AXIS.
         L     R7,KSCLTBAD       POINT TO FIRST SCALE TABLE ENTRY.
         LA    R0,KSCLTBNO       GET THE NUMBER OF SCALE TABLE ENTRIES.
KSCALELP CL    R6,0(,R7)         CORRECT SCALE?
         BH    KGOTSCAL          YES.
         LA    R7,KSCLTBSZ(,R7)  NO, POINT TO NEXT ENTRY.
         BCT   R0,KSCALELP
KGOTSCAL MVC   16(4,R1),4(R7)    LOAD SCALE FACTOR INTO DISPLAY VECTOR.
         MVC   0(24,R9),8(R7)    SUPPLY CORRECT GRAPH CALLIBRATION.
KNULITEM SLR   R15,R15
         ST    R15,4(,R1)
         MVI   7(R1),1           ONLY ONE ITEM SO ITEM NUMBER IS ONE.
         ST    R15,12(,R1)       ONLY ONE ITEM SO ZERO ITEM IDENTIFIER.
         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.
KPGNITEM LA    R6,DGFSTPG#       POINT TO PG NUMBER ENTRY ANCHORS.
         LA    R0,DGPG#LEN       GET LENGTH OF ENTRY TO FETCH.
         B     KITMSRCH          COMMENCE SEARCH FOR ITEM.
KCHNITEM LA    R6,DGFSTCH#       POINT TO CHP NUMBER ENTRY ANCHORS.
         LA    R0,DGCH#LEN       GET LENGTH OF ENTRY TO FETCH.
         B     KITMSRCH          COMMENCE SEARCH FOR ITEM.
KDEVITEM LA    R6,DGFSTDV#       POINT TO DEVICE NUMBER ENTRY ANCHORS.
         LA    R0,DGDV#LEN       GET LENGTH OF ENTRY TO FETCH.
KITMSRCH ICM   R15,B'1111',4(R1) GET ITEM NUMBER.
         BNP   KIIDSRCH          NOT POSITIVE SO SEARCH FOR IDENTIFIER.
         C     R15,8(,R6)        IS ITEM NUMBER HIGHER THAN MAXIMUM?
         BNH   KITMIDLP          NO, PROCEED.
         L     R15,8(,R6)        YES, REDUCE ITEM NUMBER TO MAXIMUM.
KNOITEMS ST    R15,4(,R1)        UPDATE THE DISPLAY VECTOR.
         LTR   R15,R15           ANY ITEMS OF THIS TYPE KNOWN?
         BNZ   KITMIDLP          YES, PROCEED.
         ST    R15,0(,R1)        NO, JUST SHOW CPU UTILIZATION.
         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.
         USING DGPG#ENT,R6 = DGCH#ENT = DGDV#ENT.
KITMIDLP L     R6,DGPG#NXT       CHAIN TO APPROPRIATE ENTRY.
         BAS   R14,R6ACCESS
         BCT   R15,KITMIDLP
         MVC   12(4,R1),DGPG#    COPY ITEM IDENTIFIER.
         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.
         DROP  R6                DGPG#ENT = DGCH#ENT = DGDV#ENT.
KIIDSRCH ICM   R15,15,8(R6)      ANY ITEMS OF THIS TYPE KNOWN?
         BZ    KNOITEMS          NO, JUST SHOW CPU UTILIZATION.
         L     R7,12(,R1)        YES, GET THE DESIRED ITEM IDENTIFIER.
         SLR   R15,R15           CLEAR ITEM NUMBER COUNTER.
KIIDLOOP LR    R5,R6             REMEMBER PREVIOUS ENTRY ADDRESS.
         ICM   R6,15,0(R6)       POINT TO NEXT ENTRY ON CHAIN.
         BZ    KIIDLAST          END OF CHAIN SO SHOW LAST ONE.
         USING DGPG#ENT,R6 = DGCH#ENT = DGDV#ENT.
         BAS   R14,R6ACCESS
         LA    R15,1(,R15)       INCREMENT ITEM NUMBER COUNTER.
         C     R7,DGPG#          FOUND THE CORRECT ITEM?
         BH    KIIDLOOP          NO, CONTINUE FOLLOWING CHAIN.
KIDFOUND ST    R15,4(,R1)        YES, SAVE IT.
         MVC   12(4,R1),DGPG#    COPY ITEM IDENTIFIER IN CASE NOT SAME.
         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.
         DROP  R6                DGPG#ENT = DGCH#ENT = DGDV#ENT.
KIIDLAST LR    R6,R5             POINT TO LAST ENTRY.
         B     KIDFOUND          PRETEND IT WAS FOUND.
KPDNITEM LA    R6,DGFSTPDN       POINT TO PAGE DSNAME ENTRY ANCHORS.
         L     R15,4(,R1)        GET ITEM NUMBER.
         C     R15,8(,R6)        IS ITEM NUMBER HIGHER THAN MAXIMUM?
         BNH   KPDSNMLP          NO, PROCEED.
         L     R15,8(,R6)        YES, REDUCE ITEM NUMBER TO MAXIMUM.
         ST    R15,4(,R1)        UPDATE THE DISPLAY VECTOR.
         LTR   R15,R15           ANY ITEMS OF THIS TYPE KNOWN?
         BNZ   KPDSNMLP          YES, PROCEED.
         ST    R15,0(,R1)        NO, JUST SHOW CPU UTILIZATION.
         B     KFMTITEM          GO DISPLAY ACTUAL ITEM NAME.
         USING DGPDNENT,R6
KPDSNMLP L     R6,DGPDNNXT       CHAIN TO APPROPRIATE ENTRY.
         LA    R0,DGPDNLEN
         BAS   R14,R6ACCESS
         BCT   R15,KPDSNMLP
         MVC   12(44,R1),DGPDNAME COPY PAGE/SWAP DATA SET NAME.
         DROP  R6                DGPDNENT.
         SPACE
KFMTITEM DS    0H                SHOW THE ITEM DISPLAY NAME.
         L     R7,0(,R1)         GET THE DISPLAY TYPE CODE.
         SLL   R7,2              MULTIPLY BY FOUR FOR INDEX.
         LR    R9,R7             COPY IT.
         AL    R7,KNAMTBAD       POINT TO DISPLAY TYPE NAME.
         L     R8,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R8,R2             POINT TO DISPLAY LINE OFFSET.
         MVC   2(3,R8),0(R7)     SHOW DISPLAY TYPE NAME.
         MVC   25(8,R8),=CL8'GRAF: N '
         TM    8(R1),X'80'       IS THIS DISPLAY IN TABULAR MODE?
         BO    KIIGRFOK          YES.
         MVI   31(R8),C'Y'       NO, IT IS IN GRAPHIC MODE.
KIIGRFOK CLI   3(R1),KVARI       VARIABLE MAXIMUM DISPLAY TYPE?
         BL    KIRETURN          NO, SO JUST RETURN.
         L     R15,KMAXITEM(R9)  YES, GET ITS MAXIMUM.
         CVD   R15,WORK          SHOW IT.
         MVC   17(6,R8),ED5
         ED    17(6,R8),WORK+5
         MVI   23(R8),C')'
KIIMXCHK CLI   19(R8),C' '       LEADING BLANK?
         BNE   KIIMAXOK          NO.
         MVC   19(5,R8),20(R8)   YES, SUPPRESS IT.
         B     KIIMXCHK          CHECK IF LAST LEADING BLANK.
KIIMAXOK MVC   16(2,R8),=C'OF'
         LR    R9,R1             REMEMBER DISPLAY VECTOR ADDRESS.
         L     R15,4(,R1)        GET THE ITEM NUMBER.
         CVD   R15,WORK
         LA    R1,14(,R8)        ITEM NUMBER CAN'T BE ZERO, BUT....
         MVC   9(6,R8),ED5Z
         EDMK  9(6,R8),WORK+5
         BCTR  R1,0
         MVI   0(R1),C'('
         LR    R1,R9             RESTORE DISPLAY VECTOR ADDRESS.
         CLI   3(R1),KCHAN       ITEM NAME TO BE SHOWN HERE?
         BL    KIRETURN          NO, SO JUST RETURN.
         BE    KIICHPID          YES, SHOW CHANNEL PATH IDENTIFIER.
         CLI   3(R1),KPERF       YES, BUT IS IT A DEVICE NUMBER?
         BL    KIIDEVID          YES, SHOW IT.
         L     R7,12(,R1)        GET THE PERFORMANCE GROUP NUMBER.
         CVD   R7,WORK           SHOW IT.
         MVC   WORK2(6),=X'402120202020'
         ED    WORK2(6),WORK+5
         MVC   5(3,R8),WORK2+3
         B     KIRETURN          RETURN.
KIIDEVID UNPK  5(5,R8),14(3,R1)  SHOW DEVICE NUMBER.
         TR    5(4,R8),HEX-C'0'
         MVI   9(R8),C' '
         B     KIRETURN          RETURN.
KIICHPID UNPK  5(3,R8),15(2,R1)  SHOW CHANNEL PATH NUMBER.
         TR    5(2,R8),HEX-C'0'
         MVI   7(R8),C' '
KIRETURN L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         BR    R14               RETURN.
         SPACE
         DROP  R3,R4             KNOWITEM, DGSYSTEM.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE - ESTABLISH CROSS-MEMORY ACCESS'
         USING KGQSCAN,R10
KGQSCAN  DS    0H
         OI    KFLAGS,KXM        FLAG USING CROSS-MEMORY METHOD.
         SLR   R0,R0
         ST    R0,GQKTOKEN       ZERO THE GQSCAN TOKEN.
         SLR   R3,R3             PREPARE FOR MESSAGE 0.
         LA    R5,SECWORKA       GET A GQSCAN WORK AREA.
         GQSCAN AREA=((5),512),SCOPE=SYSTEM,                           +
               RESNAME=(IMPMAJOR,IMPMINOR,IMINRLEN,SPECIFIC,8),        +
               TOKEN=GQKTOKEN
         LTR   R15,R15           FOUND AN ENQUEUE?
         BZ    KFINDGAT          YES, GO LOOK AT IT.
         CHI   R15,8             WAS AREA FILLED WITH TOO MUCH DATA?
         BNE   KGATDOWN          NO, THE DATA GATHERER IS DOWN.
         GQSCAN QUIT=YES,TOKEN=GQKTOKEN YES, SO QUIT THE GQSCAN FIRST.
         SPACE
KFINDGAT DS    0H                GO FIND THE DATA GATHERER ASID.
         LA    R1,SECWORKA       POINT TO RIB.
         USING RIB,R1
         SLR   R4,R4
         ICM   R4,3,RIBVLEN      GET LENGTH OF RIBVAR.
         SRL   R0,16             GET LENGTH OF FIXED RIB PORTION.
         ALR   R4,R0             GET OFFSET TO FIRST RIBE.
         ALR   R4,R1             POINT TO FIRST RIBE.
         DROP  R1                RIB.
         USING RIBE,R4
         SLR   R1,R1
         ICM   R1,3,RIBEASID     LOAD THE DATA GATHERER ASID.
         C     R1,KGATASID       IS IT STILL THE SAME ADDRESS SPACE?
         BE    KGATASOK          YES, PROCEED.
         XC    KTOPADRS(KTOPADLN),KTOPADRS     RESET TOP ADDRESS.
         ST    R1,KGATASID       SAVE THE ASID FOR LATER.
KGATASOK SLL   R1,2              MULTIPLY ASID BY FOUR FOR INDEX.
         A     R1,ASVTADDR
         AIF   (&MVSMON).KOSASID
         AIF   (&XATEST).KOSASID
         ICM   R1,B'1111',0(R1)  LOAD DATA GATHERER ASCB POINTER.
         BNM   KGATDOWN          THE ADDRESS SPACE IS NOT ASSIGNED.
         AGO   .KF4ASID
.KOSASID ANOP
         ICM   R1,15,524(R1)     LOAD DATA GATHERER ASCB POINTER.
         BM    KGATDOWN          THE ADDRESS SPACE IS NOT ASSIGNED.
.KF4ASID ANOP
         MVC   DGTCBADR,RIBETCB  SAVE THE DATA GATHERER TCB ADDRESS.
         DROP  R4                RIBE.
         AIF   (&MSPMON).KXASTUF
         TM    OSBITS,X'9B'      MVS/ESA?
         BNO   KAXSTUFF          NO, CAN'T USE ACCESS REGISTERS.
         L     R5,KGATALET       YES, LOAD THE PREVIOUS ALET VALUE.
         L     R1,336(,R1)       POINT TO THE DATA GATHERER ASSB.
         CLC   DGSTOKEN,48(R1)   SAME SPACE TOKEN AS BEFORE?
         BNE   KGETSTKN          NO, GO GET THE NEW ONE.
         LTR   R5,R5             YES, STILL HAVE THE CURRENT ALET?
         BNZ   KGOTALET          YES, PROCEED.
KGETSTKN MVC   DGSTOKEN,48(R1)   NO, COPY DATA GATHERER SPACE TOKEN.
         MODESET MF=(E,MDSTSUP0)
         LTR   R5,R5             OUT-OF-DATE ALET STILL IN DU-AL?
         BZ    KDGDELOK          NO, VALID ALET CANNOT BE ZERO.
         ALESERV DELETE,ALET=(5),CHKEAX=NO,MF=(E,ALESERVL)
         SLR   R5,R5             ALET NOW DELETED.
         ST    R5,KGATALET       ZERO THE REMEMBERED ALET VALUE.
         XC    KTOPADRS(KTOPADLN),KTOPADRS     RESET TOP ADDRESS.
KDGDELOK DS    0H
         ALESERV ADD,STOKEN=DGSTOKEN,ALET=(5),CHKEAX=NO,               +
               MF=(E,ALESERVL)   ADD ALET TO DU-AL.
         LR    R3,R15            SAVE THE RETURN CODE.
         MODESET MF=(E,MDSTPROB)
         LTR   R3,R3             WAS THE ADD SUCCESSFUL?
         BZ    KDGADDOK          YES, PROCEED.
         XC    DGSTOKEN,DGSTOKEN  NO, ERASE REMEMBERED STOKEN VALUE.
         NI    MODESW2,255-CLNF  CLEAN-UP NOT REQUIRED IF EXIT HERE.
         ST    R3,WORK
         UNPK  KBADMSG2+27(3),WORK+3(2)
         TR    KBADMSG2+27(2),HEX-C'0'
         MVI   KBADMSG2+29,C' '  DISPLAY THE RETURN CODE.
         LA    R3,2              PREPARE FOR MESSAGE 2.
         B     KGATDOWN
KDGADDOK ST    R5,KGATALET       SAVE THE ALET.
         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.
KGOTALET DS    0H                CROSS-MEMORY ACCESS NOW ESTABLISHED.
         SAR   A4,R5             ACCESS REGISTER 4 TO ACCESS IMDATGAT.
         SAR   A5,R5             ACCESS REGISTER 5 TO ACCESS IMDATGAT.
         SAR   A6,R5             ACCESS REGISTER 6 TO ACCESS IMDATGAT.
         SAC   X'200'            GET INTO ACCESS REGISTER MODE.
         B     KBASESPN          CROSS-MEMORY ACCESS NOW ESTABLISHED.
         SPACE
KAXSTUFF DS    0H                ESTABLISH XA CROSS-MEMORY ACCESS.
.KXASTUF ANOP
         MODESET MF=(E,MDSTSUP0)
         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.
         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.
         LA    R1,1              ADDRESS ALL AX NUMBER.
         AXSET AX=(1)            SET AX = 1.
         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.
         L     R4,KGATASID       GET TARGET ASID.
         SSAR  R4                MAKE TARGET JOB THE SECONDARY ASID.
         B     KBASESPN          XA CROSS-MEMORY NOW ACCESSABLE.
         DROP  R10               KGQSCAN.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE - REMOVE CROSS-MEMORY ACCESS'
         USING KXMUNDO,R10
KXMUNDO  DS    0H
         AIF   (&MSPMON).KXAUNDO
         TM    OSBITS,X'9B'      MVS/ESA?
         BNO   KXAUNDO           NO, CAN'T USE ACCESS REGISTERS.
         SAC   X'000'            REVERT TO PRIMARY SPACE MODE.
         XC    WORK(16),WORK     GET SOME NULLS.
         LAM   A4,A6,WORK        ZERO ACCESS REGISTERS.
         B     KXMUNDUN          ESA CROSS-MEMORY ACCESS NOW REMOVED.
         SPACE
KXAUNDO  DS    0H                REMOVE XA CROSS-MEMORY ACCESS.
.KXAUNDO ANOP
         L     R8,PSAAOLD        GET CURRENT ASCB.
         LH    R8,ASID(,R8)      GET CURRENT ASID.
         SSAR  R8                GET OUT OF CROSS-MEMORY MODE.
         L     R1,AXVALUE        GET SAVED AX NUMBER.
         AXSET AX=(1)            SET AX = 0.
         STATUS RESET,MC,STEP    START ALL OTHER TASKS.
         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.
         MODESET MF=(E,MDSTPROB)
         B     KXMUNDUN          XA CROSS-MEMORY ACCESS NOW REMOVED.
         SPACE
         DROP  R10               KXMUNDO.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE - DISPLAY SYSTEM SELECTION LIST'
         USING KDISPSYS,R10
KDISPSYS DS    0H                DISPLAY THE "SYSTEM" SELECTION LIST.
         CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?
         BE    KNOSYSEL          YES, DO NOT PERFORM SELECTION.
         SLR   R1,R1             CLEAR FOR INSERT.
         ICM   R1,1,INBUFF+1     CURSOR ON HEADING LINE?
         BZ    KNOSYSEL          YES, SO NO SELECTION HAS BEEN MADE.
         LA    R2,BUFFER-LL      NO, POINT TO BEFORE DETAIL BUFFER.
KSZOOMLP LA    R2,LL(,R2)        POINT TO NEXT DETAIL LINE.
         CLI   LL-80(R2),X'F5'   VALID LIST ITEM LINE?
         BNE   KNOSYSEL          NO, CHECK IF SYSTEM SELECTION NEEDED.
         BCT   R1,KSZOOMLP       YES, DECREMENT LINE COUNTER.
         MVC   KSHOWSYS,LL-70(R2)     LOAD SELECTED SYSTEM ID.
         B     KTESTSYS          GO DISPLAY DATA FOR THIS SYSTEM.
         SPACE
KNOSYSEL DS    0H                DISPLAY "SYSTEM" SELECTION LIST.
         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.
*        L     R4,KBASEADR       LOAD ADDRESS OF BASE ENTRY.
         USING DGBASE,R4
         MVC   HEADING,HEADNGK1  LOAD SYSTEM SELECTION LIST HEADING.
         MVC   KSHOWSYS,BLANKS   ERASE ANY SELECTED SYSTEM IDENTIFIER.
         ICM   R0,15,DGSMFCNT    GET ONLINE SMF EVENT TRIPLET COUNT.
         BZ    KSELDSYS          NONE, SO SHOW PERFORMANCE SYSID LIST.
         LA    R15,KETYPMAX      GET MAXIMUM SUPPORTED HERE.
         CR    R15,R0            MORE AVAILABLE THAN SUPPORTED?
         BL    KTYPCTOK          YES, USE THE "SUPPORTED HERE" COUNT.
         LR    R15,R0            NO, USE THE ACTUAL TRIPLET COUNT.
KTYPCTOK SLR   R0,R0             RESET ZOOMABLE LINE COUNT.
         LA    R1,KETYPTBL       POINT TO EVENT TYPE LABEL TABLE.
         LA    R2,BUFFER         POINT TO FIRST DETAIL LINE.
         LA    R5,DGFSTDSN       POINT TO FIRST EVENT TRIPLET.
KEVENTLP ICM   R14,15,8(R5)      GET THE NUMBER OF ITEMS CAPTURED.
         BZ    KNXTEVNT          IF ZERO THEN DO NOT LIST THEM.
         AHI   R0,1              COUNT THE DATA SETS AS ONE LIST ITEM.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-70(20,R2),0(R1) SHOW THE NAME OF THE EVENT TYPE.
         CVD   R14,WORK
         MVC   LL-50(12,R2),ED11
         ED    LL-50(12,R2),WORK+2
         MVC   LL-37(12,R2),20(R1) SHOW THE NATURE OF THE ITEM LIST.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
KNXTEVNT LA    R1,32(,R1)        POINT TO THE NEXT EVENT TYPE LABEL.
         LA    R5,12(,R5)        POINT TO THE NEXT EVENT TRIPLET.
         BCT   R15,KEVENTLP      PROCESS THE NEXT EVENT TYPE.
KSELDSYS A     R0,DGNUMSYS       ADD THE NUMBER OF REGISTERED SYSTEMS.
         CVD   R0,WORK           DISPLAY IT IN THE HEADING.
         MVC   HEADING+51(4),ED3
         ED    HEADING+51(4),WORK+6
         LA    R4,DGFSTSYS       POINT TO FIRST SYSTEM ENTRY ADDRESS.
         B     KSYSNEXT
         DROP  R4                DGBASE.
         USING DGSYSTEM,4
KSYSSELP LA    R0,DGSYSLEN
         BAS   R14,R4ACCESS
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-70(4,R2),DGSYSID LOAD SYSTEM IDENTIFIER.
         L     R0,DGNUMINT       GET INTERVAL COUNT FOR THIS SYSTEM.
         CVD   R0,WORK
         MVC   LL-50(12,2),ED11
         ED    LL-50(12,2),WORK+2
         MVC   LL-37(22,2),KINTEVNT
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         C     R2,PAGEND         IS THE SCREEN NOW FILLED?
         BNL   KEODGDAT          YES, SO SHOW IT.
KSYSNEXT ICM   R4,15,DGSYSNXT    POINT TO THE NEXT SYSTEM ENTRY.
         BNZ   KSYSSELP          PROCESS IT.
         B     KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.
         DROP  R10               KDISPSYS.
         SPACE
KINTEVNT DC    CL22'RMF INTERVALS CAPTURED'
KETYPTBL DS    0H                LABEL TABLE FOR SMF EVENT TYPES.
         DC    CL20'* DATA SET EVENTS   ',CL12'DATA SETS   '
         DC    CL20'* STEP END EVENTS   ',CL12'PROGRAMS    '
         DC    CL20'* JOB STEP EVENTS   ',CL12'JOB NAMES   '
KETYPMAX EQU   3                 NUMBER OF DIFFERENT TYPES SUPPORTED.
         SPACE
         LTORG
         SPACE 2
         USING DGRMFINT,R5
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CPU UTLIZATION'
         USING KDISPCPU,R10
KDISPCPU DS    0H                DISPLAY THE CPU UTILIZATION.
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KCPULPAR          YES, JUST SHOW LOGICAL FIGURES.
         ICM   R0,15,DGCPBUSY    LOAD THE PHYSICAL CPU UTILIZATION.
         BNP   KCPULPAR          NO DATA HERE TO SHOW.
         CVD   R0,WORK
         MVC   24(8,R1),EDK4PNT1
         ED    24(7,R1),WORK+5
         CL    R0,DGCPUTIL       PHYSICAL BUSY GREATER THAN LOGICAL?
         BNH   KCPULPAR          NO, LEAVE DEFAULT FIRST SUBHEADING.
         L     R8,8(,R7)         YES, GET THE DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL(R8)  POINT TO THE FIRST SUBHEADING.
         L     R9,KGSBH1TB       POINT TO STANDARD SUBHEADING TABLE.
         CLC   1(32,R8),0(R9)    STANDARD HEADING IN PLACE?
         BNE   KCPUHDOK          NO, DO NOT OVERLAY WITH LPAR VERSION.
         MVC   1(32,R8),KLPCPUHD YES, SHOW LEGEND FOR LPAR COMPONENTS.
KCPUHDOK SLR   R8,R8
         LR    R9,R0             COPY PHYSICAL CPU UTILIZATION.
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'07'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
KCPULPAR ICM   R9,15,DGCPUTIL    LOAD THE CPU UTILIZATION.
         BM    KCPUNULL          NO RMF TYPE 70 DATA SO SHOW NULL LINE.
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLCPU          YES.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH.
KCPUNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    8(R7),X'80'       IN GRAPHIC MODE?
         BZ    KNULPLOT          YES, JUST SO "GRAPH PAPER" PERHAPS.
         BR    R14               NO, LEAVE TABULAR LINE BLANK.
         SPACE
KTABLCPU DS    0H
         CVD   R9,WORK
         MVC   24(8,R1),EDK4PNT1
         ED    24(7,R1),WORK+5
         CLI   KRIGHT+3,KPERF    PERFORMANCE GROUP IN RIGHT DISPLAY?
         BNLR  R14               YES, LEAVE CAPTURE COLUMNS BLANK.
         ICM   R6,15,DGFSTPGN    ANY PERFORMANCE GROUP ENTRIES?
         BZR   R14               NO, SUPPRESS 0.0%.
         CLC   DGCPBUSY,DGCPUTIL IS THIS MVS THE ONLY CPU LOAD?
         BNH   KCPTBHDN          YES, CPU TABULAR HEADING ALL DONE.
         L     R8,8(,R7)         NO, GET THE DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL+LL(R8)   POINT TO THE SECOND SUBHEADING.
         MVI   27(8),C' '        OVERLAY 'TOTAL'.
         MVC   28(4,R8),KSHOWSYS INDICATE LPAR TOTAL WITH SYSTEM-ID.
KCPTBHDN SLR   R7,R7             ZERO CPU ACCUMULATOR.
         ST    R7,WORK2          CLEAR A HOLDING AREA.
         LA    R15,DGFSTPGN      POINT TO FIRST PERF. ENTRY ADDRESS.
         USING DGPRFGRP,R6
KCPUPGLP LR    R6,R15            POINT TO THIS PERFORMANCE GROUP ENTRY.
         ICM   R6,15,DGPRFNXT    POINT TO NEXT PERFORMANCE GROUP ENTRY.
         BZ    KCPDONPG          THERE IS NONE.
         LR    R15,R6            COPY BASE SECTION ADDRESS.
         LA    R0,DGPRFLEN+DGPERLEN
         BAS   R14,R6ACCESS
         CLI   DGPRFPER+3,1      MORE THAN ONE PERIOD IN GROUP?
         BNH   KPPOKAY1          NO, HAVE RETRIEVED WHOLE GROUP'S DATA.
         LA    R14,DGPERLEN      YES, GET A PERIOD ENTRY LENGTH.
         MH    R14,DGPRFPER+2    MULTIPLY BY THE PERIOD COUNT.
         LR    R6,R15            RESTORE BASE SECTION ADDRESS.
         LA    R0,DGPRFLEN(,R14) GET TOTAL GROUP DATA LENGTH.
         BAS   R14,R6ACCESS
KPPOKAY1 ICM   R15,15,DGPRFNUM   IS THIS PERFORMANCE GROUP ZERO?
         BNZ   KCPUPGOK          NO.
         MVC   WORK2(4),DGPERCPU YES, SAVE P. G. 0 CPU UTILIZATION.
KCPUPGOK LR    R15,R6            SAVE BASE SECTION ADDRESS FOR LATER.
         TM    DGPRFFLG,X'02'    IS THIS A REPORT PERFORMANCE GROUP?
         BO    KCPUPGLP          YES, DO NOT COUNT IT.
         L     R3,DGPRFPER       GET NUMBER OF PERFORMANCE PERIODS.
         LA    R6,DGPERIOD       POINT TO THE FIRST PERIOD SECTION.
         DROP  R6                DGPRFGRP.
         USING DGPERIOD,R6
KCPUPPLP A     R7,DGPERCPU       ACCUMULATE CPU PERMILLAGE.
         LA    R6,DGPERLEN(,R6)  POINT TO NEXT PERF. PERIOD SECTION.
         BCT   R3,KCPUPPLP       PROCESS NEXT PERFORMANCE PERIOD.
         B     KCPUPGLP          PROCESS NEXT PERFORMANCE GROUP.
         DROP  R6                DGPRFGRP.
KCPDONPG D     R6,DGCPUCNT       AVERAGE SERVICE ACROSS ALL CPUS.
         ST    R7,WORK2+4        SAVE CAPTURED CPU UTILIZATION.
         CVD   R7,WORK           SHOW CAPTURED CPU UTILIZATION.
         MVC   1(8,R1),EDK4PNT1
         ED    1(7,R1),WORK+5
         CR    R7,R9             CAPTURED LESS THAN TOTAL?
         BNL   KCRETURN          NO, DO NOT SHOW CAPTURE RATIO.
         M     R6,ONEGRAND       MULTIPLY BY 1000 FOR PERMILLAGE.
         DR    R6,R9             GET CAPTURE RATIO.
         CVD   R7,WORK           SHOW CPU UTILIZATION CAPTURE RATIO.
         MVC   10(5,R1),EDK2PNT3
         ED    10(5,R1),WORK+6
         MVI   15(R1),C'%'       INDICATE PERCENTAGE.
         L     R7,WORK2+4        LOAD CAPTURED CPU UTILIZATION.
         S     R7,WORK2          SUBTRACT CAPTURED PG ZERO CPU.
         M     R6,ONEGRAND       MULTIPLY BY 1000 FOR PERMILLAGE.
         DR    R6,R9             GET CAPTURE RATIO.
         CVD   R7,WORK           SHOW CPU UTILIZATION CAPTURE RATIO.
         MVC   17(5,R1),EDK2PNT3
         ED    17(5,R1),WORK+6
         MVI   22(R1),C'%'       INDICATE PERCENTAGE.
KCRETURN L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPCPU.
         SPACE
KLPCPUHD DS    0CL32
         DC    C' CPU-%: ',X'05',C'=THIS-LPAR  ',X'07',C'=OTHER(S) '
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SYSTEM I/O RATE'
         USING KDISPIOR,R10
KDISPIOR DS    0H                DISPLAY THE SYSTEM I/O RATE.
         TM    DGCPUTIL,X'80'    ANY RMF TYPE 70 DATA FOR INTERVAL?
         BO    KNULDATA          NO, SO LEAVE BLANK.
         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.
         L     R9,DGIORATE       LOAD THE SYSTEM I/O RATE.
         CVD   R9,WORK
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         MVC   24(9,R1),EDK5PNT2
         ED    24(9,R1),WORK+4   DISPLAY THE TOTAL I/O RATE.
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLIOR          YES.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,TENGRAND
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         L     R9,DGIOTPI1       DISPLAY THE TPI CC=1 RATE.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,TENGRAND
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH.
         SPACE
KTABLIOR DS    0H
         LR    R7,R9             COPY THE TOTAL I/O RATE.
         L     R8,DGIOTPI1       GET THE TPI CC=1 RATE.
         SR    R9,R8             GET THE I/O SLIH ENTRY RATE.
         CVD   R9,WORK
         MVC   15(9,R1),EDK5PNT2
         ED    15(9,R1),WORK+4   DISPLAY THE SLIH I/O RATE.
         CVD   R8,WORK
         MVC   6(9,R1),EDK5PNT2
         ED    6(9,R1),WORK+4    DISPLAY THE TPI I/O RATE.
         LTR   R7,R7             ANY I/O?
         BZR   R14               NO, RETURN.
         LR    R9,R8             COPY THE TPI I/O RATE.
         M     R8,TENGRAND       SCALE FOR HUNDREDTHS OF PERCENT.
         DR    R8,R7             GET TPI PERCENTAGE OF TOTAL.
         CVD   R9,WORK
         SRP   WORK,64-1,5       ROUND TO PERMILLAGE.
         MVC   0(7,R1),EDK4PNT1
         ED    0(7,R1),WORK+5    DISPLAY THE PERCENTAGE OF TPI CC=1.
         MVI   7(R1),C'%'        INDICATE PERCENTAGE.
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPIOR.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SYSTEM PAGING RATE'
         USING KDISPPGR,R10
KDISPPGR DS    0H                DISPLAY THE SYSTEM TOTAL PAGING RATE.
         TM    DGPAGEIN,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?
         BO    KNULDATA          NO, SO LEAVE BLANK.
         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.
         L     R9,DGPAGEIN
         A     R9,DGPAGOUT
         A     R9,DGSWPGIN
         A     R9,DGSWPGOT
         A     R9,DGVIOIN
         A     R9,DGVIOOUT
         CVD   R9,WORK
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         MVC   24(9,R1),EDK5PNT2
         ED    24(9,R1),WORK+4
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLPGR          YES.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,TENGRAND
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         L     R9,DGPAGEIN       DISPLAY SYSTEM NON-VIO PAGING RATE.
         A     R9,DGPAGOUT
         A     R9,DGSWPGIN
         A     R9,DGSWPGOT
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,TENGRAND
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         L     R9,DGPAGEIN       DISPLAY THE SYSTEM DEMAND PAGING RATE.
         A     R9,DGPAGOUT
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,TENGRAND
         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH.
         SPACE
KTABLPGR DS    0H
         L     R9,DGVIOIN        DISPLAY THE SYSTEM VIO PAGING RATE.
         A     R9,DGVIOOUT
         CVD   R9,WORK
         MVC   16(9,R1),EDK5PNT2
         ED    16(9,R1),WORK+4
         L     R9,DGSWPGIN       DISPLAY THE SYSTEM SWAP PAGING RATE.
         A     R9,DGSWPGOT
         CVD   R9,WORK
         MVC   8(9,R1),EDK5PNT2
         ED    8(9,R1),WORK+4
         L     R9,DGPAGEIN       DISPLAY THE SYSTEM DEMAND PAGING RATE.
         A     R9,DGPAGOUT
         CVD   R9,WORK
         MVC   0(9,R1),EDK5PNT2
         ED    0(9,R1),WORK+4
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPPGR.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SYSTEM HIGH UIC'
         USING KDISPUIC,R10
KDISPUIC DS    0H                DISPLAY UNREFERENCED INTERVAL COUNT.
         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?
         BO    KNULDATA          NO, SO LEAVE BLANK.
         TM    8(R1),X'80'       IN TABULAR MODE?
         BO    KTABLUIC          YES.
         L     R9,DGUICAVG       LOAD AVERAGE SYSTEM-HIGH-UIC BY TEN.
         CVD   R9,WORK
         SLR   R8,R8
         SLDL  R8,2              MULTIPLY BY FOUR.
         D     R8,AHUNDRED       DIVIDE BY 100.
         STH   R9,WORK+2         SAVE AVERAGE SYSTEM-HIGH-UIC/2.5.
         L     R9,DGUICLOW       LOAD MINIMUM SYSTEM-HIGH-UIC.
         SLR   R8,R8
         SLDL  R8,2              MULTIPLY BY FOUR.
         D     R8,TEN            DIVIDE BY 10.
         STH   R9,WORK           SAVE MINIMUM SYSTEM-HIGH-UIC/2.5.
         L     R9,DGUICHIG       LOAD MAXIMUM SYSTEM-HIGH-UIC.
         SLR   R8,R8
         SLDL  R8,2              MULTIPLY BY FOUR.
         D     R8,TEN            DIVIDE BY 10.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         MVC   25(7,R1),EDK4PNT1
         ED    25(7,R1),WORK+5
         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT MAXIMUM SYSTEM-HIGH-UIC.
         LH    R9,WORK+2         LOAD AVERAGE SYSTEM-HIGH-UIC/2.5.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT AVERAGE SYSTEM-HIGH-UIC.
         LH    R9,WORK           LOAD MINIMUM SYSTEM-HIGH-UIC/2.5.
         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT MINIMUM SYSTEM-HIGH-UIC.
         DROP  R10               KDISPUIC.
         SPACE
KTABLUIC DS    0H
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         L     R9,DGUICLOW       SHOW MINIMUM SYSTEM-HIGH-UIC.
         CVD   R9,WORK
         MVC   2(8,R1),ED7
         ED    2(8,R1),WORK+4
         L     R9,DGUICAVG       LOAD AVERAGE SYSTEM-HIGH-UIC BY TEN.
         CVD   R9,WORK
         MVC   12(9,R1),EDK6PNT1
         ED    12(9,R1),WORK+4
         L     R9,DGUICHIG       LOAD MAXIMUM SYSTEM-HIGH-UIC.
         CVD   R9,WORK
         MVC   23(8,R1),ED7
         ED    23(8,R1),WORK+4
         BR    R14               PROCESSING NOW COMPLETE.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CENTRAL STORAGE USAGE'
         USING KDISPCNT,R10
KDISPCNT DS    0H                DISPLAY CENTRAL STORAGE USAGE.
         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?
         BO    KNULDATA          NO, SO LEAVE BLANK.
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         L     R8,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.
         A     R8,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.
         A     R8,DGRGNPCT       ADD PERCENTAGE USER REGION FRAMES.
         A     R8,DGLSQPCT       ADD PERCENTAGE LSQA FRAMES.
         A     R8,DGLPAPCT       ADD PERCENTAGE LPA FRAMES.
         A     R8,DGCSAPCT       ADD PERCENTAGE CSA FRAMES.
         L     R9,AHUNDRED
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KGRAFOK           YES.
         LA    R15,X'0C'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT AVAILABLE FRAMES TO 100%.
         L     R9,AHUNDRED
KGRAFOK  SR    R9,R8             GET AVAILABLE FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   27(4,R1),ED3
         ED    27(4,R1),WORK+6
         MVI   31(R1),C'%'       INDICATE PERCENTAGE.
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLCNT          YES.
         LR    R9,R8
         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT CSA FRAMES.
         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.
         A     R9,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.
         A     R9,DGRGNPCT       ADD PERCENTAGE USER REGION FRAMES.
         A     R9,DGLSQPCT       ADD PERCENTAGE LSQA FRAMES.
         A     R9,DGLPAPCT       ADD PERCENTAGE LPA FRAMES.
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT LPA FRAMES.
         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.
         A     R9,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.
         A     R9,DGRGNPCT       ADD PERCENTAGE USER REGION FRAMES.
         A     R9,DGLSQPCT       ADD PERCENTAGE LSQA FRAMES.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT LSQA FRAMES.
         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.
         A     R9,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.
         A     R9,DGRGNPCT       ADD PERCENTAGE USER REGION FRAMES.
         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT USER REGION FRAMES.
         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.
         A     R9,DGSQAPCT       ADD PERCENTAGE SQA FRAMES.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT SQA FRAMES.
         L     R9,DGNUCPCT       GET PERCENTAGE NUCLEUS FRAMES.
         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT NUCLEUS FRAMES.
         SPACE
KTABLCNT DS    0H
         L     R9,DGCSAPCT       SHOW CSA FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   22(4,R1),ED3
         ED    22(4,R1),WORK+6
         MVI   26(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGLPAPCT       SHOW LPA FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   18(4,R1),ED3
         ED    18(4,R1),WORK+6
         MVI   22(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGLSQPCT       SHOW LSQA FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   14(4,R1),ED3
         ED    14(4,R1),WORK+6
         MVI   18(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGRGNPCT       SHOW USER REGION FRAME % AVERAGE.
         CVD   R9,WORK
         MVC   9(4,R1),ED3
         ED    9(4,R1),WORK+6
         MVI   13(R1),C'%'       INDICATE PERCENTAGE.
         L     R4,DGSQAPCT       SHOW SQA FRAME PERCENT AVERAGE.
         CVD   R4,WORK
         MVC   4(4,R1),ED3
         ED    4(4,R1),WORK+6
         MVI   8(R1),C'%'        INDICATE PERCENTAGE.
         L     R4,DGNUCPCT       SHOW NUCLEUS FRAME PERCENT AVERAGE.
         CVD   R4,WORK
         MVC   0(4,R1),ED3
         ED    0(4,R1),WORK+6
         MVI   4(R1),C'%'        INDICATE PERCENTAGE.
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPCNT.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - E-STORAGE I/O RATE'
         USING KDISPEIO,R10
KDISPEIO DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.
         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?
         BO    KNULDATA          NO, SO LEAVE BLANK.
         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.
         L     R9,DGESTGRD       LOAD THE SYSTEM E-STORAGE READ RATE.
         A     R9,DGESTGWR       ADD THE SYSTEM E-STORAGE WRITE RATE.
         CVD   R9,WORK
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         MVC   24(9,R1),EDK5PNT2
         ED    24(9,R1),WORK+4
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLEIO          YES.
         M     R8,WORK2          NO, SCALE FOR PLOTTING.
         D     R8,TENGRAND
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         L     R9,DGESTGRD       LOAD THE SYSTEM E-STORAGE READ RATE.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,TENGRAND
         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH.
         SPACE
KTABLEIO DS    0H
         L     R9,DGESTGWR       LOAD THE SYSTEM E-STORAGE WRITE RATE.
         CVD   R9,WORK
         MVC   12(9,R1),EDK5PNT2
         ED    12(9,R1),WORK+4
         L     R9,DGESTGRD       LOAD THE SYSTEM E-STORAGE READ RATE.
         CVD   R9,WORK
         MVC   0(9,R1),EDK5PNT2
         ED    0(9,R1),WORK+4
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPEIO.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - E-STOR MIGRATION AGE'
         USING KDISPMIG,R10
KDISPMIG DS    0H                SHOW EXPANDED STORAGE MIGRATION AGE.
         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?
         BO    KNULDATA          NO, SO LEAVE BLANK.
         TM    8(R1),X'80'       IN TABULAR MODE?
         BO    KTABLMIG          YES.
         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         L     R9,DGMIGAVG       LOAD AVERAGE MIGRATION AGE BY TEN.
         CVD   R9,WORK
         MVC   24(9,R1),EDK6PNT1 DISPLAY IT IN NUMERIC FORM.
         ED    24(9,R1),WORK+4
         OC    WORK(4),WORK      ANY SIGNIFICANT DIGITS LOST?
         BNZ   KBIGMIGA          YES.
         TM    WORK+4,X'F0'      ANY SIGNIFICANT DIGITS LOST?
         BZ    KMIGAVOK          NO.
KBIGMIGA SRP   WORK,64-1,0       DIVIDE BY 10 AND TRUNCATE.
         MVC   25(8,R1),ED7      DISPLAY IT IN NUMERIC FORM.
         ED    25(8,R1),WORK+4
KMIGAVOK L     R9,DGMIGHIG       LOAD MAXIMUM MIGRATION AGE.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,AHUNDRED
         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT MAXIMUM MIGRATION AGE.
         L     R9,DGMIGAVG       LOAD AVERAGE MIGRATION AGE BY TEN.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,ONEGRAND
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT AVERAGE MIGRATION AGE.
         L     R9,DGMIGLOW       LOAD MINIMUM MIGRATION AGE.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,AHUNDRED
         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT MINIMUM MIGRATION AGE.
         SPACE
KTABLMIG DS    0H
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         L     R9,DGMIGLOW       SHOW MINIMUM MIGRATION AGE.
         CVD   R9,WORK
         MVC   2(8,R1),ED7
         ED    2(8,R1),WORK+4
         L     R9,DGMIGAVG       LOAD AVERAGE MIGRATION AGE BY TEN.
         CVD   R9,WORK
         MVC   12(9,R1),EDK6PNT1
         ED    12(9,R1),WORK+4
         L     R9,DGMIGHIG       LOAD MAXIMUM MIGRATION AGE.
         CVD   R9,WORK
         MVC   23(8,R1),ED7
         ED    23(8,R1),WORK+4
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPMIG.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - EXPANDED STORAGE USAGE'
         USING KDISPEXP,R10
KDISPEXP DS    0H                DISPLAY EXPANDED STORAGE USAGE.
         TM    DGNUCPCT,X'80'    ANY RMF TYPE 71 DATA FOR INTERVAL?
         BO    KNULDATA          NO, SO LEAVE BLANK.
         TM    DGHPREXP,X'80'    YES, ANY EXPANDED STORAGE USAGE DATA?
         BO    KNULDATA          NO, SO LEAVE BLANK.
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLEXP          YES.
         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.
         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.
         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.
         A     R9,DGLSQEXP       ADD PERCENTAGE LSQA FRAMES.
         A     R9,DGLPAEXP       ADD PERCENTAGE LPA FRAMES.
         A     R9,DGCSAEXP       ADD PERCENTAGE CSA FRAMES.
         A     R9,DGHPREXP       ADD PERCENTAGE HIPERSPACE FRAMES.
         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT HIPERSPACE FRAMES.
         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.
         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.
         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.
         A     R9,DGLSQEXP       ADD PERCENTAGE LSQA FRAMES.
         A     R9,DGLPAEXP       ADD PERCENTAGE LPA FRAMES.
         A     R9,DGCSAEXP       ADD PERCENTAGE CSA FRAMES.
         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT CSA FRAMES.
         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.
         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.
         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.
         A     R9,DGLSQEXP       ADD PERCENTAGE LSQA FRAMES.
         A     R9,DGLPAEXP       ADD PERCENTAGE LPA FRAMES.
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT LPA FRAMES.
         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.
         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.
         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.
         A     R9,DGLSQEXP       ADD PERCENTAGE LSQA FRAMES.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT LSQA FRAMES.
         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.
         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.
         A     R9,DGRGNEXP       ADD PERCENTAGE USER REGION FRAMES.
         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT USER REGION FRAMES.
         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.
         A     R9,DGSQAEXP       ADD PERCENTAGE SQA FRAMES.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT SQA FRAMES.
         L     R9,DGVIOEXP       GET PERCENTAGE VIO FRAMES.
         LA    R15,X'07'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT VIO FRAMES.
         SPACE
KTABLEXP DS    0H
         L     R9,DGHPREXP       SHOW HIPERSPACE FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   27(4,R1),ED3
         ED    27(4,R1),WORK+6
         MVI   31(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGCSAEXP       SHOW CSA FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   22(4,R1),ED3
         ED    22(4,R1),WORK+6
         MVI   26(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGLPAEXP       SHOW LPA FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   18(4,R1),ED3
         ED    18(4,R1),WORK+6
         MVI   22(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGLSQEXP       SHOW LSQA FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   14(4,R1),ED3
         ED    14(4,R1),WORK+6
         MVI   18(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGRGNEXP       SHOW USER REGION FRAME % AVERAGE.
         CVD   R9,WORK
         MVC   9(4,R1),ED3
         ED    9(4,R1),WORK+6
         MVI   13(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGSQAEXP       SHOW SQA FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   4(4,R1),ED3
         ED    4(4,R1),WORK+6
         MVI   8(R1),C'%'        INDICATE PERCENTAGE.
         L     R9,DGVIOEXP       SHOW VIO FRAME PERCENT AVERAGE.
         CVD   R9,WORK
         MVC   0(4,R1),ED3
         ED    0(4,R1),WORK+6
         MVI   4(R1),C'%'        INDICATE PERCENTAGE.
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPEXP.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CSA USAGE'
         USING KDISPCSA,R10
KDISPCSA DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         SLR   R9,R9
         ICM   R9,3,DGCSAMAX     LOAD THE MAXIMUM CSA USAGE.
         BNP   KCSANULL          NO DATA HERE TO SHOW.
         CVD   R9,WORK
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLCSA          YES.
         MVC   24(8,R1),EDK4PNT1
         ED    24(7,R1),WORK+5   SHOW TOTAL AVERAGE CSA USAGE.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH FOR HIGHEST TOTAL CSA.
         LH    R9,DGCSAAVG       LOAD THE AVERAGE CSA USAGE.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH FOR SUBPOOL 241.
         LH    R9,DG227AVG
         AH    R9,DG228AVG
         AH    R9,DG231AVG
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH FOR SUBPOOL 231.
         LH    R9,DG227AVG
         AH    R9,DG228AVG
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH FOR SUBPOOL 228.
         LH    R9,DG227AVG
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH FOR SUBPOOL 227.
KCSANULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    8(R7),X'80'       IN GRAPHIC MODE?
         BZ    KNULPLOT          YES, JUST SO "GRAPH PAPER" PERHAPS.
         BR    R14               NO, LEAVE TABULAR LINE BLANK.
         SPACE
KTABLCSA DS    0H
         MVC   8(8,R1),EDK4PNT1
         ED    8(7,R1),WORK+5    SHOW THE MAXIMUM CSA USAGE.
         ICM   R9,3,DGCSAAVG     LOAD THE AVERAGE CSA USAGE.
         CVD   R9,WORK
         MVC   0(8,R1),EDK4PNT1
         ED    0(7,R1),WORK+5    SHOW THE AVERAGE CSA USAGE.
         L     R9,DGCSAALC       GET THE MAXIMUM ALLOCATED CSA.
         SRL   R9,10             CONVERT TO KILOBYTES.
         CVD   R9,WORK
         MVC   17(7,R1),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    17(6,R1),WORK+5
         L     R9,DGCSAEXT       GET THE MINIMUM CSA LARGEST FREE XTNT.
         SRL   R9,10             CONVERT TO KILOBYTES.
         CVD   R9,WORK
         MVC   25(7,R1),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    25(6,R1),WORK+5
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPCSA.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - EXTENDED CSA USAGE'
         USING KDISPECS,R10
KDISPECS DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         SLR   R9,R9
         ICM   R9,3,DGECSAMX     LOAD THE MAXIMUM ECSA USAGE.
         BNP   KECSNULL          NO DATA HERE TO SHOW.
         CVD   R9,WORK
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLECS          YES.
         MVC   24(8,R1),EDK4PNT1
         ED    24(7,R1),WORK+5   SHOW TOTAL MAXIMUM ECSA USAGE.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         LH    R9,DGECSAAV       LOAD THE AVERAGE ECSA USAGE.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH.
KECSNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    8(R7),X'80'       IN GRAPHIC MODE?
         BZ    KNULPLOT          YES, JUST SO "GRAPH PAPER" PERHAPS.
         BR    R14               NO, LEAVE TABULAR LINE BLANK.
         SPACE
KTABLECS DS    0H
         MVC   8(8,R1),EDK4PNT1
         ED    8(7,R1),WORK+5    SHOW THE MAXIMUM ECSA USAGE.
         ICM   R9,3,DGECSAAV     LOAD THE AVERAGE ECSA USAGE.
         CVD   R9,WORK
         MVC   0(8,R1),EDK4PNT1
         ED    0(7,R1),WORK+5    SHOW THE AVERAGE ECSA USAGE.
         L     R9,DGECSAAL       GET THE MAXIMUM ALLOCATED ECSA.
         SRL   R9,10             CONVERT TO KILOBYTES.
         CVD   R9,WORK
         MVC   17(7,R1),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    17(6,R1),WORK+5
         L     R9,DGECSAXT       GET MINIMUM ECSA LARGEST FREE EXTENT.
         SRL   R9,10             CONVERT TO KILOBYTES.
         CVD   R9,WORK
         MVC   25(7,R1),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    25(6,R1),WORK+5
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPECS.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - ADDRESS SPACE COUNTS'
         USING KDISPAS#,R10
KDISPAS# DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.
         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.
         L     R6,0(,R1)         GET THE DISPLAY CATEGORY NUMBER.
         S     R6,TEN            MAKE IT RELATIVE TO ASID DISPLAYS.
         SLL   R6,3              MULTIPLY BY EIGHT FOR INDEX.
         LA    R6,DGRDYLOW(R6)   POINT TO ASID COUNT TRIPLET.
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         SLR   R9,R9             CLEAR FOR FIRST INSERT.
         ICM   R9,3,2(R6)        LOAD THE MAXIMUM COUNT.
         CVD   R9,WORK
         MVC   25(6,R1),ED5Z
         ED    25(6,R1),WORK+5
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLAS#          YES.
         LTR   R9,R9             CHECK FOR ANY ACTIVITY.
         BZ    KNOWPLOT          IF ZERO THEN JUST SHOW "GRAPH PAPER".
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,AHUNDRED
         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         L     R9,4(,R6)         LOAD THE AVERAGE BY TEN.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,ONEGRAND
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         SLR   R9,R9
         ICM   R9,3,0(R6)        LOAD THE MINIMUM COUNT.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,AHUNDRED
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH.
         SPACE
KTABLAS# DS    0H
         LTR   R9,R9             CHECK FOR ANY ACTIVITY.
         BZR   R14               IF ZERO THEN SUPPRESS ALL FIGURES.
         ICM   R9,3,0(R6)        LOAD THE MINIMUM COUNT.
         CVD   R9,WORK
         MVC   4(6,R1),ED5
         ED    4(6,R1),WORK+5
         L     R9,4(,R6)         LOAD THE AVERAGE COUNT TIMES TEN.
         CVD   R9,WORK
         MVC   12(9,R1),EDK6PNT1
         ED    12(9,R1),WORK+4
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPAS#.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PRINT OUTPUT VOLUMES'
         USING KDISPPRT,R10
KDISPPRT DS    0H                DISPLAY THE EXPANDED STORAGE I/O RATE.
         MVC   WORK2(4),16(R1)   COPY THE GRAPH SCALING FACTOR.
         L     R9,DGINTPRL       SHOW THE TOTAL INTERVAL LINE COUNT.
         A     R9,DGINTPRX
         A     R9,DGINTPRN
         CVD   R9,WORK
         LR    R7,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         MVC   25(8,R1),ED7Z
         ED    25(8,R1),WORK+4
         TM    8(R7),X'80'       IN TABULAR MODE?
         BO    KTABLPRT          YES.
         M     R8,WORK2          NO, SCALE FOR PLOTTING.
         D     R8,=F'100000'     PLOTTING THOUSANDS OF PRINT LINES.
         LA    R15,X'03'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         L     R9,DGINTPRL       LOAD THE NODE PRINT LINE COUNT.
         A     R9,DGINTPRX       ADD THE XWTR PRINT LINE COUNT.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,=F'100000'     PLOTTING THOUSANDS OF PRINT LINES.
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         L     R9,DGINTPRL       LOAD THE NODE PRINT LINE COUNT.
         M     R8,WORK2          SCALE FOR PLOTTING.
         D     R8,=F'100000'     PLOTTING THOUSANDS OF PRINT LINES.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH.
         SPACE
KTABLPRT DS    0H
         L     R9,DGINTPRL       SHOW THE NODE PRINT LINE COUNT.
         CVD   R9,WORK
         MVC   0(8,R1),ED7Z
         ED    0(8,R1),WORK+4
         L     R9,DGINTPRX       SHOW THE XWTR PRINT LINE COUNT.
         CVD   R9,WORK
         MVC   8(8,R1),ED7Z
         ED    8(8,R1),WORK+4
         L     R9,DGINTPRN       SHOW THE NJE PRINT LINE COUNT.
         CVD   R9,WORK
         MVC   16(8,R1),ED7Z
         ED    16(8,R1),WORK+4
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10               KDISPPRT.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PAGE D/S UTILIZATION'
         USING KDISPPDU,R10
KDISPPDU DS    0H                DISPLAY PAGE/SWAP DATASET UTILIZATION.
         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.
         LA    R7,12(,R1)        POINT TO THE PAGE/SWAP DATA SET NAME.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.
         MVC   1(21,R8),0(R7)    SUPPLY PAGE/SWAP DATA SET NAME.
         TM    8(R3),X'80'       IN TABULAR MODE?
         BZ    KTPDUHDG          NO.
         MVC   1(23,R8),0(R7)    SUPPLY AN EXTRA TWO BYTES OF DSNAME.
KTPDUHDG TR    1(32,R8),XLATETBL ENSURE NO UNPRINTABLE CHARACTERS.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         LA    R6,DGFSTPAG       POINT TO FIRST DEVICE ENTRY ADDRESS.
         USING DGPAGEDS,R6
KPDUSRCH ICM   R6,15,DGPAGNXT    POINT TO THE NEXT PAGE DATA SET ENTRY.
         BZ    KPAGNULL          THERE IS NONE.
         LA    R0,DGPAGLEN
         BAS   R14,R6ACCESS
         CLC   DGPAGDSN,0(R7)    FOUND THE RIGHT DATA SET ENTRY?
         BNE   KPDUSRCH          NO, CONTINUE SEARCH.
         L     R9,DGPAGBSY       SHOW THE DATA SET PERMILLE BUSY.
         CVD   R9,WORK
         MVC   25(7,R1),EDK4PNT1
         ED    25(7,R1),WORK+5
         MVI   32(R1),C'%'       INDICATE PERCENTAGE.
         TM    8(R3),X'80'       IN TABULAR MODE?
         BO    KTABLPDU          YES.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.
         BAS   R7,KPDUPLOT       PLOT THE DATA SET UTILIZATION PERCENT.
         L     R9,DGPAGXFR       LOAD THE DATA SET TRANSFER RATE.
         SLR   R8,R8
         D     R8,AHUNDRED       CONVERT TO WHOLE PAGES PER SECOND.
         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.
         BAS   R7,KPDUPLOT       PLOT THE DATA SET TRANSFER RATE.
         L     R9,DGPAGIOR       LOAD THE DATA SET I/O RATE.
         SLR   R8,R8
         D     R8,AHUNDRED       CONVERT TO SSCH+RSCH PER SECOND.
         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.
         BAS   R7,KPDUPLOT       PLOT THE DATA SET I/O RATE.
         LA    R3,25(,R1)        POINT TO LAST GRAPH COLUMN.
         MVC   WORK2(1),KGCHAR   GET GRAPH BACKGROUND DISPLAY CODE.
         ICM   R0,15,DGPAGBAD    ANY BAD SLOTS?
         BZ    KPDUBGLP          NO.
         MVI   WORK2,X'0A'       YES, USE RED "GRAPH PAPER".
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
KPDUBGLP CLI   0(R3),X'00'       EMPTY BYTE?
         BNER  R14               NO, PROCESSING NOW COMPLETE.
         MVC   0(1,R3),WORK2     YES, LOAD BACKGROUND DISPLAY CODE.
         BCTR  R3,0              BACK UP ONE BYTE.
         B     KPDUBGLP          CONTINUE SUPPLY OF GRAPH BACKGROUND.
         SPACE
KPDUPLOT DS    0H                "POLY" GRAPH (NO LIE) PLOT SUBROUTINE.
         CLI   0(R1),X'3B'       BEEN HERE BEFORE?
         BE    KPGPLTOK          YES, THE BACKGROUND STUFF IS DONE.
         MVI   0(R1),X'3B'       NO, SEPARATE THIS DISPLAY AREA.
         XC    1(25,R1),1(R1)    CLEAR THE GRAPHIC AREA.
KPGPLTOK LA    R9,2(,R9)         ROUND THE VALUE UPWARDS.
         SRA   R9,2              QUARTER IT.
         BZR   R7                DON'T PLOT ANYTHING FOR ZERO PERCENT.
         STC   R15,SECWORKA      CREATE POTENTIAL GRAPHIC CODES.
         MVC   SECWORKA+1(31),SECWORKA
         BCTR  R9,0              DECREMENT FOR EXECUTE.
         CHI   R9,24             WILL IT FIT ON THE GRAPH?
         BNH   KPGPLTEX          YES, PROCEED.
         LA    R9,24             NO, SO TRUNCATE IT TO THE MAXIMUM.
KPGPLTEX EX    R9,KPGPLTOR       YES, SUPPLY THE REST.
         BR    R7                NOW THIS PLOT IS COMPLETE.
KPGPLTOR OC    1(0,R1),SECWORKA                 <<< EXECUTED >>>
         SPACE
KTABLPDU DS    0H
         L     R9,DGPAGXFR       SHOW THE DATA SET TRANSFER RATE.
         CVD   R9,WORK
         SRP   WORK,64-1,5       ROUND TO TENTHS PER SECOND.
         MVC   18(7,R1),EDK4PNT1
         ED    18(7,R1),WORK+5
         L     R9,DGPAGIOR       SHOW THE DATA SET I/O RATE.
         CVD   R9,WORK
         SRP   WORK,64-1,5       ROUND TO TENTHS PER SECOND.
         MVC   11(7,R1),EDK4PNT1
         ED    11(7,R1),WORK+5
         ICM   R9,15,DGPAGTIM    SHOW DATA SET TRANSFER SERVICE TIME.
         BZ    KPDUTMOK          LEAVE BLANK IF NO ACTIVITY (0US).
         CVD   R9,WORK
         SRP   WORK,64-2,5       ROUND TO 1/10,000THS OF A SECOND.
         MVC   4(7,R1),EDK4PNT1
         ED    4(7,R1),WORK+5
KPDUTMOK L     R9,DGPAGBAD       SHOW THE BAD SLOT OR SWAP SET COUNT.
         CVD   R9,WORK
         MVC   0(4,R1),ED3Z
         ED    0(4,R1),WORK+6
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10,R6            KDISPPDU, DGPAGEDS.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PAGE D/S FULLNESS'
         USING KDISPPDF,R10
KDISPPDF DS    0H                DISPLAY PAGE/SWAP DATA SET FULLNESS.
         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.
         LA    R7,12(,R1)        POINT TO THE PAGE/SWAP DATA SET NAME.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.
         MVC   1(24,R8),0(R7)    SUPPLY PAGE/SWAP DATA SET NAME.
         TR    1(24,R8),XLATETBL ENSURE NO UNPRINTABLE CHARACTERS.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         LA    R6,DGFSTPAG       POINT TO FIRST DEVICE ENTRY ADDRESS.
         USING DGPAGEDS,R6
KPDFSRCH ICM   R6,15,DGPAGNXT    POINT TO THE NEXT DEVICE ENTRY.
         BZ    KPAGNULL          THERE IS NONE.
         LA    R0,DGPAGLEN
         BAS   R14,R6ACCESS
         CLC   DGPAGDSN,0(R7)    FOUND THE RIGHT DATA SET ENTRY?
         BNE   KPDFSRCH          NO, CONTINUE SEARCH.
         TM    8(R3),X'80'       IN TABULAR MODE?
         BO    KTABLPDF          YES.
         L     R9,DGPAGAVG       SHOW THE DATA SET AVERAGE FULLNESS.
         CVD   R9,WORK
         MVC   25(7,R1),EDK4PNT1
         ED    25(7,R1),WORK+5
         MVI   32(R1),C'%'       INDICATE PERCENTAGE.
         MVC   WORK2(1),KGCHAR   SAVE GRAPH BACKGROUND DISPLAY CODE.
         ICM   R0,15,DGPAGBAD    ANY BAD SLOTS?
         BZ    KPDFBDOK          NO.
         MVI   KGCHAR,X'0A'      YES, USE RED "GRAPH PAPER".
KPDFBDOK L     R9,DGPAGMAX       SHOW THE DATA SET MAXIMUM FULLNESS.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         MVC   KGCHAR,WORK2      RESTORE GRAPH BACKGROUND DISPLAY CODE.
         L     R9,DGPAGAVG       SHOW THE DATA SET AVERAGE FULLNESS.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE GRAPH.
         L     R9,DGPAGMIN       SHOW THE DATA SET MINIMUM FULLNESS.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'04'         LOAD GRAPH DISPLAY CODE.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         B     KNOWPLOT          PLOT THE GRAPH.
         SPACE
KTABLPDF DS    0H
         L     R9,DGPAGMAX       SHOW THE DATA SET MAXIMUM FULLNESS.
         CVD   R9,WORK
         MVC   25(7,R1),EDK4PNT1
         ED    25(7,R1),WORK+5
         MVI   32(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGPAGAVG       SHOW THE DATA SET AVERAGE FULLNESS.
         CVD   R9,WORK
         MVC   15(7,R1),EDK4PNT1
         ED    15(7,R1),WORK+5
         MVI   22(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGPAGMIN       SHOW THE DATA SET MINIMUM FULLNESS.
         CVD   R9,WORK
         MVC   5(7,R1),EDK4PNT1
         ED    5(7,R1),WORK+5
         MVI   12(R1),C'%'       INDICATE PERCENTAGE.
         L     R9,DGPAGBAD       SHOW THE BAD SLOT OR SWAP SET COUNT.
         CVD   R9,WORK
         MVC   0(4,R1),ED3Z
         ED    0(4,R1),WORK+6
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         BR    R14               PROCESSING NOW COMPLETE.
KPAGNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    8(R3),X'80'       IN GRAPHIC MODE?
         BOR   R14               NO, SO EXIT.
         B     KNULPLOT          PLOT THE GRAPH.
         DROP  R10,R6            KDISPPDF, DGPAGEDS.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CHANNEL UTILIZATION'
         USING KDISPCHN,R10
KDISPCHN DS    0H                DISPLAY CHANNEL PATH UTILIZATION.
         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R7,12(,R1)        LOAD THE CHANNEL PATH IDENTIFIER.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.
         STC   R7,WORK
         UNPK  16(3,R8),WORK(2)  SHOW THE CHANNEL PATH NUMBER.
         TR    16(2,R8),HEX-C'0'
         MVI   18(R8),C' '
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         ICM   R6,15,DGFSTCHN    POINT TO THE CHANNEL PATH ENTRY.
         BZ    KCHNNULL          THERE IS NONE.
         LR    R9,R6             SAVE CHANNEL PATH ENTRY ADDRESS.
         LA    R0,DGCHNLEN
         BAS   R14,R6ACCESS
         USING DGCHPID,R6
         L     R15,DGCHNNUM      GET THE CHPID COUNT.
         DROP  R6                DGCHPID.
         LA    R6,DGCHNLEN(,R9)  POINT TO FIRST CHPID SECTION.
KCHNSRCH LR    R9,R6             SAVE CHPID SECTION ADDRESS.
         LA    R0,DGCHPLEN
         BAS   R14,R6ACCESS
         USING DGCHPATH,R6
         CLM   R7,1,DGCHPPID     FOUND THE RIGHT CHPID SECTION?
         BE    KCHFOUND          YES.
         LA    R6,DGCHPLEN(,R9)  NO, POINT TO NEXT CHPID SECTION.
         BCT   R15,KCHNSRCH      CONTINUE SEARCH.
KCHNNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    8(R3),X'80'       IN GRAPHIC MODE?
         BOR   R14               NO, SO EXIT.
         B     KNULPLOT          PLOT THE GRAPH.
KCHFOUND LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.
         CR    R2,R15            CURRENTLY ON THIS LINE?
         BNE   KCHTYPOK          NO, SUBHEADING PROCESSING COMPLETE.
         TM    DGCHPPID+2,X'80'  IS THIS AN ES CONNECTION CHANNEL?
         BO    KCHESCON          YES.
         TM    DGCHPPID+1,X'10'  IS THIS A BYTE MULTIPLEXOR CHANNEL?
         BO    KCHBYTE           YES.
         TM    DGCHPPID+1,X'20'  IS THIS A BLOCK MULTIPLEXOR CHANNEL?
         BO    KCHBLOCK          YES.
         B     KCHTYPOK
KCHESCON MVC   20(12,R8),=CL12'(ES CONN)   '
         B     KCHTYPOK
KCHBYTE  MVC   20(12,R8),=CL12'(BYTE MUX)  '
         B     KCHTYPOK
KCHBLOCK MVC   20(12,R8),=CL12'(BLOCK MUX) '
KCHTYPOK TM    DGCHPPID+1,X'01'  IS THE CHANNEL ONLINE?
         BO    KCHONLIN          YES, SHOW THE UTILIZATION.
         MVC   27(5,R1),=C'(OFF)'
         B     KCHNNULL          FILL IN THE GRAPH PAPER.
KCHONLIN L     R9,DGCHPBSY       LOAD THE CHANNEL UTILIZATION.
         CVD   R9,WORK
         MVC   25(8,R1),EDK3PNT2
         ED    25(7,R1),WORK+5
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    8(R3),X'80'       IN TABULAR MODE?
         BOR   R14               YES, SO PROCESSING NOW COMPLETE.
         SLR   R8,R8
         D     R8,AHUNDRED       CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         B     KNOWPLOT          PLOT THE GRAPH.
         DROP  R10,R6            KDISPCNT, DGCHPATH.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - DEVICE UTILIZATION'
         USING KDISPDVU,R10
KDISPDVU DS    0H               DISPLAY DEVICE UTILIZATION.
         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R7,12(,R1)        LOAD THE DEVICE NUMBER.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.
         TM    8(R3),X'80'       IN GRAPHIC MODE?
         BZ    KDEVUHDG          YES.
         LA    R8,6(,R8)         NO, ADJUST FOR TABULAR HEADING FORMAT.
KDEVUHDG STH   R7,WORK
         UNPK  1(5,R8),WORK(3)   SHOW THE DEVICE NUMBER.
         TR    1(4,R8),HEX-C'0'
         MVI   5(R8),C' '
         CLI   1(R8),C'0'        LEADING ZERO?
         BNE   KDVUNOOK          NO.
         MVI   1(R8),C' '        YES, SUPPRESS IT.
KDVUNOOK ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         LA    R6,DGFSTDEV       POINT TO FIRST DEVICE ENTRY ADDRESS.
         USING DGDEVICE,R6
KDVUSRCH ICM   R6,15,DGDEVNXT    POINT TO THE NEXT DEVICE ENTRY.
         BZ    KDEVNULL          THERE IS NONE.
         LA    R0,DGDEVLEN
         BAS   R14,R6ACCESS
         C     R7,DGDEVNAM       FOUND THE RIGHT DEVICE ENTRY?
         BE    KDEVUFND          YES.
         B     KDVUSRCH          NO, CONTINUE SEARCH.
KDEVUFND LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.
         CR    R2,R15            CURRENTLY ON THIS LINE?
         BNE   KDUVOLOK          NO, SUBHEADING PROCESSING COMPLETE.
         MVC   6(6,R8),DGDEVVOL  LOAD THE DEVICE VOLUME SERIAL NUMBER.
         TR    6(6,R8),XLATETBL  ENSURE NO UNPRINTABLE CHARACTERS.
         CLI   6(R8),C'$'        VALID VOLUME SERIAL NUMBER?
         BNL   KDUVOLOK          PROBABLY, SO ASSUME YES.
         MVI   6(R8),C'X'-C' '   NO, SHOW DEVICE UNIT TYPE IN HEX.
         UNPK  7(5,R8),DGDEVTYP+2(3)
         TR    7(4,R8),HEX-C'0'
         MVI   11(R8),C'X'-C' '
KDUVOLOK TM    DGDEVFLG,X'01'    IS THE DEVICE ONLINE?
         BO    KDVUONLN          YES, SHOW THE UTILIZATION.
         MVC   27(5,R1),=C'(OFF)'
         B     KDEVNULL          FILL IN THE GRAPH PAPER.
KDVUONLN TM    8(R3),X'80'       IN TABULAR MODE?
         BO    KTABLDVU          YES.
         L     R9,DGDEVCON       LOAD THE DEVICE CONNECT PERMILLAGE.
         A     R9,DGDEVDIS       ADD THE DEVICE DISCONNECT PERMILLAGE.
         A     R9,DGDEVPND       ADD THE DEVICE PENDING PERMILLAGE.
         LR    R0,R9             SAVE IT FOR LATER.
         CVD   R9,WORK
         MVC   25(8,R1),EDK4PNT1
         ED    25(7,R1),WORK+5   SHOW AVERAGE UTILIZATION IN NUMERICS.
         A     R9,DGDEVMTP       ADD THE MOUNT PENDING PERMILLAGE.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'01'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE MOUNT PENDING UTILIZATION.
         LR    R9,R0             RESTORE THE CONVENTIONAL UTILIZATION.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE DEVICE PENDING UTILIZATION.
         L     R9,DGDEVCON       LOAD THE DEVICE CONNECT PERMILLAGE.
         A     R9,DGDEVDIS       ADD THE DEVICE DISCONNECT PERMILLAGE.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT DEVICE DISCONNECT UTILIZATION.
         L     R9,DGDEVCON       LOAD DEVICE CONNECT PERMILLAGE.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE DEVICE CONNECT UTILIZATION.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         CLI   DGDEVTYP+2,X'80'  IS THE DEVICE A MAGNETIC TAPE UNIT?
         BNER  R14               NO, PROCESSING NOW COMPLETE.
         CLI   DGDEVVOL,C'$'     YES, VALID VOLUME SERIAL AVAILABLE?
         BLR   R14               NO, PROCESSING NOW COMPLETE.
         LA    R1,21(,R1)        POINT TO LAST SIX BYTES OF GRAPH.
         CLC   KGCHAR,0(R1)      ROOM FOR VOLUME SERIAL IN GRAPH AREA?
         BE    KDEVUVOL          YES, LOAD IT THERE.
         LTR   R0,R0             NO, BUT WAS UTILIZATION ZERO?
         BNZR  R14               NO, PROCESSING NOW COMPLETE.
         LA    R1,6(,R1)         YES, POINT TO 0.0% AREA.
KDEVUVOL MVC   0(6,R1),DGDEVVOL  LOAD THE DEVICE VOLUME SERIAL NUMBER.
         TR    0(6,R1),XLATETBL  ENSURE NO UNPRINTABLE CHARACTERS.
         BR    R14               PROCESSING NOW COMPLETE.
         SPACE
KTABLDVU DS    0H
         ICM   R9,15,DGDEVNRD    SHOW THE NOT READY PERMILLAGE.
         BZ    KDUNRDOK          LEAVE BLANK IF ZERO.
         CVD   R9,WORK
         MVC   26(7,R1),EDK4PNT1
         ED    26(7,R1),WORK+5
KDUNRDOK ICM   R9,15,DGDEVMTP    SHOW THE MOUNT PENDING PERMILLAGE.
         BZ    KDUMTPOK          LEAVE BLANK IF ZERO.
         CVD   R9,WORK
         MVC   20(7,R1),EDK4PNT1
         ED    20(7,R1),WORK+5
KDUMTPOK L     R9,DGDEVPND       SHOW THE REQUEST PENDING PERMILLAGE.
         CVD   R9,WORK
         MVC   14(7,R1),EDK4PNT1
         ED    14(7,R1),WORK+5
         L     R9,DGDEVDIS       SHOW THE DEVICE DISCONNECT PERMILLAGE.
         CVD   R9,WORK
         MVC   9(7,R1),EDK4PNT1
         ED    9(7,R1),WORK+5
         L     R9,DGDEVCON       SHOW THE DEVICE CONNECT PERMILLAGE.
         CVD   R9,WORK
         MVC   4(7,R1),EDK4PNT1
         ED    4(7,R1),WORK+5
         ICM   R9,15,DGDEVRSV    SHOW THE DEVICE RESERVED PERMILLAGE.
         BZ    KDURSVOK          LEAVE BLANK IF ZERO.
         CVD   R9,WORK
         MVC   100(7,R2),EDK4PNT1
         ED    100(7,R2),WORK+5
         MVC   0(6,R1),101(R2)
KDURSVOK L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    DGDEVFL2,DGDEV0IO ANY I/O TO DEVICE IN INTERVAL?
         BOR   R14               NO, PROCESSING NOW COMPLETE.
         CLC   21(12,R1),BLANKS  ANY NOT READY OR MOUNT PENDING TIME?
         BNER  R14               YES, PROCESSING NOW COMPLETE.
         L     R9,DGDEVACT       SHOW THE DEVICE ACTIVATION RATE.
         CVD   R9,WORK
         SRP   WORK,64-1,5       ROUND TO TENTHS PER SECOND.
         MVC   21(7,R1),EDK4PNT1
         ED    21(7,R1),WORK+5
         MVC   28(5,R1),KDUIOPRS INDICATE I/O RATE PER SECOND.
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10,R6            KDISPDVU, DGDEVICE.
         SPACE
KDUIOPRS DC    C'-IO/S '
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - DEVICE SERVICE TIME'
         USING KDISPDVT,R10
KDISPDVT DS    0H                DISPLAY DEVICE SERVICE TIME.
         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R7,12(,R1)        LOAD THE DEVICE NUMBER.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.
         TM    8(R3),X'80'       IN GRAPHIC MODE?
         BZ    KDEVTHDG          YES.
         LA    R8,3(,R8)         NO, ADJUST FOR TABULAR HEADING FORMAT.
KDEVTHDG STH   R7,WORK
         UNPK  1(5,R8),WORK(3)   SHOW THE DEVICE NUMBER.
         TR    1(4,R8),HEX-C'0'
         MVI   5(R8),C' '
         CLI   1(R8),C'0'        LEADING ZERO?
         BNE   KDVTNOOK          NO.
         MVI   1(R8),C' '        YES, SUPPRESS IT.
KDVTNOOK ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         LA    R6,DGFSTDEV       POINT TO FIRST DEVICE ENTRY ADDRESS.
         USING DGDEVICE,R6
KDVTSRCH ICM   R6,15,DGDEVNXT    POINT TO THE NEXT DEVICE ENTRY.
         BZ    KDEVNULL          THERE IS NONE.
         LA    R0,DGDEVLEN
         BAS   R14,R6ACCESS
         C     R7,DGDEVNAM       FOUND THE RIGHT DEVICE ENTRY?
         BNE   KDVTSRCH          NO, CONTINUE SEARCH.
         LA    R15,BUFFER+(3*LL) YES, POINT TO FIRST RMF INTERVAL LINE.
         CR    R2,R15            CURRENTLY ON THIS LINE?
         BNE   KDTVOLOK          NO, SUBHEADING PROCESSING COMPLETE.
         MVC   6(6,R8),DGDEVVOL  LOAD THE DEVICE VOLUME SERIAL NUMBER.
         TR    6(6,R8),XLATETBL  ENSURE NO UNPRINTABLE CHARACTERS.
         CLI   6(R8),C'$'        VALID VOLUME SERIAL NUMBER?
         BNL   KDTVOLOK          PROBABLY, SO ASSUME YES.
         MVI   6(R8),C'X'-C' '   NO, SHOW DEVICE UNIT TYPE IN HEX.
         UNPK  7(5,R8),DGDEVTYP+2(3)
         TR    7(4,R8),HEX-C'0'
         MVI   11(R8),C'X'-C' '
KDTVOLOK TM    DGDEVFLG,X'01'    IS THE DEVICE ONLINE?
         BO    KDVTONLN          YES, SHOW THE UTILIZATION.
         MVC   27(5,R1),=C'(OFF)'
         B     KDEVNULL          FILL IN THE GRAPH PAPER.
KDVTONLN TM    DGDEVFL2,DGDEV0IO ANY I/O TO DEVICE IN INTERVAL?
         BO    KDEVNULL          NO, JUST FILL IN THE GRAPH PAPER.
         TM    8(R3),X'80'       IN TABULAR MODE?
         BO    KTABLDVT          YES.
         L     R9,DGDEVAVC       LOAD THE CONNECT TIME PER I/O.
         A     R9,DGDEVAVD       ADD THE DISCONNECT TIME PER I/O.
         A     R9,DGDEVAVP       ADD THE REQUEST PENDING TIME PER I/O.
         LR    R0,R9             SAVE IT FOR LATER.
         CVD   R9,WORK
         SRP   WORK,64-2,5       DIVIDE BY 100 AND ROUND.
         MVC   25(7,R1),EDK4PNT1
         ED    25(7,R1),WORK+5   SHOW AVERAGE SERVICE TIME IN NUMERICS.
         SLR   R8,R8
         SLDL  R8,1              SCALE FOR PLOTTING.
         D     R8,ONEGRAND       CONVERT TO MILLISECONDS BY TWO.
         LA    R15,X'02'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE DEVICE PENDING SERVICE TIME.
         L     R9,DGDEVAVC       LOAD THE CONNECT TIME PER I/O.
         A     R9,DGDEVAVD       ADD THE DISCONNECT TIME PER I/O.
         SLR   R8,R8
         SLDL  R8,1              SCALE FOR PLOTTING.
         D     R8,ONEGRAND       CONVERT TO MILLISECONDS BY TWO.
         LA    R15,X'06'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE DEVICE DISCONNECT SERV. TIME.
         L     R9,DGDEVAVC       LOAD THE CONNECT TIME PER I/O.
         SLR   R8,R8
         SLDL  R8,1              SCALE FOR PLOTTING.
         D     R8,ONEGRAND       CONVERT TO MILLISECONDS BY TWO.
         LA    R15,X'05'         LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE DEVICE CONNECT SERVICE TIME.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         CLI   DGDEVTYP+2,X'80'  IS THE DEVICE A MAGNETIC TAPE UNIT?
         BNER  R14               NO, PROCESSING NOW COMPLETE.
         CLI   DGDEVVOL,C'$'     YES, VALID VOLUME SERIAL AVAILABLE?
         BLR   R14               NO, PROCESSING NOW COMPLETE.
         LA    R1,21(,R1)        POINT TO LAST SIX BYTES OF GRAPH.
         CLC   KGCHAR,0(R1)      ROOM FOR VOLUME SERIAL IN GRAPH AREA?
         BE    KDEVTVOL          YES, LOAD IT THERE.
         LTR   R0,R0             NO, BUT WAS UTILIZATION ZERO?
         BNZR  R14               NO, PROCESSING NOW COMPLETE.
         LA    R1,6(,R1)         YES, POINT TO 0.0 AREA.
KDEVTVOL MVC   0(6,R1),DGDEVVOL  LOAD THE DEVICE VOLUME SERIAL NUMBER.
         TR    0(6,R1),XLATETBL  ENSURE NO UNPRINTABLE CHARACTERS.
         BR    R14               PROCESSING NOW COMPLETE.
KDEVNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    8(R3),X'80'       IN GRAPHIC MODE?
         BOR   R14               NO, SO EXIT.
         B     KNULPLOT          PLOT THE GRAPH.
         SPACE
KTABLDVT DS    0H
         ICM   R9,15,DGDEVDPW    SHOW DIRECTOR PORT BUSY DELAY PER I/O.
         BZ    KDTDPWOK          LEAVE BLANK IF UNDER 1 MICROSECOND.
         LA    R3,25(,R1)        POINT TO DISPLAY SLOT.
         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.
KDTDPWOK ICM   R9,15,DGDEVBSW    SHOW DEVICE BUSY DELAY PER I/O.
         BZ    KDTDVWOK          LEAVE BLANK IF UNDER 1 MICROSECOND.
         LA    R3,20(,R1)        POINT TO DISPLAY SLOT.
         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.
KDTDVWOK ICM   R9,15,DGDEVCUW    SHOW CONTROL UNIT BUSY DELAY PER I/O.
         BZ    KDTCUWOK          LEAVE BLANK IF UNDER 1 MICROSECOND.
         LA    R3,15(,R1)        POINT TO DISPLAY SLOT.
         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.
KDTCUWOK L     R9,DGDEVAVP       SHOW REQUEST PENDING TIME PER I/O.
         LA    R3,10(,R1)        POINT TO DISPLAY SLOT.
         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.
         L     R9,DGDEVAVD       SHOW DEVICE DISCONNECT TIME PER I/O.
         LA    R3,5(,R1)         POINT TO DISPLAY SLOT.
         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.
         L     R9,DGDEVAVC       SHOW DEVICE CONNECT TIME PER I/O.
         LA    R3,0(,R1)         POINT TO DISPLAY SLOT.
         BAS   R15,KDVTBFMT      FORMAT AND DISPLAY AVERAGE TIME.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         BR    R14               PROCESSING NOW COMPLETE.
         SPACE
KDVTBFMT DS    0H                MILLISECOND FORMATTING SUBROUTINE.
         CVD   R9,WORK           CONVERT MICROSECONDS TO DECIMAL.
         OC    WORK(5),WORK      LESS THAN 100 MILLISECONDS?
         BZ    KDVTFMT2          YES.
         SRP   WORK,64-3,5       NO, ROUND TO WHOLE MILLISECONDS.
         MVC   0(6,R3),ED5
         ED    0(6,R3),WORK+5
         BR    R15               RETURN.
KDVTFMT2 SRP   WORK,64-2,5       ROUND TO TENTHS OF MILLISECONDS.
         MVC   1(5,R3),ED2PNT1
         ED    1(5,R3),WORK+6
         BR    R15               RETURN.
         DROP  R10,R6            KDISPDVT, DGDEVICE.
         SPACE
         LTORG
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - RESPONSE TIME'
         USING KDISPTRT,R10
KDISPTRT DS    0H                DISPLAY TRANSACTION RESPONSE TIME.
         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R7,12(,R1)        LOAD THE PERFORMANCE GROUP NUMBER.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.
         CVD   R7,WORK
         MVC   4(4,R8),ED3
         ED    4(4,R8),WORK+6    SHOW THE PERFORMANCE GROUP NUMBER.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         LA    R6,DGFSTPGN       POINT TO FIRST PERF. ENTRY ADDRESS.
         ICM   R0,7,KLEFT+1      IS THE LEFT DISPLAY CPU UTILIZATION?
         BNZ   KTRTSRCH          NO, PROCEED.
         LA    R15,BUFFER+(3*LL) YES, POINT TO FIRST RMF INTERVAL LINE.
         CR    R2,R15            CURRENTLY ON THIS LINE?
         BNE   KTRTSRCH          NO, SUBHEADING PROCESSING COMPLETE.
         L     R9,KLEFT+8        YES, GET THE LEFT DISPLAY LINE OFFSET.
         LA    R9,BUFFER+LL(R9)  POINT TO THE FIRST LEFT SUBHEADING.
         MVC   1(32,R9),KPGCPUHD OVERLAY THE CPU LEGEND WITH PGN DATA.
         MVC   19(4,R9),ED3
         ED    19(4,R9),WORK+6   SHOW THE PERFORMANCE GROUP NUMBER.
         TM    KLEFT+8,X'80'     IS CPU DISPLAY IN GRAPHIC MODE?
         BZ    KTRTSRCH          YES.
         MVC   1(32,R9),KPTCPUHD OVERLAY THE CPU HEADING FOR TABLE.
         MVC   20(4,R9),ED3
         ED    20(4,R9),WORK+6   SHOW THE PERFORMANCE GROUP NUMBER.
         MVC   LL+1(32,R9),KPTCP2HD   SUPPLY COLUMN HEADINGS.
         USING DGPRFGRP,R6
KTRTSRCH ICM   R6,15,DGPRFNXT    POINT TO NEXT PERFORMANCE GROUP ENTRY.
         BZ    KPGNNULL          THERE IS NONE.
         LR    R15,R6            COPY BASE SECTION ADDRESS.
         LA    R0,DGPRFLEN+DGPERLEN
         BAS   R14,R6ACCESS
         CLI   DGPRFPER+3,1      MORE THAN ONE PERIOD IN GROUP?
         BNH   KPPOKAY2          NO, HAVE RETRIEVED WHOLE GROUP'S DATA.
         LA    R14,DGPERLEN      GET A PERIOD ENTRY LENGTH.
         MH    R14,DGPRFPER+2    MULTIPLY BY THE PERIOD COUNT.
         LR    R6,R15            YES, RESTORE BASE SECTION ADDRESS.
         LA    R0,DGPRFLEN(,R14) GET TOTAL GROUP DATA LENGTH.
         BAS   R14,R6ACCESS
KPPOKAY2 C     R7,DGPRFNUM       FOUND RIGHT PERFORMANCE GROUP ENTRY?
         BE    KTRTFND           YES.
         B     KTRTSRCH          NO, CONTINUE SEARCH.
KTRTFND  TM    DGPRFFLG,X'02'    REPORT PERFORMANCE GROUP?
         BZ    KTRTPGNM          NO, GO SHOW PERFORMANCE GROUP NUMBER.
         MVC   1(3,R8),=C'RPG'   YES, INDICATE THIS IN SUB-HEADING.
KTRTPGNM LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.
         CR    R2,R15            CURRENTLY ON THIS LINE?
         BNE   KTRTSBDN          NO, SUBHEADING PROCESSING COMPLETE.
         TM    DGPRFFLG,X'04'    ACCOUNTING INFORMATION USED?
         BZ    KTRTACOK          NO, NOT FOR THIS PERFORMANCE GROUP.
         MVI   9(R8),C'@'        YES, FLAG THIS.
KTRTACOK MVC   11(4,R8),DGPRFSYS LOAD PERFORMANCE GROUP SUBSYSTEM NAME.
         TR    11(4,R8),XLATETBL ENSURE NO UNPRINTABLES IN SUBSYSTEM.
         CLC   DGPRFNAM,BLANKS   TRANSACTION NAME SPECIFIED?
         BH    KTRTNAME          YES.
         CLC   DGPRFUSR,BLANKS   USER SPECIFIED?
         BH    KTRTUSER          YES.
         CLC   DGPRFCLS,BLANKS   TRANSACTION CLASS SPECIFIED?
         BNH   KTRTSBDN          NO, SUBHEADING NOW COMPLETE.
         MVC   17(6,R8),=CL6'CLASS='
         MVC   23(10,R8),DGPRFCLS
         B     KTRTSBOK
KTRTUSER MVC   17(6,R8),=CL6' USER='
         MVC   23(10,R8),DGPRFUSR
         B     KTRTSBOK
KTRTNAME MVC   17(6,R8),=CL6' NAME='
         MVC   23(10,R8),DGPRFNAM
KTRTSBOK TR    1(32,R8),XLATETBL ENSURE NO UNPRINTABLES IN SUBHEADING.
KTRTSBDN LR    R7,R3             COPY DISPLAY VECTOR ADDRESS.
         SLR   R9,R9             PREPARE FOR NULL CASE.
         ICM   R0,15,DGPRFXAN    GET THE GROUP ENDED TRANSACTION COUNT.
         BZ    KTRTDONE          DO NOT DIVIDE BY ZERO.
         L     R9,DGPRFXTM       LOAD MILLISECONDS PER TRANSACTION.
         CVD   R9,WORK
         OC    WORK(5),WORK      LESS THAN 100 SECONDS?
         BNZ   KTRTLONG          NO.
         MVC   26(7,R1),EDK2PNT3
         ED    26(7,R1),WORK+5   SHOW AVERAGE RESPONSE TIME IN NUMBERS.
         B     KTRTDONE
KTRTLONG SRP   WORK,64-1,5       DIVIDE BY 10 AND ROUND.
         MVC   24(9,R1),EDK5PNT2
         ED    24(9,R1),WORK+4   SHOW AVERAGE RESPONSE TIME IN NUMBERS.
KTRTDONE L     R3,DGPRFPER       GET NUMBER OF PERFORMANCE PERIODS.
         ST    R3,WORK2+4        SAVE IT.
         LA    R6,DGPERIOD       YES, POINT TO FIRST PERIOD SECTION.
         DROP  R6                DGPRFGRP.
         ST    R6,WORK2          SAVE ITS ADDRESS.
         TM    8(R7),X'80'       IN TABULAR DISPLAY MODE?
         BO    KTABLTRT          YES.
         LA    R0,DGPERLEN       GET THE PERIOD SECTION LENGTH.
         STH   R0,WORK           SAVE IT.
         USING DGPERIOD,R6
KTRTLOOP LR    R8,R3             GET THE PERIOD NUMBER.
         BCTR  R8,0              MAKE IT RELATIVE.
         MH    R8,WORK           GET INDEX.
         L     R9,DGPERXTM(R8)   LOAD MILLISECONDS PER TRANSACTION.
         SLR   R8,R8
         D     R8,AHUNDRED       SCALE FOR PLOTTING.
         LR    R15,R3            GET THE PERIOD NUMBER.
         IC    R15,KCPUCODE-1(3) LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE TRANSACTION RESPONSE TIME.
         BCT   R3,KTRTLOOP       PROCESS NEXT PERFORMANCE PERIOD.
         B     KTRTCPUX
         SPACE
KTABLTRT DS    0H                PERFORM TABULAR PROCESSING.
         LTR   R9,R0             COPY GROUP ENDED TRANSACTION COUNT.
         BZ    KTRTCPUX          LEAVE LINE BLANK IF ZERO.
         M     R8,=F'1000000'
         D     R8,DGINTSIZ       GET GROUP TRANSACTION RATE.
         CVD   R9,WORK
         C     R9,=F'1000000'    IS RATE LESS THAN 999.9 PER SECOND?
         BL    KTRTFEW           YES.
         SRP   WORK,64-3,5       NO, DIVIDE BY 1000 AND ROUND.
         MVC   0(6,R1),ED5       SHOW RATE AS A WHOLE NUMBER.
         ED    0(6,R1),WORK+5    SHOW RATE AS A WHOLE NUMBER.
         B     KTRATEOK
KTRTFEW  SRP   WORK,64-2,5       DIVIDE BY 100 AND ROUND.
         MVC   0(7,R1),EDK4PNT1
         ED    0(7,R1),WORK+5
         MVC   0(7,R1),1(R1)
         CLI   1(R1),C' '        LEADING BLANK STILL?
         BNE   KTRATEOK          NO, CAN'T SHIFT LEFT W/O DATA LOSS.
         MVC   0(6,R1),1(R1)     YES, ENSURE BLANK BEFORE PP-1 DATUM.
KTRATEOK L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.
         L     R0,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.
         CHI   R0,4              MORE THAN MAXIMUM SUPPORTED PERIODS?
         BNH   KTRTTBLP          NO.
         LA    R0,R4             YES, REDUCE TO MAXIMUM SUPPORTED.
KTRTTBLP LA    R1,5(,R1)         POINT TO NEXT DISPLAY SLOT.
         ICM   R9,15,DGPERXAN    GET GROUP ENDED TRANSACTION COUNT.
         BZ    KTRTBNXT          DO NOT DIVIDE BY ZERO.
         L     R9,DGPERXTM       LOAD MILLISECONDS PER TRANSACTION.
         CVD   R9,WORK
         OC    WORK(5),WORK      LESS THAN 100 SECONDS?
         BNZ   KTRTBLNG          NO.
         SRP   WORK,64-2,5       DIVIDE BY 100 AND ROUND.
         MVC   1(5,R1),ED2PNT1
         ED    1(5,R1),WORK+6    SHOW AVERAGE RESPONSE TIME IN NUMBERS.
         B     KTRTBNXT
KTRTBLNG SRP   WORK,64-3,5       DIVIDE BY 1000 AND ROUND.
         MVC   100(6,R2),ED5     SHOW PERFORMANCE GROUP PERIOD RESPONSE
         ED    100(6,R2),WORK+5  TIME WHOLE SECONDS IN NUMERICS.
         MVC   1(5,R1),101(R2)
KTRTBNXT LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.
         BCT   R0,KTRTTBLP       PROCESS NEXT PERFORMANCE PERIOD.
         SPACE
KTRTCPUX LA    R10,KDISPSRV      UPDATE BASE REGISTER.
         DROP  R10,R6            KDISPTRT, DGPERIOD.
         USING KDISPSRV,R10
         B     KPGCPPLT          GO CHECK FOR CPU IN LEFT DISPLAY.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SERVICE UNIT ABSORPTION'
KDISPSRV DS    0H                DISPLAY SERVICE UNIT ABSORPTION RATE.
         LR    R3,R1             COPY DISPLAY VECTOR ADDRESS.
         L     R7,12(,R1)        LOAD THE PERFORMANCE GROUP NUMBER.
         L     R1,8(,R1)         LOAD DISPLAY LINE OFFSET.
         LA    R8,BUFFER+LL(R1)  POINT TO FIRST SUB-HEADING.
         CVD   R7,WORK
         MVC   4(4,R8),ED3
         ED    4(4,R8),WORK+6    SHOW THE PERFORMANCE GROUP NUMBER.
         ALR   R1,R2             POINT TO DISPLAY LINE SLOT.
         LA    R6,DGFSTPGN       POINT TO FIRST PERF. ENTRY ADDRESS.
         ICM   R0,7,KLEFT+1      IS THE LEFT DISPLAY CPU UTILIZATION?
         BNZ   KSRVSRCH          NO, PROCEED.
         LA    R15,BUFFER+(3*LL) YES, POINT TO FIRST RMF INTERVAL LINE.
         CR    R2,R15            CURRENTLY ON THIS LINE?
         BNE   KSRVSRCH          NO, SUBHEADING PROCESSING COMPLETE.
         L     R9,KLEFT+8        YES, GET THE LEFT DISPLAY LINE OFFSET.
         LA    R9,BUFFER+LL(R9)  POINT TO THE FIRST LEFT SUBHEADING.
         MVC   1(32,R9),KPGCPUHD OVERLAY THE CPU LEGEND WITH PGN DATA.
         MVC   19(4,R9),ED3
         ED    19(4,R9),WORK+6   SHOW THE PERFORMANCE GROUP NUMBER.
         TM    KLEFT+8,X'80'     IS CPU DISPLAY IN GRAPHIC MODE?
         BZ    KSRVSRCH          YES.
         MVC   1(32,R9),KPTCPUHD OVERLAY THE CPU HEADING FOR TABLE.
         MVC   20(4,R9),ED3
         ED    20(4,R9),WORK+6   SHOW THE PERFORMANCE GROUP NUMBER.
         MVC   LL+1(32,R9),KPTCP2HD   SUPPLY COLUMN HEADINGS.
         USING DGPRFGRP,R6
KSRVSRCH ICM   R6,15,DGPRFNXT    POINT TO NEXT PERFORMANCE GROUP ENTRY.
         BZ    KPGNNULL          THERE IS NONE.
         LR    R15,R6            COPY BASE SECTION ADDRESS.
         LA    R0,DGPRFLEN+DGPERLEN
         BAS   R14,R6ACCESS
         CLI   DGPRFPER+3,1      MORE THAN ONE PERIOD IN GROUP?
         BNH   KPPOKAY3          NO, HAVE RETRIEVED WHOLE GROUP'S DATA.
         LA    R14,DGPERLEN      GET A PERIOD ENTRY LENGTH.
         MH    R14,DGPRFPER+2    MULTIPLY BY THE PERIOD COUNT.
         LR    R6,R15            YES, RESTORE BASE SECTION ADDRESS.
         LA    R0,DGPRFLEN(,R14) GET TOTAL GROUP DATA LENGTH.
         BAS   R14,R6ACCESS
KPPOKAY3 C     R7,DGPRFNUM       FOUND RIGHT PERFORMANCE GROUP ENTRY?
         BE    KSRVFND           YES.
         B     KSRVSRCH          NO, CONTINUE SEARCH.
KPGNNULL L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         TM    8(R3),X'80'       IN GRAPHIC MODE?
         BOR   R14               NO, SO EXIT.
         B     KNULPLOT          PLOT THE GRAPH.
KSRVFND  TM    DGPRFFLG,X'02'    REPORT PERFORMANCE GROUP?
         BZ    KSRVPGNM          NO, GO SHOW PERFORMANCE GROUP NUMBER.
         MVC   1(3,R8),=C'RPG'   YES, INDICATE THIS IN SUB-HEADING.
KSRVPGNM LA    R15,BUFFER+(3*LL) POINT TO FIRST RMF INTERVAL LINE.
         CR    R2,R15            CURRENTLY ON THIS LINE?
         BNE   KSRVSBDN          NO, SUBHEADING PROCESSING COMPLETE.
         TM    DGPRFFLG,X'04'    ACCOUNTING INFORMATION USED?
         BZ    KSRVACOK          NO, NOT FOR THIS PERFORMANCE GROUP.
         MVI   9(R8),C'@'        YES, FLAG THIS.
KSRVACOK MVC   11(4,R8),DGPRFSYS LOAD PERFORMANCE GROUP SUBSYSTEM NAME.
         TR    11(4,R8),XLATETBL ENSURE NO UNPRINTABLES IN SUBSYSTEM.
         CLC   DGPRFNAM,BLANKS   TRANSACTION NAME SPECIFIED?
         BH    KSRVNAME          YES.
         CLC   DGPRFUSR,BLANKS   USER SPECIFIED?
         BH    KSRVUSER          YES.
         CLC   DGPRFCLS,BLANKS   TRANSACTION CLASS SPECIFIED?
         BNH   KSRVSBDN          NO, SUBHEADING NOW COMPLETE.
         MVC   17(6,R8),=CL6'CLASS='
         MVC   23(10,R8),DGPRFCLS
         B     KSRVSBOK
KSRVUSER MVC   17(6,R8),=CL6' USER='
         MVC   23(10,R8),DGPRFUSR
         B     KSRVSBOK
KSRVNAME MVC   17(6,R8),=CL6' NAME='
         MVC   23(10,R8),DGPRFNAM
KSRVSBOK TR    1(32,R8),XLATETBL ENSURE NO UNPRINTABLES IN SUBHEADING.
KSRVSBDN LR    R7,R3             COPY DISPLAY VECTOR ADDRESS.
         L     R3,DGPRFPER       GET NUMBER OF PERFORMANCE PERIODS.
         ST    R3,WORK2+4        SAVE IT.
         LA    R6,DGPERIOD       YES, POINT TO FIRST PERIOD SECTION.
         DROP  R6                DGPRFGRP.
         ST    R6,WORK2          SAVE ITS ADDRESS.
         USING DGPERIOD,R6
KSRVLOOP LR    R0,R3             GET THE PERIOD NUMBER.
         SLR   R9,R9             RESET ACCUMULATOR.
         L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.
KSRVPPLP A     R9,DGPERSRV       ACCUMULATE SERVICE UNITS PER SECOND.
         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.
         BCT   R0,KSRVPPLP
         C     R3,WORK2+4        IS THIS THE LAST PERFORMANCE PERIOD?
         BNE   KSRVPPOK          NO.
         CVD   R9,WORK           YES.
         SRP   WORK,64-2,0       DIVIDE BY 100 AND TRUNCATE.
         MVC   26(6,R1),ED5      SHOW PERFORMANCE GROUP SERVICE
         ED    26(6,R1),WORK+5   UNIT ABSORPTION RATE IN NUMERICS.
         TM    8(R7),X'80'       IN TABULAR DISPLAY MODE?
         BO    KTABLSRV          YES.
KSRVPPOK SLR   R8,R8
         D     R8,TENGRAND       SCALE FOR PLOTTING.
         LR    R15,R3            GET THE PERIOD NUMBER.
         IC    R15,KCPUCODE-1(R3) LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE TRANSACTION RESPONSE TIME.
         BCT   R3,KSRVLOOP       PROCESS NEXT PERFORMANCE PERIOD.
         B     KPGCPPLT          GO CHECK FOR EXTRA CPU DATA TO SHOW.
         SPACE
KTABLSRV DS    0H                PERFORM TABULAR PROCESSING.
         L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.
         L     R0,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.
         SLR   R9,R9             CLEAR PAGE-IN ACCUMULATOR.
KPPPAGLP A     R9,DGPERPIN       ACCUMULATE THE GROUP PAGE-IN RATE.
         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.
         BCT   R0,KPPPAGLP
         CVD   R9,WORK           SHOW THE GROUP TOTAL PAGE-IN RATE.
         SRP   WORK,64-1,5       DIVIDE BY 10 AND ROUND.
         MVC   100(7,R2),EDK4PNT1
         ED    100(7,R2),WORK+5  SHOW AS PAGE-INS PER SECOND.
         MVC   1(5,R1),102(R2)
         CLI   1(R1),C' '        LEADING BLANK STILL?
         BNE   KSPGRTOK          NO, CAN'T SHIFT LEFT W/O DATA LOSS.
         MVC   0(6,R1),1(R1)     YES, ENSURE BLANK BEFORE PP-1 DATUM.
KSPGRTOK L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.
         L     R0,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.
         CHI   R0,4              MORE THAN MAXIMUM SUPPORTED PERIODS?
         BNH   KSRVTBLP          NO.
         LA    R0,4              YES, REDUCE TO MAXIMUM SUPPORTED.
KSRVTBLP L     R9,DGPERSRV       GET PERIOD ABSORPTION RATE.
         CVD   R9,WORK
         SRP   WORK,64-2,0       DIVIDE BY 100 AND TRUNCATE.
         MVC   100(6,R2),ED5     SHOW PERFORMANCE GROUP PERIOD SERVICE
         ED    100(6,R2),WORK+5  UNIT ABSORPTION RATE IN NUMERICS.
         LA    R1,5(,R1)         POINT TO NEXT DISPLAY SLOT.
         MVC   1(5,R1),101(R2)
         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.
         BCT   R0,KSRVTBLP       PROCESS NEXT PERFORMANCE PERIOD.
         SPACE 2
KPGCPPLT L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         ICM   R0,7,KLEFT+1      IS THE LEFT DISPLAY CPU UTILIZATION?
         BNZR  R14               NO, DO NOT SHOW EXTRA CPU DATA.
         L     R1,KLEFT+8        LOAD DISPLAY LINE CPU OFFSET.
         ALR   R1,R2             POINT TO DISPLAY LINE CPU SLOT.
         L     R3,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.
         LR    R7,R14            SAVE RETURN ADDRESS.
KPGCPULP LTR   R0,R3             GET PERIODS TO COUNT IN THIS PLOT.
         BZR   R14               NO PERIODS SO RETURN.
         SLR   R9,R9             CLEAR CPU UTILIZATION ACCUMULATOR.
         L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.
KPPCPULP A     R9,DGPERCPU       LOAD THE PERF. PERIOD CPU UTILIZATION.
         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.
         BCT   R0,KPPCPULP
         TM    KLEFT+8,X'80'     IN TABULAR MODE?
         BO    KPPCPTAB          YES, JUST LOOP ONCE FOR P. G. TOTAL.
         SLR   R8,R8
         D     R8,DGCPUCNT       AVERAGE SERVICE ACROSS ALL CPUS.
         SLR   R8,R8
         D     R8,TEN            CONVERT TO INTEGRAL PERCENT.
         IC    R15,KCPUCODE-1(R3) NO, LOAD GRAPH DISPLAY CODE.
         BAS   R14,KNOWPLOT      PLOT THE PERF. GROUP CPU UTILIZATION.
         BCT   R3,KPGCPULP
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         BR    R14               CPU GRAPH PROCESSING NOW COMPLETE.
         SPACE
KPPCPTAB SLR   R8,R8
         D     R8,DGCPUCNT       AVERAGE SERVICE ACROSS ALL CPUS.
         CVD   R9,WORK
         MVC   20(5,R1),ED2PNT1
         ED    20(5,R1),WORK+6   SHOW PERF. GROUP CPU TOTAL USAGE.
         L     R0,WORK2+4        GET NUMBER OF PERFORMANCE PERIODS.
         L     R6,WORK2          POINT TO THE FIRST PERIOD SECTION.
         CHI   R0,4              MORE THAN MAXIMUM COLUMNS?
         BNH   KPPCPUTB          NO.
         LA    R0,4              YES, LIMIT TO MAXIMUM.
KPPCPUTB L     R9,DGPERCPU       GET CPU UTLIZATION OF THIS PERIOD.
         SLR   R8,R8
         D     R8,DGCPUCNT       AVERAGE SERVICE ACROSS ALL CPUS.
         CVD   R9,WORK
         MVC   0(5,R1),ED2PNT1
         ED    0(5,R1),WORK+6    SHOW PERFORMANCE PERIOD CPU UTIL.
         LA    R6,DGPERLEN(,R6)  POINT TO THE NEXT PERIOD SECTION.
         LA    R1,5(,R1)         POINT TO THE NEXT DISPLAY COLUMN.
         BCT   R0,KPPCPUTB       PROCESS NEXT PERIOD.
         MVI   LL-66(R2),X'3B'   RESTORE CPU DISPLAY AREA SEPARATION.
         L     R14,KSAVER14      RESTORE RETURN ADDRESS.
         BR    R14               PROCESSING NOW COMPLETE.
         DROP  R10,R6            KDISPTRT, DGPERIOD.
         SPACE
KPGCPUHD DS    0CL32
         DC    C'CPU UTIL- ',X'04030601',C'=PGN ___ '
         DC    X'0507',C'=OTHER '
KPTCPUHD DC    CL32' CPU USAGE WITH PGN ___ DETAILS '
KPTCP2HD DC    CL32'PP-1 PP-2 PP-3 PP-4 P.G.  TOTAL '
KCPUCODE DC    XL8'0403060101010101'    8 PERIODS IS MAXIMUM ALLOWED.
         LTORG
         SPACE
         DROP  R4,R5             DGSYSTEM, DGRMFINT.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - SMF ITEM DATA LIST'
         USING KSMFITEM,R10
         USING DGBASE,R4
KSMFITEM DS    0H                SELECT SMF CATEGORY TO DISPLAY.
         CLI   KSHOWSYS+2,C'D'   SHOWING DATA SET DATA?
         BE    KDSNITEM          YES.
         CLI   KSHOWSYS+2,C'S'   SHOWING STEP END DATA?
         BE    KPGMITEM          YES.
         CLI   KSHOWSYS+2,C'J'   SHOWING JOB STEP DATA?
         BE    KJOBITEM          YES.
KNOOITEM MVI   INBUFF+2,0        AVOID ZOOM-IN RECURSION.
         B     KLISTSYS          LIST SELECTABLE SYSTEMS/SMF EVENTS.
         SPACE
KDSNITEM ICM   R0,15,DGNUMDSN    ANY DATA SETS IN LIST?
         BZ    KNOOITEM          NO, DISPLAY SELECTION LIST.
         L     R10,KSHODADR      YES, POINT TO ROUTINE ENTRY POINT.
         BR    R10               INVOKE ROUTINE.
KPGMITEM ICM   R0,15,DGNUMPGM    ANY PROGRAMS IN LIST?
         BZ    KNOOITEM          NO, DISPLAY SELECTION LIST.
         L     R10,KSHOSADR      YES, POINT TO ROUTINE ENTRY POINT.
         BR    R10               INVOKE ROUTINE.
KJOBITEM ICM   R0,15,DGNUMJOB    ANY JOB NAMES IN LIST?
         BZ    KNOOITEM          NO, DISPLAY SELECTION LIST.
         L     R10,KSHOSADR      YES, POINT TO ROUTINE ENTRY POINT.
         BR    R10               INVOKE ROUTINE.
         SPACE
         DROP  R10               KSMFITEM.
         SPACE
KSHODADR DC    A(KDISPDSN)
KSHOSADR DC    A(KDISPPGM)
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - DATA SET NAME LIST'
         USING KDISPDSN,R10
KDISPDSN DS    0H                DISPLAY DATA SET NAME LIST.
         MVC   HEADING,HEADNGKD  INITIALIZE HEADING.
         MVI   KHDGCNT+1,1       UPDATE HEADING LINE COUNT.
         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'S'.
         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.
         LA    R2,BUFFER         INITIALIZE BUFFER POINTER.
         LA    R0,DGDSNLEN       GET DATA SET NAME ENTRY LENGTH.
         CLI   KLOCNAME,0        ANY DATA SET NAME/PREFIX TO LOCATE?
         BE    KDNOPREF          NO.
         LA    R5,DGFSTDSN       POINT TO THE FIRST/LAST DSN POINTERS.
         USING DGDATAST,R5
         CLI   KLOCNAME,C'M'     DSNAME CLOSER TO END OF CHARACTER SET?
         BH    KDBLOCLP          YES, SEARCH BACKWARD FROM END OF LIST.
KDFLOCLP ICM   R5,15,DGDSNNXT    POINT TO THE NEXT DSNAME ENTRY.
         BZ    KDLOCBTM          END OF FORWARD CHAIN SO GO DOWN MAX.
         ST    R5,KITEMADR       THIS MAY BE THE NEW TOP OF SCREEN.
         BAS   R14,R5ACCESS
         CLC   DGDSNAME,KLOCNAME LOCATED THE REQUESTED NAME?
         BL    KDFLOCLP          NO, CONTINUE SEARCH.
         BE    KDLOCDIT          YES, EXACT MATCH SO SHOW IT.
*        B     KDBLOCLP   (BH)   YES, BUT PAST IT SO BACK UP.
KDBLOCLP ICM   R5,15,DGDSNPRV    POINT TO THE PREVIOUS DSNAME ENTRY.
         BZ    KDLOCTOP          BACKWARD CHAIN END SO SHOW FROM TOP.
         ST    R5,KITEMADR       THIS IS THE NEW TOP OF SCREEN.
         BAS   R14,R5ACCESS
         CLC   DGDSNAME,KLOCNAME LOCATED THE REQUESTED NAME?
         BH    KDBLOCLP          NO, CONTINUE SEARCH.
KDLOCDIT XC    KLOCNAME,KLOCNAME CLEAR THE DATA SET NAME INPUT AREA.
         B     KDSHOWIT          NOW AT THE CORRECT LOCATION.
KDNOPREF ICM   R5,15,KITEMADR    POINT TO FIRST DATA SET TO DISPLAY.
         BZ    KDSHOTOP          IF ZERO THEN SHOW FROM THE TOP.
         BAS   R14,R5ACCESS
         CLC   KSHOWITM,BLANKS   SHOWING SPECIFIC EVENTS?
         BNE   KDISPDSE          YES, SHOW EVENTS OF A DATA SET.
         CLI   KSCRLAMT,X'7F'    NO, BOTTOM RQUESTED?
         BE    KDSHOBTM          YES, DIRECTLY ACCESS THE BOTTOM.
         ICM   R1,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.
         BZ    KDZMCHEK          ZERO SO CHECK FOR ZOOM REQUEST.
         BP    KDFWRDLP          POSITIVE SO SCROLL FORWARD.
         LPR   R1,R1             NEGATIVE SO GET COUNT TO SCROLL BACK.
KDBKWDLP ICM   R5,15,DGDSNPRV    POINT TO THE PREVIOUS DSNAME ENTRY.
         BZ    KDSHOTOP          BACKWARD CHAIN END SO SHOW FROM TOP.
         ST    R5,KITEMADR       THIS MAY BE THE NEW TOP OF SCREEN.
         BAS   R14,R5ACCESS
         BCT   R1,KDBKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KDSHOWIT          NOW AT THE CORRECT LOCATION.
KDLOCBTM XC    KLOCNAME,KLOCNAME CLEAR THE DATA SET NAME INPUT AREA.
KDSHOBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.
         L     R5,DGLSTDSN       POINT TO THE LAST DATA SET NAME.
         BAS   R14,R5ACCESS
         L     R1,LINES          GET THE SCREEN LINE COUNT.
         AHI   R1,-3             GET THE SCROLL UP VALUE.
         B     KDBKWDLP          GO DO IT.
KDZMCHEK CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?
         BE    KDGDSNLP          YES, DO NOT PERFORM SELECTION.
         SLR   R1,R1             CLEAR FOR INSERT.
         ICM   R1,1,INBUFF+1     GET THE CURSOR RELATIVE LINE NUMBER.
         BNP   KDGDSNLP          ZERO, SO JUST SHOW DATA SET NAME LIST.
         B     KDZOOMNX          ZOOM IN ON CORRECT DATA SET NAME.
KDZOOMLP ICM   R5,15,DGDSNNXT    POINT TO THE NEXT DATA SET NAME ENTRY.
         BZ    KDSHOBTM          HANDLE END OF CHAIN IF ENCOUNTERED.
         ST    R5,KITEMADR       THIS MAY BE THE SELECTED DATA SET.
         BAS   R14,R5ACCESS
KDZOOMNX BCT   R1,KDZOOMLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         MVC   KSHOWITM,DGDSNAME COPY THE SELECTED DATA SET NAME.
         B     KDISPDSE          GO SHOW EVENTS OF THIS DATA SET.
KDFWRDLP ICM   R5,15,DGDSNNXT    POINT TO THE NEXT DATA SET NAME ENTRY.
         BZ    KDSHOTOP          HANDLE END OF CHAIN IF ENCOUNTERED.
         ST    R5,KITEMADR       THIS MAY BE THE NEW TOP OF SCREEN.
         BAS   R14,R5ACCESS
         BCT   R1,KDFWRDLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KDSHOWIT          GET FORMATTING.
KDLOCTOP XC    KLOCNAME,KLOCNAME CLEAR THE DATA SET NAME INPUT AREA.
KDSHOTOP ST    R5,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?
         BE    KDSHOBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.
         L     R5,DGFSTDSN       POINT TO THE FIRST DSNAME ENTRY.
         ST    R5,KITEMADR       THIS IS THE NEW TOP OF SCREEN.
         BAS   R14,R5ACCESS
KDSHOWIT SLR   R0,R0
         ST    R0,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         ST    R0,KEVNTADR       CLEAR THE EVENT ENTRY POINTER.
         MVC   KSHOWITM,BLANKS   RESET SELECTED DATA SET NAME.
KDGDSNLP MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-78(44,R2),DGDSNAME  DISPLAY THE DATA SET NAME.
         L     R0,DGDSNDS#       LOAD THE DATA SET EVENT COUNT.
         CVD   R0,WORK           SHOW THE DATA SET EVENT COUNT.
         MVC   LL-34(12,R2),ED11
         ED    LL-34(12,R2),WORK+2
         MVC   LL-21(17,R2),=CL17'DATA SET EVENT(S)'
         TR    LL-79(79,R2),XLATETBL    ENSURE NO UNPRINTABLES.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         C     R2,PAGEND         IS THE SCREEN NOW FILLED?
         BNL   KEODGDAT          YES, SO SHOW IT.
         ICM   R5,15,DGDSNNXT    POINT TO THE NEXT DATA SET NAME ENTRY.
         BZ    KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.
         LA    R0,DGDSNLEN
         BAS   R14,R5ACCESS
         B     KDGDSNLP          PROCESS IT.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - DATA SET EVENT LIST'
KDISPDSE DS    0H                DISPLAY DATA SET EVENT LIST.
         MVI   ENDDEPTH+1,2      MAKE PF3/15 SHOW DATA SET NAME LIST.
         CLI   INBUFF,10         LEFT/RIGHT SCROLL REQUEST?
         BL    KELROKAY          NO.
         CLI   INBUFF,11
         BH    KELROKAY          NO.
         ICM   R0,15,SCRLAMT     ANY SCROLL AMOUNT SPECIFIED?
         BNZ   KELRAMOK          YES, USE IT.
         LA    R0,79             NO, DEFAULT TO A PAGE.
         CLI   INCHARS+1,C'0'    SINGLE NUMERIC OPERAND OF '<' OR '>'?
         BL    KELRAMOK          NO, A PAGE IT IS.
         NI    INCHARS+1,X'0F'   YES, CONVERT IT TO BINARY.
         IC    R0,INCHARS+1      LOAD IT.
KELRAMOK CLI   INBUFF,10         SCROLL LEFT?
         BNE   KEDIRNOK          NO.
         LNR   R0,R0             YES, MAKE THE NUMBER NEGATIVE.
KEDIRNOK AH    R0,KESCROLL       GET THE NEW HORIZONTAL OFFSET.
         BM    KELRZERO          IF NEGATIVE FORCE LEFT MAXIMUM.
         STH   R0,KESCROLL       SAVE THE NEW HORIZONTAL OFFSET.
         CH    R0,KDSEMAXR       TOO FAR RIGHT?
         BNH   KELROKAY          NO.
         MVC   KESCROLL,KDSEMAXR YES, PERFORM RIGHT MAX.
         B     KELROKAY
KELRZERO XC    KESCROLL,KESCROLL ZERO THE OFFSET FOR LEFT MAX.
KELROKAY CLC   DGDSNAME,KSHOWITM ALREADY POSITIONED AT THE DATA SET?
         BE    KDSELIST          YES.
         LA    R0,DGDSNLEN       NO, POSITION TO THAT DATA SET NAME.
         LA    R5,DGFSTDSN       POINT TO FIRST DSNAME ENTRY ADDRESS.
KEPOSILP ICM   R5,15,DGDSNNXT    POINT TO THE DATA SET NAME ENTRY.
         BZ    KDLOCTOP          HANDLE END OF CHAIN IF ENCOUNTERED.
         ST    R5,KITEMADR       THIS MAY BE THE SELECTED DATA SET.
         BAS   R14,R5ACCESS
         CLC   DGDSNAME,KSHOWITM FOUND THE DATA SET NAME?
         BNE   KEPOSILP          NO, CONTINUE CHAINING.
         SLR   R0,R0
         ST    R0,KEVNTADR       YES, DROP ANY RETAINED DSE ADDRESS.
KDSELIST MVC   HEADING,HEADNGKE  INITIALIZE HEADING.
         MVC   HEADING+12(44),KSHOWITM      SUPPLY DATA SET NAME.
         LH    R1,KESCROLL       GET LEFT/RIGHT SCROLL OFFSET.
         LA    R1,1(,R1)         SHOW LEFT-MOST COLUMN NUMBER.
         CVD   R1,WORK
         OI    WORK+7,X'0F'
         UNPK  HEADING+63(3),WORK+6(2)
         LA    R1,78(,R1)        SHOW RIGHT-MOST COLUMN NUMBER.
         CVD   R1,WORK
         OI    WORK+7,X'0F'
         UNPK  HEADING+67(3),WORK+6(2)
         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.
         LA    R2,BUFFER         INITIALIZE BUFFER POINTER.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)
         MVI   LL-80(R2),X'F5'   TURQUOISE.                     (I3279)
         MVI   KHDGCNT+1,2       UPDATE HEADING LINE COUNT.
         ICM   R6,15,KEVNTADR    POINT TO FIRST EVENT TO DISPLAY.
         BZ    KESHOTOP          IF ZERO THEN SHOW FROM THE TOP.
         LA    R0,DGDSEL14
         BAS   R14,R6ACCESS
         USING DGDSEVNT,R6
         CLI   KSCRLAMT,X'7F'    BOTTOM REQUESTED?
         BE    KESHOBTM          YES, DIRECTLY ACCESS THE BOTTOM.
         ICM   R8,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.
         BZ    KESHOWIT          ZERO SO START FORMATTING.
         BP    KEFWRDLP          POSITIVE SO SCROLL FORWARD.
         LPR   R8,R8             NEGATIVE SO GET COUNT TO SCROLL BACK.
KEBKWDLP ICM   R6,15,DGDSEDSP    POINT TO THE PREVIOUS EVENT ENTRY.
         BZ    KESHOTOP          BACKWARD CHAIN END SO SHOW FROM TOP.
         ST    R6,KEVNTADR       THIS MAY BE THE NEW TOP OF SCREEN.
         LA    R0,DGDSEL14
         BAS   R14,R6ACCESS
KEBKWDJB CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KEBKWDOK          NO, CONTINUE.
         MVC   KEJOB,DGDSEJOB    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KEJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KEBKWDLP          IF NOT EQUAL THEN GO AWAY.
KEBKWDOK BCT   R8,KEBKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KESHOWIT          NOW AT THE CORRECT LOCATION.
KESHOBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.
         L     R6,DGDSNDSL       POINT TO THE LAST DATA SET EVENT.
         LA    R0,DGDSEL17
         BAS   R14,R6ACCESS
         L     R8,LINES          GET THE SCREEN LINE COUNT.
         AHI   R8,-4             GET THE SCROLL UP VALUE.
         B     KEBKWDJB          GO DO IT.
KEFWRDLP ICM   R6,15,DGDSEDSN    POINT TO THE NEXT EVENT ENTRY.
         BZ    KESHOTOP          HANDLE END OF CHAIN IF ENCOUNTERED.
         ST    R6,KEVNTADR       THIS MAY BE THE NEW TOP OF SCREEN.
         LA    R0,DGDSEL14
         BAS   R14,R6ACCESS
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KEFWRDOK          NO, CONTINUE.
         MVC   KEJOB,DGDSEJOB    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KEJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KEFWRDLP          IF NOT EQUAL THEN GO AWAY.
KEFWRDOK BCT   R8,KEFWRDLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KESHOWIT          GET FORMATTING.
KESHOTOP ST    R6,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?
         BE    KESHOBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.
         L     R6,DGDSNDSF       POINT TO THE FIRST DSNAME EVENT ENTRY.
         ST    R6,KEVNTADR       THIS IS THE NEW TOP OF SCREEN.
KESHOWIT SLR   R0,R0
         ST    R0,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         SLR   R6,R6             INDICATE FIRST ADDRESS NEEDED.
         MVC   KDSELINE(KDSELEN),KESUBHDG
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KELINEOK          NO, DISPLAY SUB-HEADING.
         MVC   KEJOB,STARS       YES, SHOW JOB NAME MASK.
         LH    R1,JPRFXLEN       GET PREFIX LENGTH.
         BCTR  R1,0              DECREMENT FOR EXECUTE.
         EX    R1,KESLDMSK       LOAD THE PREFIX INTO THE COLUMN HDR.
         B     KELINEOK          DISPLAY SUB-HEADING.
KEGDSELP LA    R0,DGDSEL14
         BAS   R14,R6ACCESS
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KEGDSEOK          NO, CONTINUE.
         MVC   KEJOB,DGDSEJOB    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KEJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KEGOTDSE          IF NOT EQUAL THEN GO AWAY.
KEGDSEOK MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   KDSELINE,C' '     BLANK DISPLAY LINE FORMATTING AREA.
         MVC   KDSELINE+1(KDSELEN-1),KDSELINE
         TM    KFLAGS,KDATEFMT   NO, USING YYMMDD DATE FORMAT?
         BO    KEDSEYMD          YES.
         MVC   WORK(9),EDKYYDDD  NO, SHOW THE JULIAN DATE.
         ED    WORK(9),DGDSEDAT  DISPLAY THE DATE OF THE SMF EVENT.
         MVC   KEDATE,WORK+3
         B     KDSEDTOK
KEDSEYMD L     R1,DGDSEDAT       GET THE SMF EVENT JULIAN DATE.
         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.
         BASR  R14,R7            CONVERT THE JULIAN DATE.
         MVC   KEDATE(2),WORK    LOAD YY
         MVC   KEDATE+2(2),WORK+3 AND MM
         MVC   KEDATE+4(2),WORK+6 AND DD.
KDSEDTOK UNPK  KETIME(3),DGDSETIM(2)
         UNPK  KETIME+3(3),DGDSETIM+1(2)
         TR    KETIME,HEX-C'0'
         MVI   KETIME+2,C':'     DISPLAY THE TIME OF THE SMF EVENT.
         MVC   KESID,DGDSESID    SHOW SYSTEM IDENTIFIER.
         MVC   KEJOB,DGDSEJOB    SHOW JOB NAME.
         MVC   KEUSR,DGDSEUSR    SHOW USERID.
         CLI   DGDSETYP,14       EVENT TYPE 14?
         BE    KE14              YES.
         CLI   DGDSETYP,15       EVENT TYPE 15?
         BE    KE15              YES.
         CLI   DGDSETYP,17       EVENT TYPE 17?
         BE    KE17              YES.
         CLI   DGDSETYP,18       EVENT TYPE 18?
         BE    KE18              YES.
         CLI   DGDSETYP,61       EVENT TYPE 61?
         BE    KE61              YES.
         CLI   DGDSETYP,62       EVENT TYPE 62?
         BE    KE62              YES.
         CLI   DGDSETYP,64       EVENT TYPE 64?
         BE    KE64              YES.
         CLI   DGDSETYP,65       EVENT TYPE 65?
         BE    KE65              YES.
         CLI   DGDSETYP,66       EVENT TYPE 66?
         BE    KE66              YES.
         CLI   DGDSETYP,128      HSM EVENT TYPE?
         BH    KEHF              YES.
KEUNKN   MVC   KEVENT(4),=C'UNKN'
         SLR   R0,R0
         IC    R0,DGDSETYP       SHOW UNKNOWN EVENT TYPE CODE.
         CVD   R0,WORK
         OI    WORK+7,X'0F'
         UNPK  KEVENT+4(3),WORK+6(2)
         B     KELINEOK
KE64     MVC   KEVENT,=C'NOSPACE'    SHOW EVENT TYPE.
         MVI   4(R2),X'F8'       USE HIGH INTENSITY FOR NO-SPACE.
         MVI   LL-80(R2),X'F2'   USE RED FOR NO-SPACE.          (I3279)
         TM    DGDSERIN,X'20'    NO SPACE AVAILABLE?
         BO    KECLOSOK          YES.
         MVI   4(R2),X'F0'       USE LOW INTENSITY FOR VSAM OPEN.
         MVI   LL-80(R2),X'F6'   USE YELLOW FOR VSAM OPEN.      (I3279)
         MVC   KEVENT,BLANKS     NO.
         MVI   KEVENT+6,C'V'     INDICATE VSAM ACCESS.
         TM    DGDSERIN,X'08'    CLOSE, TYPE=T?
         BZ    KE141564          NO.
         MVI   KEVENT+6,C'T'     YES.
         B     KE141564
KE14     MVI   KEVENT+6,C'I'     INDICATE INPUT ONLY.
         MVI   LL-80(R2),X'F4'   USE GREEN FOR READ-ONLY.       (I3279)
         B     KE141564
KE15     MVI   KEVENT+6,C'O'     INDICATE OUTPUT PROBABLE.
         MVI   LL-80(R2),X'F6'   USE YELLOW FOR OUTPUT-ALLOWED. (I3279)
KE141564 MVC   KEVENT(6),=C'CLOSE/' SHOW EVENT TYPE.
         SLR   R7,R7             CLEAR OPTIONAL SERVICE CODES POINTER.
         TM    DGDSERIN,X'40'    RECORD FROM END-OF-VOLUME?
         BZ    KECLOSOK          NO.
         MVC   KEVENT(5),=C'E-O-V' YES.
KECLOSOK MVC   KDDN,DGDSEDDN     SHOW DATA DEFINITION NAME.
         L     R0,DGDSEXCP
         CVD   R0,WORK           SHOW THE TOTAL EXCP COUNT.
         MVC   KEXCPS,ED11
         ED    KEXCPS,WORK+2
         SLR   R0,R0
         ICM   R0,B'0011',DGDSEBLK
         CVD   R0,WORK           SHOW THE BLOCK SIZE.
         MVC   KBLKSI,ED5Z
         ED    KBLKSI,WORK+5
         ICM   R0,B'0011',DGDSELRL
         CVD   R0,WORK           SHOW THE LOGICAL RECORD LENGTH.
         MVC   KLRECL,ED5Z
         ED    KLRECL,WORK+5
         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.
         CLI   DGDSETYP,64       VSAM ACCESS?
         BNE   KENVSAM           NO.
         MVC   KAM,=C'VSAM'      YES.
         ICM   R0,B'0011',DGDSEKEY
         CVD   R0,WORK           SHOW THE KEY LENGTH.
         MVC   KKEYLE,ED5Z
         ED    KKEYLE,WORK+5
         IC    R1,DGDSEDMF       GET ACBMACR1 FLAGS.
         SLL   R1,29             SHIFT OUT UNWANTED FLAGS.
         SRL   R1,30             GET GET/PUT READ/WRITE FLAGS.
         SLA   R1,3              MULTIPLY BY EIGHT FOR INDEX.
         BZ    KEOPENOK          BOTH FLAGS OFF SO LEAVE BLANK.
         LA    R1,KVOPNTYP-8(R1) POINT TO OPEN TYPE LITERAL.
         MVC   KOPEN,0(R1)       SHOW THE OPEN TYPE.
         CLI   KOPEN+1,C'I'      OPENED FOR INPUT?
         BNE   KEOPENOK          NO.
         MVI   LL-80(R2),X'F4'   YES, USE GREEN FOR READ-ONLY.  (I3279)
         B     KEOPENOK
KEHF     CLI   DGDSETYP,128+14   HSM EVENT TYPE?
         BH    KEUNKN            NO.
         MVC   WORK(1),DGDSETYP  YES, GET ENTRY CODE.
         NI    WORK,X'7F'        CONVERT TO HSM FUNCTION CODE.
         SLR   R1,R1             CLEAR FOR INSERT.
         IC    R1,WORK           LOAD THE HSM FUNCTION CODE.
         SLL   R1,3              MULTIPLY BY EIGHT FOR INDEX.
         LA    R1,HSMFNCTN-8(R1) POINT TO HSM FUNCTION NAME.
         MVC   KEVENT,1(R1)      SHOW THE HSM FUNCTION NAME.
         L     R0,DGDSEXCP
         CVD   R0,WORK           SHOW THE DATA SET AGE IN DAYS.
         MVC   KEXCPS,ED11
         ED    KEXCPS,WORK+2
         MVC   KEXCPS+2(5),=C'AGE ='
         MVC   LL-80(1,R2),0(R1) LOAD THE COLOUR CODE.          (I3279)
         CLI   0(R1),X'F3'       PINK?
         BH    KHFVSTST          NO, GREEN OR TURQUOISE SO LOW IS OKAY.
         MVI   4(R2),X'F8'       MAKE LINE HIGH INTENSITY.
         BL    KEOPENOK          NO, RED SO HIGH IS OKAY.
         MVI   4(R2),X'F4'       YES, SO MAKE IT "MEDIUM" INTENSITY.
KHFVSTST MVC   KAM,=C'VSAM'      PREPARE FOR VSAM.
         TM    DGDSEDCO+1,X'08'  VSAM DATA SET?
         BO    AM1415OK          YES, MESSAGE IS CORRECT.
KENVSAM  SLR   R0,R0
         IC    R0,DGDSEKEY
         CVD   R0,WORK           SHOW THE KEY LENGTH.
         MVC   KKEYLE,ED5Z
         ED    KKEYLE,WORK+5
         MVC   KEMCN,DGDSEMCN    SHOW SMS MANAGEMENT CLASS NAME.
         MVC   KEDCN,DGDSEDCN    SHOW SMS DATA CLASS NAME.
         MVC   KESCN,DGDSESCN    SHOW SMS STORAGE CLASS NAME.
         MVC   KESTP,DGDSESTP    SHOW STEP NAME.
         MVC   KEPGM,DGDSEPGM    SHOW ACTIVE PROGRAM NAME.
         LA    R8,KEDRFTYP       ASSUME DISK DATA SET.
         TM    DGDSERIN,X'20'    DASD DATA SET?
         BO    KERTYPOK          YES, GOOD GUESS.
         LA    R8,KETRFTYP       NO, MUST BE A TAPE DATA SET.
KERTYPOK LA    R9,KRECFM         POINT TO RECFM DISPLAY AREA.
         LA    R0,8              EIGHT BITS TO CHECK.
         ICM   R1,8,DGDSERFM     LOAD THE RECORD FORMAT FLAG BYTE.
         TM    DGDSERFM,X'C0'    UNDEFINED RECORD FORMAT?
         BNO   KERCFMLP          NO, PROCEED.
         MVI   0(R9),C'U'        YES, INDICATE THIS.
         SLL   R1,2              TWO BITS ALREADY CHECKED.
         LA    R0,6              ONLY SIX BITS LEFT TO CHECK.
         B     KERECFMU          PROCEED.
KERCFMLP LTR   R1,R1             IS TOP BIT ON?
         BNM   KERFMNXT          NO.
         MVC   0(1,R9),0(R8)     YES, LOAD INDICATOR.
KERECFMU LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.
KERFMNXT LA    R8,1(,R8)         ADVANCE INDICATOR POINTER.
         SLL   R1,1              PROMOTE NEXT BIT.
         BCT   R0,KERCFMLP       GO TEST NEXT BIT.
         MVC   KAM,=C'EXCP'
         TM    DGDSEDMF,X'80'    EXCP PROCESSING USED?
         BNZ   AM1415OK          YES, MESSAGE IS CORRECT.
         TM    DGDSEDCO,X'E2'    IS, PS, DA OR PO?
         BZ    AM1415OK          NO, JUST SAY EXCP.
         LA    R7,OPTIONIS       POINT TO ISAM OPTION CODES.
         MVC   KAM,=C'ISAM'
         TM    DGDSEDCO,X'80'    DCBDSORG=IS?
         BO    AM1415OK          YES.
         LA    R7,OPTIONDA       POINT TO BDAM OPTION CODES.
         LA    R8,DAMMACRF       POINT TO MACRO FORM INDICATOR FLAGS.
         MVC   KAM,=C'BDAM'
         TM    DGDSEDCO,X'20'    DCBDSORG=DA?
         BO    KESHOMAC          YES.
         LA    R7,OPTIONPS       POINT TO SAM/PAM OPTION CODES.
         LA    R8,SAMMACRF       POINT TO MACRO FORM INDICATOR FLAGS.
         MVC   KAM,=C'BPAM'
         TM    DGDSEDCO,X'02'    DCBDSORG=PO?
         BO    KESHOMAC          YES.
         MVC   KAM,=C'BSAM'
         MVC   WORK(2),DGDSEDMF  COPY DCBMACRF.
         LA    R1,WORK           POINT TO IT.
         LA    R0,2              TWO BYTES TO TEST (INPUT AND OUTPUT).
MACR14LP TM    0(R1),X'60'       TEST BASIC AND QUEUED BITS.
         BM    KEQSTEST          DIFFERENT SO SEE WHICH TYPE.
         LA    R1,1(,R1)         POINT TO NEXT BYTE.
         BCT   R0,MACR14LP
         B     AM1415OK          SHOULD NOT HAPPEN BUT LEAVE AS BSAM.
KEQSTEST TM    0(R1),X'40'       IS THE QUEUED BIT ON?
         BZ    KESHOMAC          NO, SO THE BASIC BIT IS ON.
         MVC   KAM,=C'QSAM'
KESHOMAC CLI   DGDSEVOL+7,C' '   FIRST OR ONLY VOLUME?
         BH    AM1415OK          NO, DO NOT SHOW MACRO FORM.
         ICM   R1,12,DGDSEDMF    LOAD ALL OF DCBMACRF.
         BZ    AM1415OK          NO BITS ON SO DO NOT SHOW MACRO FORM.
         MVC   KVOL3,=C'MACRF='  SHOW MACRO FORM OF DCB.
         LA    R9,KVOL3+6        POINT TO OUTPUT AREA.
         MVI   0(R9),C'('
         LA    R0,8              8 INPUT BITS TO TEST.
         ALR   R8,R0             POINT TO OUTPUT BITS.
         ICM   R1,8,DGDSEDMF+1   LOAD THE OUTPUT-RELATED BYTE.
         TM    DGDSEDMF,X'60'    GET OR READ?
         BZ    KEMACOLP          NO, MUST BE OUTPUT ONLY.
         ICM   R1,12,DGDSEDMF    YES, LOAD ALL OF DCBMACRF.
         SLR   R8,R0             POINT TO BACK TO INPUT BITS.
KEMACILP LTR   R1,R1             TOP BIT ON?
         BNM   KENXTIBT          NO.
         MVC   1(1,R9),0(R8)     YES, LOAD INDICATOR FLAG.
         LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.
KENXTIBT LA    R8,1(,R8)         ADVANCE INDICATOR POINTER.
         SLL   R1,1              PROMOTE NEXT BIT.
         BCT   R0,KEMACILP       GO TEST NEXT BIT.
         MVI   1(R9),C')'        ASSUME INPUT-ONLY OPERATION.
         TM    DGDSEDMF+1,X'60'  PUT OR WRITE?
         BZ    AM1415OK          NO, ASSUMPTION CORRECT.
         MVI   1(R9),C','        YES, SUPPLY COMMA.
         LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.
         LA    R0,8              8 OUTPUT BITS TO TEST.
KEMACOLP LTR   R1,R1             TOP BIT ON?
         BNM   KENXTOBT          NO.
         MVC   1(1,R9),0(R8)     YES, LOAD INDICATOR FLAG.
         LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.
KENXTOBT LA    R8,1(,R8)         ADVANCE INDICATOR POINTER.
         SLL   R1,1              PROMOTE NEXT BIT.
         BCT   R0,KEMACOLP       GO TEST NEXT BIT.
         MVI   1(R9),C')'        END OF MACRO FORM VALUE.
         TM    DGDSERIN,X'01'    VIO DATA SET?
         BO    AM1415OK          YES, UNBLOCKED IS ACCEPTABLE.
         CLI   DGDSEKEY,0        KEYED FILE?
         BNE   AM1415OK          YES, UNBLOCKED MAY BE NECESSARY.
         TM    DGDSERFM,X'C0'    FIXED OR VARIABLE LENGTH RECORDS?
         BNM   AM1415OK          NO.
         TM    DGDSERFM,X'10'    BLOCKING PERMITTED?
**       BZ    KEUNBLKD          NO, GO HIGHLIGHT THIS.
         BZ    AM1415OK          NO, UNBLOCKED MAY BE NECESSARY.
         CLC   DGDSELRL,DGDSEBLK LRECL=BLKSIZE?
         BE    KEUNBLKD          YES, MUST BE (FIXED LENGTH) UNBLOCKED.
         TM    DGDSERFM,X'40'    VARIABLE LENGTH RECORDS?
         BZ    AM1415OK          NO, MUST BE FIXED BLOCKED.
         TM    DGDSERFM,X'08'    VARIABLE SPANNED?
         BO    AM1415OK          YES, BLOCKS PROBABLY FILLED.
         CLC   =C'PL',KVOL4      QSAM PUT LOCATE MODE FOR OUTPUT?
         BNE   AM1415OK          NO, CAN HAVE FULL LENGTH BLOCKS.
         LH    R1,DGDSELRL       GET THE LOGICAL RECORD LENGTH.
         LTR   R1,R1             FUNNY LRECL?
         BNP   AM1415OK          YES, IGNORE.
         SLL   R1,1              DOUBLE IT.
         LA    R1,4(,R1)         ADD FOUR FOR BDW.
         CH    R1,DGDSEBLK       MORE THAN BLOCK SIZE?
         BNH   AM1415OK          NO.
KEUNBLKD MVI   2(R2),X'F2'       REVERSE VIDEO FOR UNBLOCKED.   (I3279)
         MVI   5(R2),X'50'       REVERSE VIDEO FOR UNBLOCKED.   (F9526)
         MVC   KKEYLE+1(5),=C'UNBLK'
AM1415OK BAS   R14,KEOPTCDS      DISPLAY ANY OPTIONAL SERVICE FLAGS.
         IC    R1,DGDSEEOP       NO, GET DEBOPATB I/O METHOD FLAGS.
         SLL   R1,28             SHIFT OUT DISPOSITION FLAGS.
         SRL   R1,28-3           MULTIPLY BY EIGHT FOR INDEX.
         LA    R1,KOPNTYPE(R1)   POINT TO OPEN TYPE LITERAL.
         MVC   KOPEN,0(R1)       SHOW THE OPEN TYPE.
KEOPENOK MVC   KMEM,DGDSEMEM
         ICM   R0,3,DGDSEDEV     ANY NON-ZERO UNIT?
         BZ    KCUAOKAY          NO.
         UNPK  KUNIT(5),DGDSEDEV(3)
         TR    KUNIT,HEX-C'0'
         CLI   KUNIT,C'0'        LEADING ZERO?
         BNE   KCUAOKAY          NO.
         MVI   KUNIT,C' '        YES, SUPPRESS IT.
KCUAOKAY MVC   KVOL,DGDSEUCV     SHOW UCB VOLUME SERIAL NUMBER.
         CLI   DGDSETYP,64       VSAM DATA SET?
         BE    KENVSDSK          YES, CANNOT BE TAPE.
         BH    KEHSMDSK          HSM FUNCTION EVENT.
         TM    DGDSERIN,X'20'    DASD DATA SET?
         BO    KENVSDSK          YES.
         ICM   R0,B'0011',DGDSEFSC
         CVD   R0,WORK           SHOW DATA SET SEQUENCE COUNT.
         MVC   KFSC,ED3Z
         ED    KFSC,WORK+6
         ICM   R0,B'0011',DGDSEFSN
         CVD   R0,WORK           SHOW DATA SET SEQUENCE NUMBER.
         MVC   KFSN,ED3Z
         ED    KFSN,WORK+6
         L     R0,DGDSETBC
         CVD   R0,WORK           SHOW THE TAPE VOLUME BLOCK COUNT.
         MVC   KBLKS,ED7
         ED    KBLKS,WORK+4
         B     KELINEOK          TIDY UP DISPLAY LINE.
KENVSDSK ICM   R0,B'0011',DGDSEEXT
         CVD   R0,WORK           SHOW THE REMAINING EXTENT COUNT.
         MVC   KEXT,ED3
         ED    KEXT,WORK+6
KEHSMDSK L     R0,DGDSETRK
         CVD   R0,WORK           SHOW THE REMAINING TRACK COUNT.
         MVC   KTRKS,ED7Z
         ED    KTRKS,WORK+4
         B     KELINEOK          TYPE 14/15 PROCESSING NOW COMPLETE.
KE17     MVC   KEVENT,=C'SCRATCH'     SHOW EVENT TYPE.
         MVI   4(R2),X'F8'       USE HIGH INTENSITY FOR SCRATCH.
         MVI   LL-80(R2),X'F2'   USE RED FOR SCRATCH.           (I3279)
         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.
         B     KELINEOK          TYPE 18 PROCESSING NOW COMPLETE.
KE66     MVC   KEVENT(5),=C'ALTER'     SHOW EVENT TYPE.
         MVI   LL-80(R2),X'F6'         USE YELLOW FOR ALTER.    (I3279)
         CLI   DGDSEFNC,C' '           INTERESTING RENAME FLAG?
         BNH   KE616566                NO.
         MVI   KEVENT+5,C'/'           YES.
         MVC   KEVENT+6(1),DGDSEFNC    SHOW RENAME FLAG.
         CLI   DGDSEFNC,C'R'           ACTUALLY A RENAME?
         BNE   KE616566                NO.
         B     KE1866                  YES.
KE18     MVC   KEVENT(6),=C'RENAME'    SHOW EVENT TYPE.
KE1866   MVC   0(LL-79,R2),MEDX  USE MEDIUM/PINK FOR RENAME.    (I3279)
         TM    DGDSESBT,DGDSENEW IS THIS THE "NEW" DATA SET NAME?
         BZ    KEREN2OK          NO.
         MVI   KEVENT+6,C'2'     YES, INDICATE THIS.
KEREN2OK LR    R0,R5             SAVE CURRENT DSNAME ENTRY ADDRESS.
         ICM   R5,15,DGDSEONM    POINT TO "OTHER" DSNAME ENTRY.
         BZ    KE18DSOK          IGNORE ZERO POINTER.
         LA    R0,DGDSNLEN
         BAS   R14,R5ACCESS
         MVC   KTRKS+3(8),=C'NEW-DSN='
         TM    DGDSESBT,DGDSENEW IS THIS THE "NEW" DATA SET NAME?
         BZ    KERENOK           NO, SO "OTHER" IS NEW.
         MVC   KTRKS+3(3),=C'OLD' YES, SO "OTHER" IS OLD.
KERENOK  MVC   KTRKS+11(44),DGDSNAME   SHOW THE "OTHER" DATA SET NAME.
KE18DSOK LR    R5,R0             RESTORE CURRENT DSNAME ENTRY POINTER.
         LA    R0,DGDSNLEN
         BAS   R14,R5ACCESS
         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.
         B     KELINEOK          TYPE 18 PROCESSING NOW COMPLETE.
KE61     MVC   KEVENT(6),=C'DEFINE'   SHOW EVENT TYPE.
         MVI   LL-80(R2),X'F1'   USE BLUE FOR DEFINE CATALOG ENTRY.
         B     KE616566          BRANCH TO COMMON CODE.
KE62     MVC   KEVENT+1(4),=C'OPEN'   SHOW EVENT TYPE.
         MVI   LL-80(R2),X'F5'   USE TURQUOISE FOR VSAM OPEN.   (I3279)
         MVC   KAM,=C'VSAM'      INDICATE VSAM.
         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.
         TM    DGDSERIN,X'80'    SUCCESSFUL OPEN?
         BO    OPEN62OK          YES.
         MVI   4(R2),X'F8'       USE HIGH INTENSITY FOR OPEN FAILURE.
         MVI   LL-80(R2),X'F2'   USE RED FOR OPEN FAILURE.      (I3279)
         MVC   KDDN+1(6),=C'*FAIL*'
         TM    DGDSERIN,X'40'    SECURITY VIOLATION?
         BZ    OPEN62OK          NO.
         MVC   KDDN(8),=C'*BAD-PW*'
OPEN62OK TM    DGDSERIN,X'30'    CATALOG, CRA OR VVDS ACCESS?
         BZ    KELINEOK          NO, TYPE 62 PROCESSING IS COMPLETE.
         MVC   KOPEN,=C'CAT/RA'
         TM    DGDSERIN,X'20'    CATALOG OR CRA?
         BO    KELINEOK          YES, TYPE 62 PROCESSING IS COMPLETE.
         MVC   KOPEN,=C'C/V/DS'  NO, MUST BE CATALOG/VVDS AS DATA SET.
         B     KELINEOK          TYPE 62 PROCESSING NOW COMPLETE.
KE65     MVC   KEVENT,=C'UNCATLG'     SHOW EVENT TYPE.
         MVI   4(R2),X'F8'            USE HIGH INTENSITY FOR UNCATALOG.
         MVI   LL-80(R2),X'F2'        USE RED FOR UNCATALOG.    (I3279)
         CLI   DGDSEFNC,C' '          INTERESTING SCRATCH/UNCAT FLAG?
         BNH   KE616566               NO.
         MVI   KEVENT+5,C'/'          YES.
         MVC   KEVENT+6(1),DGDSEFNC   SHOW SCRATCH/UNCAT-ONLY FLAG.
KE616566 MVC   KMEM+1(4),=C'TYPE'
         MVC   KMEM+6(1),DGDSEENT     SHOW CATALOG ENTRY TYPE.
         MVC   KEXCPS+2(6),KMEM+1     SHOW CATALOG ENTRY TYPE.
         BAS   R14,KEVOLS        SHOW VOLUME DETAILS.
KELINEOK TR    KDSELINE(KDSELEN),XLATETBL    ENSURE NO UNPRINTABLES.
         MVI   KESEP01,X'3B'     SEPARATE DISPLAY AREAS.
         MVI   KESEP02,X'3B'
         MVI   KESEP03,X'3B'
         MVI   KESEP04,X'3B'
         MVI   KESEP05,X'3B'
         MVI   KESEP06,X'3B'
         MVI   KESEP07,X'3B'
         MVI   KESEP08,X'3B'
         CLI   KETIME,C'T'       SUB-HEADING LINE?
         BE    KDOSEP09          YES.
         CLI   KTRKS+6,C'-'      SUPPLYING "OTHER" DATA SET NAME?
         BNE   KDOSEP09          NO.
         CLI   KESEP14,C' '      DOES DATA SET NAME EXTEND THIS FAR?
         BNE   KDOSEP15          YES.
         MVI   KESEP14,X'3B'
         CLI   KESEP13,C' '      DOES DATA SET NAME EXTEND THIS FAR?
         BNE   KDOSEP15          YES.
         MVI   KESEP13,X'3B'
         CLI   KESEP12,C' '      DOES DATA SET NAME EXTEND THIS FAR?
         BNE   KDOSEP15          YES.
         MVI   KESEP12,X'3B'
         CLI   KESEP11,C' '      DOES DATA SET NAME EXTEND THIS FAR?
         BNE   KDOSEP15          YES.
         MVI   KESEP11,X'3B'
         CLI   KESEP10,C' '      DOES DATA SET NAME EXTEND THIS FAR?
         BNE   KDOSEP15          YES.
         MVI   KESEP10,X'3B'
         CLI   KESEP09,C' '      DOES DATA SET NAME EXTEND THIS FAR?
         BNE   KDOSEP15          YES.
         MVI   KESEP09,X'3B'
         B     KDOSEP15
KDOSEP09 MVI   KESEP09,X'3B'
         MVI   KESEP10,X'3B'
         MVI   KESEP11,X'3B'
         MVI   KESEP12,X'3B'
         MVI   KESEP13,X'3B'
         MVI   KESEP14,X'3B'
KDOSEP15 MVI   KESEP15,X'3B'
         MVI   KESEP16,X'3B'
         MVI   KESEP17,X'3B'
         MVI   KESEP18,X'3B'
         MVI   KESEP19,X'3B'
         MVI   KESEP20,X'3B'
         MVI   KESEP21,X'3B'
         MVI   KESEP22,X'3B'
         MVI   KESEP23,X'3B'
         MVI   KESEP24,X'3B'
         MVI   KESEP25,X'3B'
         MVI   KESEP26,X'3B'
         MVI   KESEP27,X'3B'
         LH    R1,KESCROLL       LOAD LEFT/RIGHT SCROLL OFFSET.
         LA    R1,KDSELINE(R1)   POINT TO START OF LINE TO BE LOADED.
         MVC   LL-79(79,R2),0(R1) LOAD DISPLAY LINE.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         C     R2,PAGEND         IS THE SCREEN NOW FILLED?
         BNL   KEODGDAT          YES, SO SHOW IT.
         LTR   R6,R6             POINTING TO VALID DSE?
         BNZ   KEGOTDSE          YES.
         ICM   R6,15,KEVNTADR    POINT TO THE FIRST ADDRESS POINTER.
         B     KENXTDSE
KEGOTDSE ICM   R6,15,DGDSEDSN    POINT TO NEXT DATA SET EVENT ENTRY.
KENXTDSE BNZ   KEGDSELP          PROCESS IT.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LR    R1,R2             POINT TO THIS LINE.
         LA    R0,LL             GET THE LINE LENGTH.
         SLR   R1,R0             POINT TO THE PREVIOUS LINE.
         CLI   2(R1),X'00'       ANY EXTENDED HIGHLIGHTING ALREADY?
         BNE   KELSTLIN          YES, DO NOT CHANGE IT.
         MVI   2(R1),X'F4'       UNDERSCORE FOR PREVIOUS LINE.  (I3279)
         MVI   5(R1),X'C4'       UNDERLINE FOR PREVIOUS LINE.   (F9526)
KELSTLIN MVI   2(R2),X'F4'       UNDERSCORE FOR THIS LINE.      (I3279)
         MVI   LL-80(R2),X'F5'   TURQUOISE.                     (I3279)
         MVC   LL-58(37,R2),=C'HIT PF3/15 TO RETURN TO DATA SET LIST'
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         B     KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.
         SPACE
KESLDMSK MVC   KEJOB(0),SELJOBNM                <<< EXECUTED >>>
         SPACE
KEVOLS   MVC   KVOL,DGDSEVOL     SHOW FIRST VOLUME SERIAL NUMBER.
         MVC   KVOL1,DGDSEVOL    SHOW UP TO FIRST FIVE VOLUME SERIALS.
         MVC   KVOL2,DGDSEVOL+6
         MVC   KVOL3,DGDSEVOL+12
         MVC   KVOL4,DGDSEVOL+18
         MVC   KVOL5,DGDSEVOL+24
         SLR   R0,R0             SHOW THE VOLUME COUNT.
         ICM   R0,B'0011',DGDSENUM
         CVD   R0,WORK
         MVC   K#DV,ED3Z
         ED    K#DV,WORK+6
         BR    R14               RETURN TO CALLER.
         SPACE
KEOPTCDS LTR   R7,R7             POINTING TO OPTIONAL SERVICE CODES?
         BNPR  R14               NO, RETURN WITHOUT ACTION.
         LA    R9,KOPT           POINT TO OUTPUT DISPLAY AREA.
         LA    R0,8              8 OUTPUT BITS TO TEST.
         ICM   R1,8,DGDSEOPT     LOAD DCBOPTCD.
KEOPTNLP LTR   R1,R1             TOP BIT ON?
         BNM   KENXTOPT          NO.
         MVC   0(1,R9),0(R7)     YES, LOAD INDICATOR FLAG.
         LA    R9,1(,R9)         ADVANCE OUTPUT AREA POINTER.
KENXTOPT LA    R7,1(,R7)         ADVANCE INDICATOR POINTER.
         SLL   R1,1              PROMOTE NEXT BIT.
         BCT   R0,KEOPTNLP       GO TEST NEXT BIT.
         BR    R14               RETURN TO CALLER.
         SPACE
         DROP  R10,R6,R5         KDISPDSN, DGDSEVNT, DGDATAST.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CONSTANTS AND VARIABLES'
KESCROLL DC    H'0'              LEFT/RIGHT SCROLL OFFSET.
KDSEMAXR DC    AL2(KDSELEN-79)   MAXIMUM SCROLL RIGHT OFFSET.
DAMMACRF DC    C'EGRKISXC'       INPUT DA MACRF BITS (DCBMACR1).
         DC    C'0PWKISAU'       OUTPUT DA MACRF BITS (DCBMACR2).
SAMMACRF DC    C'EGRMLPCD'       INPUT PS MACRF BITS (DCBMACR1).
         DC    C'0PWMLPCD'       OUTPUT PS MACRF BITS (DCBMACR2).
OPTIONPS DC    C'WUCHQZTJ'       SAM/PAM OPTIONAL SERVICE CODES.
OPTIONIS DC    C'WUMIY?LR'       ISAM OPTIONAL SERVICE CODES.
OPTIONDA DC    C'WTEFADXB'       BDAM OPTIONAL SERVICE CODES.
KEDRFTYP DC    C'FVTBSAM?'       DISK DATA SET RECORD FORMAT FLAGS.
KETRFTYP DC    C'FVDBSAM?'       TAPE DATA SET RECORD FORMAT FLAGS.
*                 OPEN TYPE      DEBOPATB SETTING
KOPNTYPE DC    CL8' INPUT  '       0000      0
         DC    CL8'RDBACK  '       0001      1
         DC    CL8'?0010?  '       0010      2
         DC    CL8' INOUT  '       0011      3
         DC    CL8'UPDATE  '       0100      4
         DC    CL8'?0101?  '       0101      5
         DC    CL8'OUTINX  '       0110      6
         DC    CL8' OUTIN  '       0111      7
         DC    CL8'?1000?  '       1000      8
         DC    CL8'?1001?  '       1001      9
         DC    CL8'?1010?  '       1010      A
         DC    CL8'?1011?  '       1011      B
         DC    CL8'?1100?  '       1100      C
         DC    CL8'?1101?  '       1101      D
         DC    CL8'EXTEND  '       1110      E
*        DC    CL8'OUTPUT  '       1111      F
*                 OPEN TYPE      ACBMACR1 SETTING
KVOPNTYP DC    CL8'OUTPUT  '       .01.      2
         DC    CL8' INPUT  '       .10.      4
         DC    CL8'UPDATE  '       .11.      6
HSMFNCTN DS    0C                HSM FUNCTION CODE TABLE.
         DC    CL8'4HMIG-L1'         1 - PRIMARY TO ML1.
         DC    CL8'4MIG-MIG'         2 - ML1/2 TO ML1/2.
         DC    CL8'4HMIG-L2'         3 - PRIMARY TO ML2.
         DC    CL8'5HRECA-1'         4 - ML1 TO PRIMARY.
         DC    CL8'5HRECA-2'         5 - ML2 TO PRIMARY.
         DC    CL8'2HDELETE'         6 - HDELETE.
         DC    CL8'4DBACKUP'         7 - DAILY BACKUP.
         DC    CL8'4SBACKUP'         8 - SPILL BACKUP.
         DC    CL8'3RECOVER'         9 - HRECOVER.
         DC    CL8'4RECYCLE'         A - RECYCLE BACKUP VOLUME.
         DC    CL8'2DEL-AGE'         B - DELETE BY AGE.
         DC    CL8'4RECYCLE'         C - RECYCLE MIGRATION VOLUME.
         DC    CL8'4DUMPVOL'         D - FULL VOLUME DUMP.
         DC    CL8'3RESTORE'         E - VOLUME OR DATA SET RESTORE.
HEADNGKD DC    CL71' PLACE CURSOR ON LINE AND HIT ENTER TO SELECT A DAT+
               A SET FROM THE LIST '
HEADNGKE DC    CL71' EVENTS FOR 11111111.22222222.33333333.44444444.555+
               55555  COLS 001-079 '
KDSELINE DS    0C
KEDATE   DC    CL6'YY.DDD',CL1' '
KETIME   DC    CL5'HH:MM'
KESEP01  DC    CL1'|'
KESID    DC    CL4' '
KESEP02  DC    CL1'|'
KEJOB    DC    CL8' '
KESEP03  DC    CL1'|'
KEVENT   DC    CL7' '
KESEP04  DC    CL1'|'
KDDN     DC    CL8' '
KESEP05  DC    CL1'|'
KUNIT    DC    CL4' '
KESEP06  DC    CL1'|'
KVOL     DC    CL6' '
KESEP07  DC    0CL1'|'
KEXT     DC    CL4' '
KESEP08  DC    0CL1'|'
KTRKS    DC    CL8' '
KESEP09  DC    0CL1'|'
KEXCPS   DC    CL12' '
KESEP10  DC    0CL1'|'
KBLKS    DC    CL8' '
KESEP11  DC    0CL1'|'
KFSC     DC    CL4' '
KESEP12  DC    0CL1'|'
KFSN     DC    CL4' '
KESEP13  DC    CL1'|'
KMEM     DC    CL8' '
KESEP14  DC    CL1'|'
KAM      DC    CL4' ',CL1' '
KOPEN    DC    CL6' '
KESEP15  DC    CL1'|'
KRECFM   DC    CL5' '
KESEP16  DC    0CL1'|'
KLRECL   DC    CL6' '
KESEP17  DC    0CL1'|'
KBLKSI   DC    CL6' '
KESEP18  DC    0CL1'|'
KKEYLE   DC    CL6' '
KESEP19  DC    CL1'|'
KOPT     DC    CL8' '
KESEP20  DC    CL1'|'
KVOL1    DC    CL6' ',CL1' '
KVOL2    DC    CL6' ',CL1' '
KVOL3    DC    CL6' ',CL1' '
KVOL4    DC    CL6' ',CL1' '
KVOL5    DC    CL6' '
KESEP21  DC    0CL1'|'
K#DV     DC    CL4' ',CL1' '
KESEP22  DC    CL1'|'
KEUSR    DC    CL8' '
KESEP23  DC    CL1'|'
KEMCN    DC    CL8' '
KESEP24  DC    CL1'|'
KEDCN    DC    CL8' '
KESEP25  DC    CL1'|'
KESCN    DC    CL8' '
KESEP26  DC    CL1'|'
KESTP    DC    CL8' '
KESEP27  DC    CL1'|'
KEPGM    DC    CL8' '
KDSELEN  EQU   *-KDSELINE
         SPACE
         LTORG
         SPACE
KESUBHDG DC    C' DATE  TIME |SID |JOB NAME| EVENT | DDNAME |UNIT|VOLUM+
               E|EXT| TRACKS|TOTAL EXCPS| BLOCKS|FSC|FSN| MEMBER |ACCES+
               S DTLS|RECFM|LRECL|BLKSI|KEYLN|OPTIONCD| VOL1   VOL2   V+
               OL3   VOL4   VOL5 |#DEV|JMRUSEID|MGMTCLAS|DATACLAS|STORC+
               LAS|STEPNAME|PROGRAM '
         DS    0H
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - PROGRAM NAME LIST'
         USING KDISPPGM,R10
KDISPPGM DS    0H                DISPLAY PROGRAM NAME LIST.
         MVC   HEADING,HEADNGKP  INITIALIZE HEADING.
         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?
         BNE   KPHDKPOK          NO, MUST BE PROGRAM LIST.
         MVC   HEADING(48),HEADING+1
         MVC   HEADING+48(8),KJSUBHDG+23        C'JOB NAME'.
KPHDKPOK MVI   KHDGCNT+1,1       UPDATE HEADING LINE COUNT.
         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'S'.
         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.
         LA    R2,BUFFER         INITIALIZE BUFFER POINTER.
         LA    R0,DGPGMLEN       GET PROGRAM NAME ENTRY LENGTH.
         CLI   KLOCNAME,0        ANY PROGRAM NAME/PREFIX TO LOCATE?
         BE    KPNOPREF          NO.
         LA    R5,DGFSTPGM       POINT TO THE FIRST/LAST PGM POINTERS.
         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?
         BNE   *+8               NO, MUST BE PROGRAM LIST.
         LA    R5,DGFSTJOB       POINT TO THE FIRST/LAST JOB POINTERS.
         USING DGPROGRM,R5
         CLI   KLOCNAME,C'M'     NAME CLOSER TO END OF CHARACTER SET?
         BH    KPBLOCLP          YES, SEARCH BACKWARD FROM END OF LIST.
KPFLOCLP ICM   R5,15,DGPGMNXT    POINT TO THE NEXT PROGRAM NAME ENTRY.
         BZ    KPLOCBTM          END OF FORWARD CHAIN SO GO DOWN MAX.
         BAS   R14,R5ACCESS
         CLC   DGPGMNAM,KLOCNAME LOCATED THE REQUESTED NAME?
         BL    KPFLOCLP          NO, CONTINUE SEARCH.
         BE    KPLOCDIT          YES, EXACT MATCH SO SHOW IT.
*        B     KPBLOCLP   (BH)   YES, BUT PAST IT SO BACK UP.
KPBLOCLP ICM   R5,15,DGPGMPRV    POINT TO THE PREVIOUS PGM NAME ENTRY.
         BZ    KPLOCTOP          BACKWARD CHAIN END SO SHOW FROM TOP.
         BAS   R14,R5ACCESS
         CLC   DGPGMNAM,KLOCNAME LOCATED THE REQUESTED NAME?
         BH    KPBLOCLP          NO, CONTINUE SEARCH.
KPLOCDIT XC    KLOCNAME,KLOCNAME CLEAR THE PROGRAM NAME INPUT AREA.
         B     KPSHOWIT          NOW AT THE CORRECT LOCATION.
KPNOPREF ICM   R5,15,KITEMADR    POINT TO FIRST PROGRAM TO DISPLAY.
         BZ    KPSHOTOP          IF ZERO THEN SHOW FROM THE TOP.
         BAS   R14,R5ACCESS
         CLC   KSHOWITM,BLANKS   SHOWING SPECIFIC EVENTS?
         BNE   KDISPJSE          YES, SHOW EVENTS OF A PROGRAM.
         CLI   KSCRLAMT,X'7F'    NO, BOTTOM RQUESTED?
         BE    KPSHOBTM          YES, DIRECTLY ACCESS THE BOTTOM.
         ICM   R1,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.
         BZ    KPZMCHEK          ZERO SO CHECK FOR ZOOM REQUEST.
         BP    KPFWRDLP          POSITIVE SO SCROLL FORWARD.
         LPR   R1,R1             NEGATIVE SO GET COUNT TO SCROLL BACK.
KPBKWDLP ICM   R5,15,DGPGMPRV    POINT TO THE PREVIOUS PGM NAME ENTRY.
         BZ    KPSHOTOP          BACKWARD CHAIN END SO SHOW FROM TOP.
         BAS   R14,R5ACCESS
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KPBKWDOK          NO, CONTINUE.
         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BNE   KPBKWDOK          NO, CONTINUE.
         MVC   KJJOB,DGPGMNAM    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KJJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KPBKWDLP          IF NOT EQUAL THEN GO AWAY.
KPBKWDOK BCT   R1,KPBKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KPSHOWIT          NOW AT THE CORRECT LOCATION.
KPLOCBTM XC    KLOCNAME,KLOCNAME CLEAR THE PROGRAM NAME INPUT AREA.
KPSHOBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.
         L     R5,DGLSTPGM       POINT TO THE LAST PROGRAM NAME.
         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?
         BNE   *+8               NO, MUST BE PROGRAM LIST.
         L     R5,DGLSTJOB       POINT TO THE LAST JOB NAME ENTRY.
         BAS   R14,R5ACCESS
         L     R1,LINES          GET THE SCREEN LINE COUNT.
         AHI   R1,-3             GET THE SCROLL UP VALUE.
         B     KPBKWDLP          GO DO IT.
KPZMCHEK CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?
         BE    KDGPGMLP          YES, DO NOT PERFORM SELECTION.
         SLR   R15,R15           CLEAR FOR INSERT.
         ICM   R15,1,INBUFF+1    GET THE CURSOR RELATIVE LINE NUMBER.
         BNP   KDGPGMLP          ZERO, SO JUST SHOW PROGRAM NAME LIST.
         B     KPZOOMNX          ZOOM IN ON CORRECT PROGRAM NAME.
KPZOOMLP ICM   R5,15,DGPGMNXT    POINT TO THE NEXT PROGRAM NAME ENTRY.
         BZ    KPSHOBTM          HANDLE END OF CHAIN IF ENCOUNTERED.
         ST    R5,KITEMADR       THIS MAY BE THE SELECTED PROGRAM.
         BAS   R14,R5ACCESS
         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?
         BNE   KPZOOMNX          NO, MUST BE PROGRAM LIST.
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KPZOOMNX          NO, CONTINUE.
         MVC   KJJOB,DGPGMNAM    COPY JOB NAME TO HOLDING AREA.
         LA    R1,SELJOBNM       POINT TO DESIRED PREFIX.
         ST    R1,WORK+4         SAVE PARAMETER LIST ITEM.
         LA    R0,KJJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R0,R1,WORK2       SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KPZOOMLP          IF NOT EQUAL THEN ENTRY NOT SHOWN.
KPZOOMNX BCT   R15,KPZOOMLP      CONTINUE SCROLLING TO CORRECT ENTRY.
         MVC   KSHOWITM(8),DGPGMNAM  COPY THE SELECTED PROGRAM NAME.
         B     KDISPJSE          GO SHOW EVENTS OF THIS PROGRAM.
KPFWRDLP ICM   R5,15,DGPGMNXT    POINT TO THE NEXT PROGRAM NAME ENTRY.
         BZ    KPSHOTOP          HANDLE END OF CHAIN IF ENCOUNTERED.
         BAS   R14,R5ACCESS
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KPFWRDOK          NO, CONTINUE.
         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BNE   KPFWRDOK          NO, CONTINUE.
         MVC   KJJOB,DGPGMNAM    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KJJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KPFWRDLP          IF NOT EQUAL THEN GO AWAY.
KPFWRDOK BCT   R1,KPFWRDLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KPSHOWIT          GET FORMATTING.
KPLOCTOP XC    KLOCNAME,KLOCNAME CLEAR THE PROGRAM NAME INPUT AREA.
KPSHOTOP ST    R5,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?
         BE    KPSHOBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.
         L     R5,DGFSTPGM       POINT TO THE FIRST PGM NAME ENTRY.
         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?
         BNE   *+8               NO, MUST BE PROGRAM LIST.
         L     R5,DGFSTJOB       POINT TO THE FIRST JOB NAME ENTRY.
         BAS   R14,R5ACCESS
KPSHOWIT SLR   R0,R0
         ST    R0,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         ST    R0,KEVNTADR       CLEAR THE EVENT ENTRY POINTER.
         ST    R0,KITEMADR       RESET TOP OF SCREEN ENTRY ADDRESS.
         MVC   KSHOWITM,BLANKS   RESET SELECTED PROGRAM NAME.
KDGPGMLP CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BNE   KDGPGMOK          NO, CONTINUE.
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KDGPGMOK          NO, CONTINUE.
         MVC   KJJOB,DGPGMNAM    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KJJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KDPJNEXT          IF NOT EQUAL THEN GO AWAY.
KDGPGMOK ICM   R0,15,KITEMADR    TOP OF SCREEN ITEM KNOWN?
         BNZ   *+8               YES, DO NOT OVERLAY THE ADDRESS.
         ST    R5,KITEMADR       NO, THIS IS THE NEW TOP OF SCREEN.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-78(8,R2),DGPGMNAM   DISPLAY THE PROGRAM NAME.
         L     R0,DGPGMJS#       LOAD THE PROGRAM EVENT COUNT.
         LA    R1,LL-70(,R2)     POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         MVC   LL-61(17,R2),=CL17'STEP END EVENT(S)'
         ICM   R9,15,DGPGMCPU    LOAD THE PROGRAM CPU TOTAL.
         BZ    KDPCPUOK          ZERO SO LEAVE FIELD BLANK.
         LA    R1,LL-43(,R2)     POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY THE TIME.
         MVC   LL-33(3,R2),=CL3'CPU'
KDPCPUOK CP    DGPGMXCP,PL1ZERO  IS THE PROGRAM EXCP TOTAL ZERO?
         BE    KDPXCPOK          YES, SO LEAVE FIELD BLANK.
         MVC   WORK,DGPGMXCP     COPY FIELD TO BE DISPLAYED.
         LA    R1,LL-29(,R2)     POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7P      FORMAT AND DISPLAY NUMBER.
         MVC   LL-20(5,2),=CL5'EXCPS'
KDPXCPOK CP    DGPGMSRV,PL1ZERO  IS PROGRAM SERVICE UNIT TOTAL ZERO?
         BE    KDPSRVOK          YES, SO LEAVE FIELD BLANK.
         LA    R1,LL-14(,R2)     POINT TO DISPLAY AREA.
         MVC   WORK,DGPGMSRV     COPY FIELD TO BE DISPLAYED.
         BAS   R14,KJSHOW7P      FORMAT AND DISPLAY NUMBER.
         MVC   LL-5(4,2),=CL4'S.U.'
         CLI   LL-7(R2),C'0'     SCALING LABEL PRESENT?
         BNL   KDPSRVOK          NO, LEAVE AS LOW INTENISTY.
         MVC   0(LL-79,R2),HIGHX YES, SHOW IN HIGH INTENSITY.
KDPSRVOK TR    LL-79(79,R2),XLATETBL    ENSURE NO UNPRINTABLES.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         C     R2,PAGEND         IS THE SCREEN NOW FILLED?
         BNL   KEODGDAT          YES, SO SHOW IT.
KDPJNEXT ICM   R5,15,DGPGMNXT    POINT TO THE NEXT PROGRAM NAME ENTRY.
         BZ    KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.
         LA    R0,DGPGMLEN
         BAS   R14,R5ACCESS
         B     KDGPGMLP          PROCESS IT.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - STEP END EVENT LIST'
KDISPJSE DS    0H                DISPLAY STEP END EVENT LIST.
         MVI   ENDDEPTH+1,2      MAKE PF3/15 PRODUCE PROGRAM NAME LIST.
         CLI   INBUFF,10         LEFT RIGHT SCROLL REQUEST?
         BL    KJLROKAY          NO.
         CLI   INBUFF,11
         BH    KJLROKAY          NO.
         ICM   R0,15,SCRLAMT     ANY SPECIFIED SCROLL AMOUNT?
         BNZ   KJLRAMOK          YES, USE IT.
         LA    R0,79             NO, DEFAULT TO A PAGE.
         CLI   INCHARS+1,C'0'    SINGLE NUMERIC OPERAND OF '<' OR '>'?
         BL    KJLRAMOK          NO, A PAGE IT IS.
         NI    INCHARS+1,X'0F'   YES, CONVERT IT TO BINARY.
         IC    R0,INCHARS+1      LOAD IT.
KJLRAMOK CLI   INBUFF,10         SCROLL LEFT?
         BNE   KJDIRNOK          NO.
         LNR   R0,R0             YES, MAKE THE NUMBER NEGATIVE.
KJDIRNOK AH    R0,KJSCROLL       GET THE NEW HORIZONTAL OFFSET.
         BM    KJLRZERO          IF NEGATIVE FORCE LEFT MAXIMUM.
         STH   R0,KJSCROLL       SAVE THE NEW HORIZONTAL OFFSET.
         CH    R0,KJSEMAXR       TOO FAR RIGHT?
         BNH   KJLROKAY          NO.
         MVC   KJSCROLL,KJSEMAXR YES, PERFORM RIGHT MAX.
         B     KJLROKAY
KJLRZERO XC    KJSCROLL,KJSCROLL ZERO THE OFFSET FOR LEFT MAX.
KJLROKAY CLC   DGPGMNAM,KSHOWITM ALREADY POSITIONED AT THE PROGRAM?
         BE    KJSELIST          YES.
         LA    R0,DGPGMLEN       NO, POSITION TO THAT PROGRAM NAME.
         LA    R5,DGFSTPGM       POINT TO FIRST PGM NAME ENTRY ADDRESS.
         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?
         BNE   KJPOSILP          NO, MUST BE PROGRAM LIST.
         LA    R5,DGFSTJOB       POINT TO FIRST JOB NAME ENTRY ADDRESS.
KJPOSILP ICM   R5,15,DGPGMNXT    POINT TO THE PROGRAM NAME ENTRY.
         BZ    KPLOCTOP          HANDLE END OF CHAIN IF ENCOUNTERED.
         ST    R5,KITEMADR       THIS MAY BE THE SELECTED PROGRAM.
         BAS   R14,R5ACCESS
         CLC   DGPGMNAM,KSHOWITM FOUND THE PROGRAM NAME?
         BNE   KJPOSILP          NO, CONTINUE CHAINING.
         ST    R0,KEVNTADR       YES, DROP ANY RETAINED JSE ADDRESS.
KJSELIST MVC   HEADING,HEADNGKJ  INITIALIZE HEADING.
         MVI   KJFUDGE+1,0       ASSUME PROGRAM VIEW.
         CLI   KSHOWSYS+2,C'J'   PROCESSING JOB NAME LIST?
         BNE   KJHDKJOK          NO, MUST BE PROGRAM LIST.
         MVC   HEADING+12(3),HEADING+30    C'JOB'.
         MVI   KJFUDGE+1,8       THE JOB VIEW IS BEING USED.
KJHDKJOK MVC   HEADING+16(8),KSHOWITM      SUPPLY PROGRAM NAME.
         CLI   SELJOBNM,C' '     USING JOB NAME PREFIX SELECTION?
         BNH   KJHDGFIX          NO.
         LH    R1,JPRFXLEN       GET PREFIX LENGTH.
         BCTR  R1,0              DECREMENT FOR EXECUTE.
         EX    R1,KJHLDMSK       LOAD THE PREFIX INTO THE DISPLAY LINE.
KJHDGFIX LH    R1,KJSCROLL       GET LEFT/RIGHT SCROLL OFFSET.
         LA    R1,1(,R1)         SHOW LEFT-MOST COLUMN NUMBER.
         CVD   R1,WORK
         OI    WORK+7,X'0F'
         UNPK  HEADING+63(3),WORK+6(2)
         LA    R1,78(,R1)        SHOW RIGHT-MOST COLUMN NUMBER.
         CVD   R1,WORK
         OI    WORK+7,X'0F'
         UNPK  HEADING+67(3),WORK+6(2)
         TR    HEADING,XLATETBL  ENSURE NO UNPRINTABLES IN HEADING.
         LA    R2,BUFFER         INITIALIZE BUFFER POINTER.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)
         MVI   LL-80(R2),X'F5'   TURQUOISE.                     (I3279)
         MVI   KHDGCNT+1,2       UPDATE HEADING LINE COUNT.
         ICM   R6,15,KEVNTADR    POINT TO FIRST EVENT TO DISPLAY.
         BZ    KJSHOTOP          IF ZERO THEN SHOW FROM THE TOP.
         LA    R0,DGJSELEN
         BAS   R14,R6ACCESS
         USING DGJSEVNT,R6
         CLI   KSCRLAMT,X'7F'    BOTTOM REQUESTED?
         BE    KJSHOBTM          YES, DIRECTLY ACCESS THE BOTTOM.
         ICM   R8,15,KSCRLAMT    LOAD ENTRY COUNT TO BE SCROLLED.
         BZ    KJSHOWIT          ZERO SO START FORMATTING.
         BP    KJFWRDLP          POSITIVE SO SCROLL FORWARD.
         LPR   R8,R8             NEGATIVE SO GET COUNT TO SCROLL BACK.
KJBKWDLP LH    R14,KJFUDGE
         L     R6,DGJSEPRP(R14)  POINT TO THE PREVIOUS EVENT ENTRY.
         LTR   R6,R6             END OF BACKWARD CHAIN?
         BZ    KJSHOTOP          YES, SHOW FROM TOP.
         ST    R6,KEVNTADR       THIS MAY BE THE NEW TOP OF SCREEN.
         LA    R0,DGJSELEN
         BAS   R14,R6ACCESS
KJBKWDJB CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KJBKWDOK          NO, CONTINUE.
         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BE    KJBKWDOK          YES, CONTINUE.
         MVC   KJJOB,DGJSEJOB    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KJJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KJBKWDLP          IF NOT EQUAL THEN GO AWAY.
KJBKWDOK BCT   R8,KJBKWDLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KJSHOWIT          NOW AT THE CORRECT LOCATION.
KJSHOBTM MVI   INBUFF,13         ERASE SCROLL DOWN INDICATOR.
         L     R6,DGPGMJSL       POINT TO THE LAST STEP END EVENT.
         LA    R0,DGJSELEN
         BAS   R14,R6ACCESS
         L     R8,LINES          GET THE SCREEN LINE COUNT.
         AHI   R8,-4             GET THE SCROLL UP VALUE.
         B     KJBKWDJB          GO DO IT.
KJFWRDLP LH    R14,KJFUDGE
         L     R6,DGJSEPRN(R14)  POINT TO THE NEXT EVENT ENTRY.
         LTR   R6,R6             END OF CHAIN?
         BZ    KJSHOTOP          YES, SHOW FROM TOP.
         ST    R6,KEVNTADR       THIS MAY BE THE NEW TOP OF SCREEN.
         LA    R0,DGJSELEN
         BAS   R14,R6ACCESS
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KJFWRDOK          NO, CONTINUE.
         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BE    KJFWRDOK          YES, CONTINUE.
         MVC   KJJOB,DGJSEJOB    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KJJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KJFWRDLP          IF NOT EQUAL THEN GO AWAY.
KJFWRDOK BCT   R8,KJFWRDLP       CONTINUE SCROLLING TO CORRECT ENTRY.
         B     KJSHOWIT          GET FORMATTING.
KJSHOTOP ST    R6,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         CLI   INBUFF,8          WAS THIS A SCROLL DOWN REQUEST?
         BE    KJSHOBTM          YES, SO FORCE A SCROLL DOWN MAXIMUM.
         L     R6,DGPGMJSF       POINT TO FIRST PROGRAM EVENT ENTRY.
         ST    R6,KEVNTADR       THIS IS THE NEW TOP OF SCREEN.
KJSHOWIT SLR   R0,R0
         ST    R0,KSCRLAMT       RESET AMOUNT TO SCROLL THIS TIME.
         SLR   R6,R6             INDICATE FIRST ADDRESS NEEDED.
         MVC   KJSELINE(256),KJSUBHDG
         MVC   KJSELINE+256(KJSELEN-256),KJSUBHDG+256
         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BNE   KJSBHDOK          NO, MUST BE PROGRAM VIEW.
         MVC   KJJOB,HEADNGKP+49 C'PROGRAM '.
         B     KJLINEOK          DISPLAY SUB-HEADING.
KJSBHDOK CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KJLINEOK          NO, DISPLAY SUB-HEADING.
         MVC   KJJOB,STARS       YES, SHOW JOB NAME MASK.
         LH    R1,JPRFXLEN       GET PREFIX LENGTH.
         BCTR  R1,0              DECREMENT FOR EXECUTE.
         EX    R1,KJSLDMSK       LOAD THE PREFIX INTO THE COLUMN HDR.
         B     KJLINEOK          DISPLAY SUB-HEADING.
KJGJSELP LA    R0,DGJSELEN
         BAS   R14,R6ACCESS
         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BE    KJGJSEOK          YES, CONTINUE.
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   KJGJSEOK          NO, CONTINUE.
         MVC   KJJOB,DGJSEJOB    COPY JOB NAME TO HOLDING AREA.
         LA    R15,SELJOBNM      POINT TO DESIRED PREFIX.
         LA    R0,KJJOB          POINT TO JOB NAME.
         LH    R1,JPRFXLEN       GET LENGTH OF JOB NAME PREFIX.
         STM   R15,R1,WORK+4     SAVE PARAMETER LIST.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   KJGOTJSE          IF NOT EQUAL THEN GO AWAY.
KJGJSEOK MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F4'   USE GREEN FOR COND CODE ZERO.  (I3279)
         MVI   KJSELINE,C' '     BLANK DISPLAY LINE FORMATTING AREA.
         MVC   KJSELINE+1(256),KJSELINE
         MVC   KJSELINE+256+1(KJSELEN-1-256),KJSELINE+256
         TM    KFLAGS,KDATEFMT   NO, USING YYMMDD DATE FORMAT?
         BO    KJJSEYMD          YES.
         MVC   WORK(9),EDKYYDDD  NO, SHOW THE JULIAN DATE.
         ED    WORK(9),DGJSEDAT  DISPLAY THE DATE OF THE SMF EVENT.
         MVC   KJDATE,WORK+3
         MVC   WORK(9),EDKYYDDD  NO, SHOW THE JULIAN DATE.
         ED    WORK(9),DGJSESTD  DISPLAY THE DATE OF THE STEP START.
         MVC   KJSDATE,WORK+3
         B     KJSEDTOK
KJJSEYMD L     R1,DGJSEDAT       GET THE SMF EVENT JULIAN DATE.
         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.
         BASR  R14,R7            CONVERT THE JULIAN DATE.
         MVC   KJDATE(2),WORK    LOAD YY
         MVC   KJDATE+2(2),WORK+3 AND MM
         MVC   KJDATE+4(2),WORK+6 AND DD.
         L     R1,DGJSESTD       GET THE STEP START JULIAN DATE.
         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.
         BASR  R14,R7            CONVERT THE JULIAN DATE.
         MVC   KJSDATE(2),WORK   LOAD YY
         MVC   KJSDATE+2(2),WORK+3 AND MM
         MVC   KJSDATE+4(2),WORK+6 AND DD.
KJSEDTOK UNPK  KJTIME(3),DGJSETIM(2)
         UNPK  KJTIME+3(3),DGJSETIM+1(2)
         TR    KJTIME,HEX-C'0'
         MVI   KJTIME+2,C':'     DISPLAY THE TIME OF THE SMF EVENT.
         UNPK  KJSTIME(3),DGJSESIT(2)
         UNPK  KJSTIME+3(3),DGJSESIT+1(2)
         TR    KJSTIME,HEX-C'0'
         MVI   KJSTIME+2,C':'    DISPLAY THE TIME OF THE STEP START.
         MVC   KJSID,DGJSESID    SHOW SYSTEM IDENTIFIER.
         MVC   KJSUBS,DGJSEWID   SHOW SUBSYSTEM IDENTIFIER.
         MVC   KJJOB,DGJSEJOB    SHOW JOB NAME.
         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BNE   *+10              NO, MUST BE PROGRAM VIEW.
         MVC   KJJOB,DGJSEPGM    SHOW PROGRAM NAME INSTEAD.
         MVC   KJJID,DGJSEJID    SHOW JES JOB NUMBER.
         MVC   KJUSR,DGJSEUSR    SHOW JMRUSEID FIELD.
         MVC   KJSTEP,DGJSESTP   SHOW JOB STEP NAME.
         MVC   KJPSN,DGJSEPSN    SHOW JOB PROC STEP NAME.
         MVC   KJPGMR,DGJSEUID   SHOW JOB PROC STEP NAME.
         LH    R0,DGJSESTN       GET THE STEP NUMBER.
         CVD   R0,WORK
         MVC   KJSTN,ED3
         ED    KJSTN,WORK+6      SHOW THE STEP NUMBER.
         MVC   KJCLASS,DGJSECLS  SHOW THE JOB CLASS.
         LH    R0,DGJSEPGN       GET THE PERFORMANCE GROUP NUMBER.
         CVD   R0,WORK
         MVC   KJPGN,ED3
         ED    KJPGN,WORK+6      SHOW THE PERFORMANCE GROUP NUMBER.
         MVC   KJUSER,DGJSERUD   RACF USERID.
         MVC   KJGROUP,DGJSEGRP  RACF GROUP.
         UNPK  KJDP(3),DGJSEPTY+1(2)
         TR    KJDP,HEX-C'0'     SHOW DISPATCHING PRIORITY.
         LH    R0,DGJSECMP       LOAD THE COMPLETION CODE.
         LTR   R0,R0             HOW WAS IT?
         BZ    KJCONDOK          CONDITION CODE WAS ZERO.
         BP    KJCCNOT0          CONDITION CODE WAS GREATER THAN ZERO.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY FOR ABNORMAL END.
         MVI   LL-80(R2),X'F2'   RED.                           (I3279)
         TM    DGJSECMP,X'C0'    SYSTEM ABEND CODE?
         BO    KJSYSEND          YES.
         SLL   R0,20             NO, SHIFT OUT IRRELEVANT BITS.
         SRL   R0,20             SHIFT USER ABEND CODE BACK.
         CVD   R0,WORK           SHOW THE DECIMAL USER ABEND CODE.
         B     KJBIGCMP          SHOW FOUR DECIMAL DIGITS.
KJCCNOT0 MVC   0(LL-79,R2),MEDX  "MEDIUM" INTENSITY FOR NON-ZERO CC.
         MVI   LL-80(R2),X'F6'   YELLOW.                        (I3279)
KJCONDOK CVD   R0,WORK           SHOW THE DECIMAL CONDITION CODE.
         CH    R0,HUNDRED        COND CODE LESS THAN 100?
         BL    KJCCSMAL          YES.
KJBIGCMP MVC   KJCOMP,ED5Z
         MVI   KJCOMP+1,X'21'
         ED    KJCOMP,WORK+5
         MVC   KJCOMP(5),KJCOMP+1
         MVI   KJCOMP+5,C' '
         TM    DGJSECMP,X'80'    USER ABEND CODE?
         BZ    KJCOMPOK          NO.
         MVI   KJCOMP,C'U'       YES, INDICATE USER ABEND CODE.
         B     KJCOMPOK
KJCCSMAL MVC   WORK(4),ED3Z
         MVI   WORK+1,X'21'
         ED    WORK(4),WORK+6
         MVC   KJCOMP+2(2),WORK+2
         B     KJCOMPOK
KJSYSEND UNPK  KJCOMP+2(4),DGJSECMP(3)
         TR    KJCOMP+2(3),HEX-C'0'
         MVI   KJCOMP+5,C' '     ERASE GARBAGE.
         MVI   KJCOMP+1,C'S'     INDICATE SYSTEM ABEND CODE.
KJCOMPOK L     R9,DGJSELAP       GET JOB STEP ELAPSED TIME.
         LA    R1,KJELAP+1       POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R9,DGJSETCN       GET TOTAL CONNECT TIME.
         SLR   R8,R8             CLEAR FOR SHIFT AND DIVIDE.
         SLDL  R8,7              CONVERT TO MICROSECONDS.
         D     R8,TENGRAND       CONVERT TO CENTISECONDS.
         LA    R1,KJCNCT         POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R9,DGJSECPT       GET STEP TCB TIME.
         LA    R1,KJTCB          POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R9,DGJSECPS       GET STEP SRB TIME.
         LA    R1,KJSRB          POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R9,DGJSEICU       GET INITIATOR TCB TIME.
         LA    R1,KJTCBI         POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R9,DGJSEISB       GET INITIATOR SRB TIME.
         LA    R1,KJSRBI         POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R9,DGJSEIIP       GET I/O INTERRUPT CPU TIME.
         LA    R1,KJIOIT         POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R9,DGJSERCT       GET REGION CONTROL TASK CPU TIME.
         LA    R1,KJRCTT         POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R9,DGJSEHPT       GET HIPERSPACE TRANSFER CPU TIME.
         LA    R1,KJHPRT         POINT TO DISPLAY AREA.
         BAS   R14,KJPUTIME      FORMAT AND DISPLAY TIME.
         L     R0,DGJSERGN       LOAD THE REQUESTED REGION SIZE.
         LA    R1,KJREGN         POINT TO DISPLAY AREA.
         BAS   R14,KJSTORK       FORMAT AND DISPLAY STORAGE SIZE.
         LH    R0,DGJSEPRI       LOAD THE PRIVATE AREA HIGH-WATER-MARK.
         LA    R1,KJPRIV         POINT TO DISPLAY AREA.
         BAS   R14,KJSTORK       FORMAT AND DISPLAY STORAGE H-W-M.
         LH    R0,DGJSESYS       LOAD THE LSQA HIGH-WATER-MARK.
         LA    R1,KJLSQA         POINT TO DISPLAY AREA.
         BAS   R14,KJSTORK       FORMAT AND DISPLAY STORAGE H-W-M.
         L     R0,DGJSEEUR       LOAD THE PRIVATE AREA HIGH-WATER-MARK.
         LA    R1,KJEPRIV        POINT TO DISPLAY AREA.
         BAS   R14,KJSTOR        FORMAT AND DISPLAY STORAGE H-W-M.
         L     R0,DGJSEEAR       LOAD THE ELSQA HIGH-WATER-MARK.
         LA    R1,KJELSQA        POINT TO DISPLAY AREA.
         BAS   R14,KJSTOR        FORMAT AND DISPLAY STORAGE H-W-M.
         L     R0,DGJSEDSV       LOAD THE DATA SPACE HIGH-WATER-MARK.
         LA    R1,KJDSPC         POINT TO DISPLAY AREA.
         BAS   R14,KJSTOR        FORMAT AND DISPLAY STORAGE H-W-M.
         L     R0,DGJSETEP       GET EXCP COUNT.
         LA    R1,KJEXCPS        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSETEP       GET EXCP COUNT.
         LA    R1,KJEXCPS        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSETPT       GET TPUT COUNT.
         LA    R1,KJTPUTS        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSETGT       GET TGET COUNT.
         LA    R1,KJTGETS        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEPGI       GET PAGE-IN COUNT.
         LA    R1,KJPGIN         POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEPGO       GET PAGE-OUT COUNT.
         LA    R1,KJPGOT         POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEPSI       GET PAGES SWAPPED-IN COUNT.
         LA    R1,KJSPGIN        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEPSO       GET PAGES SWAPPED-OUT COUNT.
         LA    R1,KJSPGOT        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEVPI       GET VIO PAGE-IN COUNT.
         LA    R1,KJVIOIN        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEVPO       GET VIO PAGE-OUT COUNT.
         LA    R1,KJVIOOT        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEVPR       GET VIO PAGE RECLAIM COUNT.
         LA    R1,KJVOIRC        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSECPI       GET COMMON PAGE-IN COUNT.
         LA    R1,KJCMNIN        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSESRV       GET TOTAL SERVICE UNITS.
         LA    R1,KJTOTSR        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSECSU       GET CPU SERVICE UNITS.
         LA    R1,KJCPUSR        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSESRB       GET SRB SERVICE UNITS.
         LA    R1,KJSRBSR        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEIOS       GET IOS SERVICE UNITS.
         LA    R1,KJIOSSR        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEMSO       GET MSO SERVICE UNITS.
         LA    R1,KJMSOSR        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSETRS       GET SRM TRANSACTION COUNT.
         LA    R1,KJXACTS        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         L     R0,DGJSEVOL       GET NUMBER OF VOLUME MOUNTS.
         LA    R1,KJMONTS        POINT TO DISPLAY AREA.
         BAS   R14,KJSHOW7       FORMAT AND DISPLAY NUMBER.
         ICM   R0,15,DGJSELAP    GET JOB STEP ELAPSED TIME.
         BZ    KJLINEOK          AVOID S0C9 BY NOT DIVIDING BY ZERO.
         L     R9,DGJSECPT       GET STEP TCB TIME.
         A     R9,DGJSECPS       ADD STEP SRB TIME.
         A     R9,DGJSEICU       ADD INITIATOR TCB TIME.
         A     R9,DGJSEISB       ADD INITIATOR SRB TIME.
         A     R9,DGJSEIIP       ADD I/O INTERRUPT CPU TIME.
         A     R9,DGJSERCT       ADD REGION CONTROL TASK CPU TIME.
         A     R9,DGJSEHPT       ADD HIPERSPACE TRANSFER CPU TIME.
         M     R8,TENGRAND       SCALE FOR % AND + 2 DECIMAL PLACES.
         DR    R8,R0             GET CPU/ELAPSED PERCENTAGE.
         CVD   R9,WORK           FORMAT AND DISPLAY.
         MVC   KJCPUPC,=X'402021204B2020'
         ED    KJCPUPC,WORK+5
         CHI   R9,2500           LESS THAN 25% CPU?
         BL    KJLINEOK          YES, LEAVE COLOUR AS IS.
         CLC   =AL4(30*6000),DGJSELAP STEP RAN IN UNDER A HALF-HOUR?
         BH    KJLINEOK          YES, LEAVE COLOUR AS IS.
         OI    LL-80(R2),X'F1'   NO, ENABLE BLUE COLOUR TO HIGHLIGHT.
KJLINEOK TR    KJSELINE(256),XLATETBL     ENSURE NO UNPRINTABLES.
         TR    KJSELINE+256(KJSELEN-256),XLATETBL
         MVI   KJSEP01,X'3B'     SEPARATE DISPLAY AREAS.
         MVI   KJSEP02,X'3B'
         MVI   KJSEP03,X'3B'
         MVI   KJSEP04,X'3B'
         MVI   KJSEP05,X'3B'
         MVI   KJSEP06,X'3B'
         MVI   KJSEP07,X'3B'
         MVI   KJSEP08,X'3B'
         MVI   KJSEP09,X'3B'
         MVI   KJSEP10,X'3B'
         MVI   KJSEP11,X'3B'
         MVI   KJSEP12,X'3B'
         MVI   KJSEP13,X'3B'
         MVI   KJSEP14,X'3B'
         MVI   KJSEP15,X'3B'
         MVI   KJSEP16,X'3B'
         MVI   KJSEP17,X'3B'
         MVI   KJSEP18,X'3B'
         MVI   KJSEP19,X'3B'
         MVI   KJSEP20,X'3B'
         MVI   KJSEP21,X'3B'
         MVI   KJSEP22,X'3B'
         MVI   KJSEP23,X'3B'
         MVI   KJSEP24,X'3B'
         MVI   KJSEP25,X'3B'
         MVI   KJSEP26,X'3B'
         MVI   KJSEP27,X'3B'
         MVI   KJSEP28,X'3B'
         MVI   KJSEP29,X'3B'
         MVI   KJSEP30,X'3B'
         MVI   KJSEP31,X'3B'
         MVI   KJSEP32,X'3B'
         MVI   KJSEP33,X'3B'
         MVI   KJSEP34,X'3B'
         MVI   KJSEP35,X'3B'
         MVI   KJSEP36,X'3B'
         MVI   KJSEP37,X'3B'
         MVI   KJSEP38,X'3B'
         MVI   KJSEP39,X'3B'
         MVI   KJSEP40,X'3B'
         MVI   KJSEP41,X'3B'
         MVI   KJSEP42,X'3B'
         MVI   KJSEP43,X'3B'
         MVI   KJSEP44,X'3B'
         MVI   KJSEP45,X'3B'
         MVI   KJSEP46,X'3B'
         MVI   KJSEP47,X'3B'
         MVI   KJSEP48,X'3B'
         MVI   KJSEP49,X'3B'
         MVI   KJSEP50,X'3B'
         LH    R1,KJSCROLL       LOAD LEFT/RIGHT SCROLL OFFSET.
         LA    R1,KJSELINE(R1)   POINT TO START OF LINE TO BE LOADED.
         MVC   LL-79(79,R2),0(R1) LOAD DISPLAY LINE.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         C     R2,PAGEND         IS THE SCREEN NOW FILLED?
         BNL   KEODGDAT          YES, SO SHOW IT.
         LTR   R6,R6             POINTING TO VALID JSE?
         BNZ   KJGOTJSE          YES.
         ICM   R6,15,KEVNTADR    POINT TO THE FIRST ADDRESS POINTER.
         B     KJNXTJSE
KJGOTJSE LH    R14,KJFUDGE
         L     R6,DGJSEPRN(R14)  POINT TO NEXT STEP END EVENT ENTRY.
         LTR   R6,R6
KJNXTJSE BNZ   KJGJSELP          PROCESS IT.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-79(R2),C' '    BLANK THE DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LR    R1,R2             POINT TO THIS LINE.
         LA    R0,LL             GET THE LINE LENGTH.
         SLR   R1,R0             POINT TO THE PREVIOUS LINE.
         CLI   2(R1),X'00'       ANY EXTENDED HIGHLIGHTING ALREADY?
         BNE   KJLSTLIN          YES, DO NOT CHANGE IT.
         MVI   2(R1),X'F4'       UNDERSCORE FOR PREVIOUS LINE.  (I3279)
         MVI   5(R1),X'C4'       UNDERLINE FOR PREVIOUS LINE.   (F9526)
KJLSTLIN MVI   2(R2),X'F4'       UNDERSCORE FOR THIS LINE.      (I3279)
         MVI   LL-80(R2),X'F5'   TURQUOISE.                     (I3279)
         MVC   LL-58(36,R2),=CL36'HIT PF3/15 TO RETURN TO PROGRAM LIST'
         LR    R1,R2             REMEMBER ADDRESS OF THIS LINE.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         CLI   KSHOWSYS+2,C'J'   IS JOB VIEW ACTIVE?
         BNE   KEODGDAT          NO, SO SHOW SYSTEM SUMMARY LINE.
         MVC   LL-59(24,R1),LL-58(R1)
         MVC   LL-35(8,R1),KJSUBHDG+23        C'JOB NAME'.
         B     KEODGDAT          NO MORE SO SHOW SYSTEM SUMMARY LINE.
         SPACE
KJSHOW7  DS    0H                FORMAT NUMBER IN SEVEN BYTES.
         CVD   R0,WORK           GET NUMBER IN PACKED DECIMAL.
KJSHOW7P OC    WORK(4),WORK      IS SEVEN DIGITS A BIG ENOUGH FIELD?
         BNZ   KJSCALE7          NO.
         MVC   0(8,R1),ED7Z      YES, LOAD EDIT MASK.
         ED    0(8,R1),WORK+4    LOAD INTEGER.
         BR    R14               RETURN TO CALLER.
KJSCALE7 ICM   R15,15,=C'TGMK'   LOAD SCALING LABELS.
KJSCALP  SRP   WORK,64-3,0       DIVIDE BY 1000 AND TRUNCATE.
         OC    WORK(5),WORK      IS FIVE DIGITS A BIG ENOUGH FIELD NOW?
         BZ    KJSCALOK          YES.
         SRL   R15,8             NO, USE NEXT SCALING LABEL.
         B     KJSCALP           CONTINUE SCALING.
KJSCALOK MVC   1(6,R1),ED5       LOAD EDIT MASK.
         ED    1(6,R1),WORK+5    LOAD TRUNCATED NUMBER.
         STC   R15,7(,R1)        LOAD SCALING LABEL.
         BR    R14               RETURN TO CALLER.
         SPACE
KJHLDMSK MVC   HEADING+44(0),SELJOBNM           <<< EXECUTED >>>
KJSLDMSK MVC   KJJOB(0),SELJOBNM                <<< EXECUTED >>>
         SPACE
KJSTOR   DS    0H                FORMAT STORAGE AMOUNT IN 7 BYTES.
         SRL   R0,10             CONVERT FROM BYTES TO KILOBYTES.
KJSTORK  DS    0H                FORMAT STORAGE AMOUNT IN 7 BYTES.
         LTR   R0,R0             ANY STORAGE?
         BZR   R14               NO, LEAVE FIELD BLANK.
         ICM   R15,15,=C'TGMK'   YES, LOAD SCALING LABELS.
KJSTORLP CVD   R0,WORK           DIVIDE BY 1000 AND TRUNCATE.
         OC    WORK(5),WORK      IS FIVE DIGITS A BIG ENOUGH FIELD NOW?
         BZ    KJSTOROK          YES.
         SRL   R15,8             NO, USE NEXT SCALING LABEL.
         SRL   R0,10             DIVIDE QUANTITY BY 1024.
         B     KJSTORLP          CONTINUE SCALING.
KJSTOROK MVC   0(6,R1),ED5       LOAD EDIT MASK.
         ED    0(6,R1),WORK+5    LOAD TRUNCATED NUMBER.
         STC   R15,6(,R1)        LOAD SCALING LABEL.
         BR    R14               RETURN TO CALLER.
         SPACE
KJPUTIME DS    0H                DISPLAY TIME AS SS.SS OR HH:MM:SS.
         LTR   R9,R9             ANY TIME MEASURED?
         BZR   R14               NO, LEAVE BLANK AND RETURN TO CALLER.
         SLR   R8,R8             CLEAR FOR DIVIDE.
         D     R8,AHUNDRED       GET SECONDS AND CENTISECONDS.
         C     R9,=F'60'         LESS THAN ONE MINUTE?
         BL    KJPUTSEC          YES, JUST SHOW SECONDS.
         SLR   R8,R8             CLEAR FOR DIVIDE.
         D     R8,=F'60'
         CVD   R8,WORK           SHOW SECONDS.
         OI    WORK+7,X'0F'
         UNPK  7(2,R1),WORK+6(2)
         MVI   6(R1),C':'
         SLR   R8,R8             CLEAR FOR DIVIDE.
         D     R8,=F'60'
         CVD   R8,WORK           SHOW MINUTES.
         OI    WORK+7,X'0F'
         UNPK  4(2,R1),WORK+6(2)
         MVI   3(R1),C':'
         CVD   R9,WORK           SHOW HOURS.
         MVC   WORK(4),ED3
         ED    WORK(4),WORK+6
         MVC   0(3,R1),WORK+1
         BR    R14               RETURN TO CALLER.
KJPUTSEC MVI   7(R1),X'A2'       INDICATE SECONDS.
         CVD   R8,WORK           SHOW CENTISECONDS.
         OI    WORK+7,X'0F'
         UNPK  5(2,R1),WORK+6(2)
         MVI   4(R1),C'.'
         CVD   R9,WORK           SHOW WHOLE SECONDS.
         MVC   WORK(4),ED3
         ED    WORK(4),WORK+6
         MVC   1(3,R1),WORK+1
         BR    R14               RETURN TO CALLER.
         SPACE
         DROP  R10,R6,R5         KDISPPGM, DGJSEVNT, DGPROGRM.
         TITLE 'HISTORICAL KNOWLEDGE DISPLAY - CONSTANTS AND VARIABLES'
KJSCROLL DC    H'0'              LEFT/RIGHT SCROLL OFFSET.
KJFUDGE  DC    H'0'              0 FOR PROGRAM VIEW, 8 FOR JOB VIEW.
KJSEMAXR DC    AL2(KJSELEN-79)   MAXIMUM SCROLL RIGHT OFFSET.
HEADNGKP DC    CL71'  PLACE CURSOR ON LINE AND HIT ENTER TO SELECT A PR+
               OGRAM FROM THE LIST '
HEADNGKJ DC    CL71' EVENTS FOR PGM=$$$$$$$$      JOB-NAME-MASK=*******+
               *      COLS 001-079 '
KJSUBHDG DC    C' DATE  TIME |SID |SUBS|JOB NAME|JES JOB#|STEPNAME|PROC+
               STEP|PROGRAMMER NAME     |STP|USER ID |GROUP ID|C|PGN| S+
               TEP START | ELAPSED |DP| COMP |TCB-TIME|SRB-TIME|INIT-TC+
               B|INIT-SRB|I/O-I-TM|RCT-TIME|HPRSP-TM|CONCT-TM| REGIO'
         DC    C'N|PVT<16'
         DC    C'M|  LSQA |PVT>16M| ELSQA |DATASPC|PAGE-IN|PAGEOUT|SWPP+
               GIN|SWPGOUT| VIO-IN|VIO-OUT|VIORCLM|CMNPGIN| EXCPS | TPU+
               TS | TGETS |TRNSACT|TOT-SRV|CPU-SRV|SRB-SRV|IOS-SRV|MSO-+
               SRV| CPU% | MOUNTS|JMRUSEID'
KJSELINE DS    0C
KJDATE   DC    CL6'YY.DDD',CL1' '
KJTIME   DC    CL5'HH:MM'
KJSEP01  DC    CL1'|'
KJSID    DC    CL4' '
KJSEP02  DC    CL1'|'
KJSUBS   DC    CL4' '
KJSEP03  DC    CL1'|'
KJJOB    DC    CL8' '
KJSEP04  DC    CL1'|'
KJJID    DC    CL8' '
KJSEP05  DC    CL1'|'
KJSTEP   DC    CL8' '
KJSEP06  DC    CL1'|'
KJPSN    DC    CL8' '
KJSEP07  DC    CL1'|'
KJPGMR   DC    CL20' '
KJSEP08  DC    0CL1'|'
KJSTN    DC    CL4' '
KJSEP09  DC    CL1'|'
KJUSER   DC    CL8' '
KJSEP10  DC    CL1'|'
KJGROUP  DC    CL8' '
KJSEP11  DC    CL1'|'
KJCLASS  DC    CL1' '
KJSEP12  DC    0CL1'|'
KJPGN    DC    CL4' '
KJSEP13  DC    CL1'|'
KJSDATE  DC    CL6'YY.DDD',CL1' '
KJSTIME  DC    CL5'HH:MM'
KJSEP14  DC    0CL1'|'
KJELAP   DC    CL10' '
KJSEP15  DC    CL1'|'
KJDP     DC    CL2' '
KJSEP16  DC    CL1'|'
KJCOMP   DC    CL6' '
KJSEP17  DC    0CL1'|'
KJTCB    DC    CL9' '
KJSEP18  DC    0CL1'|'
KJSRB    DC    CL9' '
KJSEP19  DC    0CL1'|'
KJTCBI   DC    CL9' '
KJSEP20  DC    0CL1'|'
KJSRBI   DC    CL9' '
KJSEP21  DC    0CL1'|'
KJIOIT   DC    CL9' '
KJSEP22  DC    0CL1'|'
KJRCTT   DC    CL9' '
KJSEP23  DC    0CL1'|'
KJHPRT   DC    CL9' '
KJSEP24  DC    0CL1'|'
KJCNCT   DC    CL9' '
KJSEP25  DC    CL1'|'
KJREGN   DC    CL7' '
KJSEP26  DC    CL1'|'
KJPRIV   DC    CL7' '
KJSEP27  DC    CL1'|'
KJLSQA   DC    CL7' '
KJSEP28  DC    CL1'|'
KJEPRIV  DC    CL7' '
KJSEP29  DC    CL1'|'
KJELSQA  DC    CL7' '
KJSEP30  DC    CL1'|'
KJDSPC   DC    CL7' '
KJSEP31  DC    0CL1'|'
KJPGIN   DC    CL8' '
KJSEP32  DC    0CL1'|'
KJPGOT   DC    CL8' '
KJSEP33  DC    0CL1'|'
KJSPGIN  DC    CL8' '
KJSEP34  DC    0CL1'|'
KJSPGOT  DC    CL8' '
KJSEP35  DC    0CL1'|'
KJVIOIN  DC    CL8' '
KJSEP36  DC    0CL1'|'
KJVIOOT  DC    CL8' '
KJSEP37  DC    0CL1'|'
KJVOIRC  DC    CL8' '
KJSEP38  DC    0CL1'|'
KJCMNIN  DC    CL8' '
KJSEP39  DC    0CL1'|'
KJEXCPS  DC    CL8' '
KJSEP40  DC    0CL1'|'
KJTPUTS  DC    CL8' '
KJSEP41  DC    0CL1'|'
KJTGETS  DC    CL8' '
KJSEP42  DC    0CL1'|'
KJXACTS  DC    CL8' '
KJSEP43  DC    0CL1'|'
KJTOTSR  DC    CL8' '
KJSEP44  DC    0CL1'|'
KJCPUSR  DC    CL8' '
KJSEP45  DC    0CL1'|'
KJSRBSR  DC    CL8' '
KJSEP46  DC    0CL1'|'
KJIOSSR  DC    CL8' '
KJSEP47  DC    0CL1'|'
KJMSOSR  DC    CL8' '
KJSEP48  DC    0CL1'|'
KJCPUPC  DC    CL7' '
KJSEP49  DC    0CL1'|'
KJMONTS  DC    CL8' '
KJSEP50  DC    CL1'|'
KJUSR    DC    CL8' '
KJSELEN  EQU   *-KJSELINE
         SPACE
         LTORG
         SPACE
         DROP  R11,R4            KNOWSHOW, DGBASE.
         DS    0H
