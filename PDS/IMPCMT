*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD
         TITLE 'SUPERVISOR CALL TABLE DISPLAY SUBROUTINE'
         USING SVCLIST,R11,R10
SVCLIST  DS    0H
         LA    R10,2048(,R11)    SET UP SECOND
         LA    R10,2048(,R10)                  BASE REGISTER.
         L     R5,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R5
         L     R5,CVTABEND       POINT TO THE SCVT.
         DROP  R5                CVT.
         USING SCVTSECT,R5
         L     R5,SCVTSVCT       POINT TO THE SVC TABLE.
         DROP  R5                SCVTSECT.
         ST    R5,MAINTABL       SAVE THE MAIN TABLE'S ADDRESS.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         MVC   WINTOP,TTOPLINE   SET TOP-OF-SCREEN LINE NUMBER.
         DROP  R15               WNDWMNGR.
         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.
         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.
         ICM   R0,15,ESRSVCNO    LOOKING AT AN ESR TABLE?
         BNZ   SVPRECMD          YES, ALREADY INITIALIZED SO PROCEED.
         ST    R5,CRNTABLE       START OFF WITH THE MAIN TABLE.
         MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.
SVPRECMD MVC   INCHARS(L'INCHARS-1),INCHARS+1
         MVI   INCHARS+L'INCHARS-1,C' ' ADJUST ANY COMMAND INPUT.
         B     CMDSCANT          PROCESS IT.
         SPACE
REDOSVCS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.
         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.
         MVI   8(R2),X'F3'       SHOW HEADING IN PINK.          (I3279)
         MVI   0(R2),X'FF'       INDICATE NON-SCROLLABLE LINE.
         MVI   LL-79(R2),C' '    BLANK DISPLAY LINE.
         MVC   LL-78(SVDL-1,R2),LL-79(R2)
         MVC   LL-79(79,R2),HEADINGT     LOAD DISPLAYABLE
         TR    LL-79(79,R2),XLATETBL          HEADING.
         LA    R2,SVLL(,R2)      POINT PAST HEADING.
         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.
         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)
         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)
         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)
         MVC   LL-79(SVDL,R2),SVCTCOLS
         TR    LL-79(SVDL,R2),XLATETBL
         CLI   ENDDEPTH+1,0      SHOWING MAIN SVC TABLE?
         BE    SVCMNHDG          YES.
         MVC   LL-78(6,R2),=C'ES# EC'
         MVC   SVIAESR(SVDL-SVIAESR,R2),SVCTDTLS
         B     SVCHDGOK          HEADING NOW CORRECT.
SVCMNHDG TM    OSBITS,X'13'      MVS?
         BO    SVCHDGOK          YES, HEADING IS CORRECT.
         MVC   SVIAMSP(SVDL-SVIAMSP,R2),SVCTDTLS
SVCHDGOK LA    R2,SVLL(,R2)      ADJUST BUFFER POINTER.
         LA    R1,2
         ST    R1,WINLINES       INITIALIZE LINE COUNTER.
         DROP  R15               WNDWMNGR.
         LM    R4,R5,TENTRYCT    GET ENTRY COUNT AND TABLE ADDRESS.
         SLR   R3,R3             GET THE FIRST ENTRY NUMBER.
         USING SVCENTRY,R5
NEXTSVC  MVC   0(LL-79,R2),LOWX  LOW INTENSITY AND GREEN.
         MVI   LL-80(R2),X'F4'   GREEN.                         (I3279)
         MVI   LL-79(R2),C' '    BLANK DISPLAY LINE.
         MVC   LL-78(SVDL-1,R2),LL-79(R2)
         CVD   R3,WORK
         CLC   CRNTABLE,MAINTABL IS THIS THE MAIN SVC TABLE?
         BE    SVCNOOK           YES, GET THE RIGHT SVC NUMBER.
         L     R0,ESRSVCNO       NO, GET THE ESR SVC NUMBER.
         CVD   R0,WORK
SVCNOOK  MVC   LL-79(4,R2),ED3   SHOW SVC NUMBER IN DECIMAL.
         ED    LL-79(4,R2),WORK+6
         STC   R3,WORK
         UNPK  LL-74(3,R2),WORK(2)
         TR    LL-74(2,R2),HEX-C'0'
         MVI   LL-72(R2),C' '    SHOW SVC NUMBER IN HEXADECIMAL.
         UNPK  LL-71(9,R2),SVCEP(5)  (MIGHT BE ESR ENTRY CODE.)
         TR    LL-71(8,R2),HEX-C'0'
         MVI   LL-63(R2),C' '    SHOW AMODE AND ENTRY POINT ADDRESS.
         TM    SVCATTR1,SVCTP34  CHECK THE FIRST TWO TYPE BITS.
         BZ    TYPE1OR6          ZERO SO IT IS A TYPE 1 OR TYPE 6.
         BNO   SVCNOT34          NOT AN LPA TYPE.
         MVC   LL-62(3,R2),=C'3/4'   YES, IT IS A TYPE 3 OR TYPE 4.
         B     SVCTYPED          NOW HAVE THE SVC TYPE.
SVCNOT34 MVI   LL-61(R2),C'2'    ASSUME A TYPE 2.
         TM    SVCATTR1,SVCTP2   TEST THIS ASSUMPTION.
         BO    SVCTYPED          CORRECT.
         MVI   LL-61(R2),C'5'    ER, A TYPE 5 PERHAPS?
         B     SVCTYPED          NOW HAVE THE SVC TYPE.
TYPE1OR6 MVI   LL-61(R2),C'1'    ASSUME A TYPE 1.
         TM    SVCATTR1,SVCTP6   TEST THIS ASSUMPTION.
         BZ    SVCTYPED          CORRECT.
         MVI   LL-61(R2),C'6'    IT IS A TYPE 6 AFTER ALL.
SVCTYPED TM    SVCATTR1,SVCASF   CAN THE SVC BE ASSISTED?
         BZ    SVCASIST          NO.
         OI    LL-80(R2),X'01'   YES, ENABLE BLUE COMPONENT.    (I3279)
         MVI   4(R2),X'F4'       MEDIUM INTENSITY FOR ASSIST ALLOWABLE.
SVCASIST TM    SVCATTR1,SVCNP    NON-PREEMPTIVE SVC?
         BZ    SVCPREMP          NO.
         MVI   2(R2),X'F2'       YES, SET REVERSE VIDEO.        (I3279)
         MVI   5(R2),X'50'       ALSO SET REVERSE VIDEO.        (F9526)
SVCPREMP TM    SVCATTR1,SVCAPF   IS APF AUTHORIZATION REQUIRED FOR USE?
         BZ    SVCAPFED          NO.
         MVC   LL-58(3,R2),=C'YES'
         MVI   4(R2),X'F8'       HIGH INTENSITY FOR APF.
         OI    LL-80(R2),X'02'   ENABLE RED COMPONENT OF COLOR. (I3279)
SVCAPFED TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?
         BZ    SVCESRED          NO.
         MVC   LL-54(3,R2),=C'YES'
SVCESRED LA    R6,SVCLOCKS       POINT TO SVC LOCK FLAGS.
         TM    OSBITS,X'13'      MVS?
         BNO   SVLOCKF4          NO, IT MUST BE MSP.
         TM    SVCATTR3,SVCAR    CAN SVC BE ISSUED IN AR MODE?
         BZ    SVLOCKOK          NO.
         MVC   LL-50(2,R2),=C'OK'
         B     SVLOCKOK
SVLOCKF4 BCTR  R6,0              NO, ADJUST FOR MSP.
SVLOCKOK TM    0(R6),SVCLL       LOCAL LOCK REQUIRED?
         BZ    *+8               NO.
         MVI   LL-47(R2),C'L'    YES.
         TM    0(R6),SVCCMS      CMS LOCK REQUIRED?
         BZ    *+8               NO.
         MVI   LL-46(R2),C'C'    YES.  (CROSS MEMORY SERVICES.)
         TM    0(R6),SVCOPT      OPT (SRM) LOCK REQUIRED?
         BZ    *+8               NO.
         MVI   LL-45(R2),C'O'    YES.  (SYSTEM RESOURCE MANAGEMENT.)
         TM    0(R6),SVCALLOC    SALLOC LOCK REQUIRED?
         BZ    *+8               NO.
         MVI   LL-44(R2),C'S'    YES.  (SPACE ALLOCATION.)
         TM    0(R6),SVCDISP     DISP LOCK REQUIRED?
         BZ    *+8               NO.
         MVI   LL-43(R2),C'D'    YES.  (DISPATCHER.)
         LA    R15,SVIAESR(,R2)  POINT TO EYE-CATCHER DISPLAY AREA.
         LA    R6,SVILESR        LOAD MAXIMUM DETAILS LENGTH.
         CLC   CRNTABLE,MAINTABL STILL USING THE ACTUAL SVC TABLE?
         BNE   SVCCHARS          NO, DON'T HAVE THE MACRO DETAILS.
         CH    R3,=Y(MAXMACRO)   IS THERE A MACRO FOR THIS SVC?
         BH    GOTMACRO          NO.
         LR    R7,R3             YES, GET SVC NUMBER.
         SLL   R7,4              MULTIPLY BY SIXTEEN.
         LA    R9,SVCMACRO(R7)   POINT TO MACRO NAME.
         MVC   LL-41(16,R2),0(R9) LOAD MACRO NAME(S).
GOTMACRO LA    R15,SVIAMSP(,R2)  POINT TO EYE-CATCHER DISPLAY AREA.
         LA    R6,SVILMSP        LOAD MAXIMUM DETAILS LENGTH.
         TM    OSBITS,X'13'      MVS?
         BNO   SVCCHARS          NO, GET MSP EYE-CATCHER.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         L     R1,CVTABEND       POINT TO THE SCVT.
         DROP  R1                CVT.
         USING SCVTSECT,R1
         L     R1,SCVTSVCR       POINT TO THE SVC UPDATE TABLE.
         DROP  R1                SCVTSECT.
         LR    R0,R3             COPY THE SVC NUMBER.
         SLL   R0,3              GET EIGHT TIMES SVC NUMBER.
         ALR   R1,R0
         SLL   R0,1              GET SIXTEEN TIMES SVC NUMBER.
         ALR   R1,R0             POINT TO THE RIGHT UPDATE ENTRY.
         USING SVCURT,R1
         ICM   R0,3,SVCURCNT     GET THE UPDATE COUNT.
         BZ    SVCUPDOK          ZERO ENTRY.
         CVD   R0,WORK
         MVC   LL-7(6,R2),ED5    SHOW THE UPDATE COUNT.
         ED    LL-7(6,R2),WORK+5
         CLI   22(R1),C' '       RELATED TO PARMLIB MEMBER?
         BNH   SVCPRMOK          NO.
         MVC   LL-24(6,R2),=C'IEASVC'
         MVC   LL-18(2,R2),SVCURSX YES, SHOW MEMBER NAME.
SVCPRMOK UNPK  LL(9,R2),SVCURNEW(5) SHOW NEW ENTRY POINT
         UNPK  LL+9(9,R2),SVCUROLD(5) AND OLD ENTRY.
         UNPK  LL+18(9,R2),SVCUROLD+4(5)
         TR    LL(26,R2),HEX-C'0'
         MVI   LL+8(R2),C' '
         MVI   LL+17(R2),C'-'
         MVI   LL+26(R2),C' '
         TM    19(R1),X'0F'      EXPECTED SIGN IN DATE SLOT?
         BNO   SVCUPDOK          NO, PROBABLY DATE FIELD IS ZERO.
         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.
         L     R1,SVCURDAT       LOAD CVTDATE OF UPDATE EVENT.
         DROP  R1                SVCURT.
         BASR  R14,R7
         MVC   LL-15(8,R2),WORK  SHOW CHANGE YY-MM-DD.
SVCUPDOK LA    R15,SVIAMVS(,R2)  POINT TO EYE-CATCHER DISPLAY AREA.
         LA    R6,SVILMVS        LOAD MAXIMUM DETAILS LENGTH.
SVCCHARS L     R7,SVCEP          GET ENTRY POINT ADDRESS.
         LA    R7,0(,R7)         ENSURE ADDRESS FORMAT.
         LTR   R7,R7
         BNP   EOSVDTLS          IGNORE IF ZERO.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    TMODEOK1          NO.
         LR    R9,R15            YES, SAVE REGISTER.
         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.
         LR    R15,R9            RESTORE REGISTER.
         OI    MODESW2,KEY0      REMEMBER KEY ZERO STATUS.
TMODEOK1 LA    R9,4              REMEMBER LENGTH OF BRANCH INSTRUCTION.
         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?
         BZ    SVNUCTST          NO.
         TM    OSBITS,X'13'      YES, IS THIS MVS?
         BNO   EOSVDTLS          NO, NO ESR LABEL FOR MSP.
         MVC   0(4,R15),0(R7)    YES, LOAD ESR AND TYPE LABEL.
         TR    0(4,R15),SVCXLATE JUST IN CASE THINGS CHANGE.
         B     EOSVDTLS          THAT'S ALL THERE IS.
SVNUCTST TM    OSBITS,X'13'      IS THIS MVS?
         BNO   SVBRANCH          NO, NO NUCLEUS MAP FOR MSP.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         L     R1,CVTNUCMP       POINT TO THE NUCLEUS MAP.
         DROP  R1                CVT.
         LR    R0,R1             COPY THIS ADDRESS.
         A     R0,12(,R1)        ADD SIZE TO POINT PAST NUCLEUS MAP.
SVNUCELP LA    R1,16(,R1)        POINT TO FIRST/NEXT ENTRY.
         CR    R1,R0             GONE PAST NUCLEUS MAP?
         BNL   SVBRANCH          YES, MUST BE ELPA TYPE SVC.
         C     R7,8(,R1)         COMPARE ADDRESS WITH THIS ENTRY.
         BL    SVBRANCH          PAST IT - MUST BE LPA TYPE SVC.
         BH    SVNUCELP          NOT UP TO IT YET.
         MVC   0(8,R15),0(R1)    LOAD IN ENTRY POINT NAME.
         CLC   =C'ERROR',3(R15)  UNUSED SVC?
         BE    EOSVDTLS          YES, LEAVE OBVIOUS NAME SHOWING.
         CLC   =C'RETRN',3(R15)  DUMMY SVC?
         BE    EOSVDTLS          YES, LEAVE OBVIOUS NAME SHOWING.
         TM    12(R1),X'10'      JUST AN ENTRY POINT?
         BO    SVBRANCH          NO, FULLY-FLEDGED CSECT.
         LA    R0,16             GET LENGTH OF NUCLEUS MAP ENTRY.
SVSECTLP SLR   R1,R0             POINT TO PREVIOUS ENTRY.
         LR    R14,R7            COPY ENTRY POINT ADDRESS.
         L     R7,8(,R1)         GET PRECEDING ENTRY POINT ADDRESS.
         TM    12(R1),X'10'      BACK TO OWNING CSECT YET?
         BZ    SVSECTLP          NO, BACK UP ANOTHER ONE.
         CLI   0(R7),C'I'        DOES CSECT START WITH IBM EYE-CATCHER?
         BNE   SVBRANCH          NO, FULLY-FLEDGED CSECT.
         LR    R1,R14            YES, POINT TO FIRST NON-CSECT EP.
         SR    R1,R7             SET UPPER LENGTH TO NON-TEXT.
         AHI   R7,-4             POINT TO FOUR BYTES BEFORE IT.
         B     DOSVCTXT          LOAD IT.
SVBRANCH CLC   0(2,R7),=X'47F0'  FOUND A BRANCH?
         BE    MVICTCHR          YES, GO LOAD EYE-CATCHER.
         CLI   0(R7),X'05'       FOUND A BALR FOR ADDRESSABLILITY?
         BE    SVBASBAL          YES.
         CLI   0(R7),X'06'       DECREMENTING BASE REGISTER?
         BE    SVBCTR            YES.
         CLI   0(R7),X'07'       FOUND AN BCR?
         BE    SVFDLREG          YES.
         CLI   0(R7),X'0D'       FOUND A BASR FOR ADDRESSABLILITY?
         BE    SVBASBAL          YES.
         CLI   0(R7),X'12'       FOUND AN LTR?
         BE    SVFDLREG          YES.
         CLI   0(R7),X'17'       FOUND AN XR?
         BE    SVFDLREG          YES.
         CLI   0(R7),X'18'       FOUND AN LR?
         BE    SVFDLREG          YES.
         CLI   0(R7),X'1B'       FOUND AN SR?
         BE    SVFDLREG          YES.
         CLI   0(R7),X'1F'       FOUND AN SLR?
         BE    SVFDLREG          YES.
         B     LASTGASP          FORGET THE EYE-CATCHER.
SVBASBAL LA    R7,2(,R7)         YES, POINT PAST BASR OR BALR.
         LA    R9,4              RESET BASE REG. OFFSET ACCUMULATOR.
         B     SVBRANCH          TRY FOR BRANCH AGAIN.
SVBCTR   TM    1(R7),X'0F'       IS R2 OF BCTR ZERO?
         BNZ   LASTGASP          NO, FORGET EYE-READABLE DETAILS.
         LA    R9,1(,R9)         INCREMENT BASE OFFSET ACCUMULATOR.
SVFDLREG LA    R9,2(,R9)         ADJUST BASE OFFSET ACCUMULATOR.
         LA    R7,2(,R7)         POINT PAST RR-FORMAT INSTRUCTION.
         B     SVBRANCH          TRY FOR BRANCH AGAIN.
MVICTCHR SLR   R1,R1             CLEAR FOR INSERT.
         IC    R1,3(,R7)         GET TARGET OFFSET OF BRANCH.
         SR    R1,R9             GET SIZE OF BRANCH JUMP.
         CLI   4(R7),C'A'        DOES DATA BEGIN WITH A LENGTH CODE?
         BNL   GOTILNTH          NO.
         LA    R7,1(,R7)         DON'T SHOW LENGTH CODE.
GOTILNTH LTR   R1,R1             IS IT ZERO LENGTH?
         BNP   LASTGASP          YES, NOTHING TO LOAD.
SVCLJUST CLC   4(2,R7),=X'47F0'  FOUND ANOTHER BRANCH?
         BE    SVCJUST4          YES, SKIP FOUR BYTES OF INSTRUCTION.
         MVC   WORK(3),4(R7)     NO, COPY THE FIRST CHARACTER.
         TR    WORK(3),SVCXLATE  FILTER OUT RUBBISH.
         CLI   WORK+1,C' '       ONE CHARACTER FOLLOWED BY A BLANK?
         BE    SVCJUST1          YES, DISCARD THIS CHARACTER.
         CLI   WORK,C'0'         FIRST CHARACTER OF INTEREST?
         BL    SV1STNTN          PERHAPS, FIRST CHARACTER NOT NUMERIC.
         CLI   WORK+1,C'0'       FIRST TWO CHARACTERS NUMERIC?
         BL    SVCJUST1          NO, SUPPRESS A LEADING SINGLE DIGIT.
         CLI   WORK+2,C'/'       PART OF A DATE?
         BE    DOSVCTXT          GOSH, I HOPE SO.
         CLI   WORK+2,C'.'       PART OF A DATE OR TIME?
         BE    DOSVCTXT          GOSH, I HOPE SO.
         CLI   WORK,C'5'         FIRST CHARACTER A FIVE?
         BNE   SVCJUST1          NO, DISCARD.
         B     DOSVCTXT          YES, COULD BE PRODUCT NUMBER.
SV1STNTN CLI   WORK,C'A'         FIRST CHARACTER OF INTEREST?
         BNL   DOSVCTXT          YES, DISPLAY IT ALL.
SVCJUST1 LA    R7,1(,R7)         NO, SKIP IT.
         BCT   R1,SVCLJUST       EXAMINE NEXT CHARACTER.
         B     LASTGASP          FORGET IT IF ONLY ONE BYTE LONG.
SVCJUST4 LA    R7,4(,R7)         SKIP OVER BRANCH INSTRUCTION.
         AHI   R1,-4             ADJUST REMAINING DATA LENGTH.
         BP    SVCLJUST          CONTINUE WITH LEFT JUSTIFICATION.
LASTGASP L     R7,SVCEP          LAST DESPERATE EFFORT - GET EP AGAIN.
         LR    R0,R7             COPY IT.
         SRL   R0,12
         SLL   R0,12
         CR    R7,R0             IS ENTRY POINT ON PAGE BOUNDARY?
         BE    EOSVDTLS          YES, DON'T BACK UP, JUST GIVE UP.
         AHI   R7,-8             NO, POINT TO BEFORE ENTRY POINT.
         TM    OSBITS,X'13'      MVS?
         BO    TIGTEST           YES, LOOK FOR MVS NAME PREFIX.
         CLI   1(R7),C'F'        FUJITSU LABEL BEFORE ENTRY POINT?
         B     TVENDOR
TIGTEST  CLC   0(2,R7),=C'IG'    IBM LABEL BEFORE ENTRY POINT?
TVENDOR  BNE   EOSVDTLS          NO, I GIVE UP.
         MVC   0(8,R15),0(R7)    LOOKS LIKE IT SO COPY IT.
         TR    0(8,R15),SVCXLATE FILTER OUT ANY RUBBISH.
         B     EOSVDTLS          HOORAY!!
DOSVCTXT LR    R0,R2             SAVE CURRENT LINE POINTER.
         CR    R1,R6             IS LENGTH BIGGER THAN MAXIMUM?
         BNH   GOTBSIZE          NO, USE LENGTH DERIVED FROM MODULE.
         LR    R1,R6             YES, USE MAXIMUM.
GOTBSIZE TRT   4(1,R7),TICATCTB  IS THIS BYTE DISPLAYABLE?
         LR    R2,R0             RESTORE CURRENT LINE POINTER.
         BNZ   EOSVDTLS          NO, END OF EYE-CATCHER STRING.
         MVC   0(1,R15),4(R7)    YES, COPY THE CHARACTER.
         LA    R15,1(,R15)       POINT TO NEXT TARGET ADDRESS.
         LA    R7,1(,R7)         POINT TO NEXT SOURCE ADDRESS.
         BCT   R1,GOTBSIZE       CONTINUE.
EOSVDTLS TM    MODESW2,KEY0      IN KEY ZERO?
         BZ    TMODEOK2          NO.
         MODESET MF=(E,MDSETN0)  YES.
         NI    MODESW2,255-KEY0  NOT ANYMORE.
TMODEOK2 TR    LL-79(SVDL,R2),XLATETBL
         LA    R2,SVLL(,R2)      ADJUST BUFFER POINTER.
         LA    R3,1(,R3)         INCREMENT SVC NUMBER.
         LA    R5,8(,R5)         POINT TO THE NEXT SVC TABLE ENTRY.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R0,1
         A     R0,WINLINES       INCREMENT LINE COUNTER.
         ST    R0,WINLINES
         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.
         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.
         BNL   PUTSCRNT          IF YES, THEN FORGET SUMMARY LINE.
         BCT   R4,NEXTSVC        PROCESS NEXT SVC TABLE ENTRY.
         DROP  R5                SVCENTRY.
         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.
         LA    R1,1
         A     R1,WINLINES       INCREMENT LINE COUNTER.
         ST    R1,WINLINES
         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.
         DROP  R15               WNDWMNGR.
PUTSCRNT LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.
GETSCRNT L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         BASR  R14,R15           CALL WINDOW MANAGER.
         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?
         BZ    NOTEXITT          NO, PROCESS SUBCOMMAND.
ISEXITT  L     R15,WINMANAD      YES, POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         MVC   TTOPLINE,WINTOP   SAVE TOP-OF-SCREEN LINE NUMBER.
         DROP  R15               WNDWMNGR.
         BR    R9                RETURN TO MAINLINE VIA SCREENIO.
NOTEXITT CLI   INBUFF,3          PF3/15?
         BE    RESETESR          YES, SHOW MAIN SVC TABLE.
         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?
         BH    SVCAUTO           YES.
CMDSCANT CLI   INCHARS,C'E'      ESR TABLE FORMAT REQUESTED?
         BE    ISESRCMD          YES.
         CLI   INCHARS,C' '      DISPLAY UPDATE REQUESTED?
         BNE   GIVEHLPT          NO, SHOW HELP PANEL.
*        CLI   INBUFF+1,3        CURSOR ON HEADING LINE?
*        BL    REDOSVCS          YES, RESHOW THE SCREEN.
*        CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?
*        BE    REDOSVCS          YES, RESHOW THE SCREEN.
         SLR   R0,R0
         IC    R0,INBUFF+1       GET THE CURSOR ROW NUMBER.
         AHI   R0,-3             DO NOT COUNT HEADING LINES.
         BM    REDOSVCS          CURSOR ON HEADING LINE.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         A     R0,WINTOP         GET DETAIL LINE NUMBER.
         AH    R0,WINHDGCT       COUNT THE HEADING LINES.
         C     R0,WINLINES       BEFORE SUMMARY LINE?
         BNL   REDOSVCS          NO, CURSOR PAST END OF MAP.
         SH    R0,WINHDGCT       RESTORE DETAIL LINE NUMBER.
         BCTR  R0,0              GET TABLE ENTRY (SVC) NUMBER.
         LR    R6,R0             COPY IT.
         SLL   R0,3              MULTIPLY BY EIGHT FOR INDEX.
         L     R3,CRNTABLE       POINT TO THE CURRENT SVC TABLE.
         ALR   R3,R0             POINT TO REQUESTED SVC TABLE ENTRY.
         USING SVCENTRY,R3
         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?
         BO    TESRZOOM          YES.
         L     R1,=A(BRWSPNTR)
         MVC   0(4,R1),SVCEP     SUPPLY NEW BROWSE ADDRESS.
         NI    0(R1),X'7F'       RESET THE SIGN BIT.
         MVC   INBUFF(9),TZMSTR  SUPPLY THE ZOOM COMMAND STRING.
         MVI   TGETLEN+1,9       SUPPLY "INPUT" DATA LENGTH.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNT          ZOOM TO OPTION "VB".
         DROP  R15,R3            WNDWMNGR, SVCENTRY.
SVCAUTO  MVI   INBUFF,X'F8'      SIMULATE A SCROLL DOWN REQUEST.
         MVI   TGETLEN+1,3       SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNT          GO SCROLL DOWN A PAGE.
ISESRCMD CLI   INCHARS+1,C'/'    DISPLAY MAIN TABLE REQUEST?
         BE    RESETESR          YES.
TGETESR# MVI   ESRPRMTE,X'C1'    RESET WCC.
         LA    R0,GTESRELN       LOAD THE LENGTH OF THE DATA STREAM.
         LA    R1,ESRPRMTE       POINT TO PROMPTING MESSAGE.
         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.
         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.
         TM    255(R15),X'10'    JAPANESE DISPLAY?
         BZ    ASKESRNO          NO, USE ENGLISH PROMPT.
         MVI   ESRPRMTJ,X'C1'    RESET WCC.
         LA    R0,GTESRJLN       LOAD THE LENGTH OF THE DATA STREAM.
         LA    R1,ESRPRMTJ       POINT TO PROMPTING MESSAGE.
ASKESRNO BAS   R14,SCREENIO      ISSUE PROMPT AND GET ESR NUMBER.
         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?
         BO    ISEXITT           YES, PERFORM TERMINATION.
         CLI   INBUFF,3          PF3/15?
         BE    RESETESR          YES, ASSUME PROMPT CANCEL REQUESTED.
         LA    R15,INCHARS       POINT TO START OF TEXT.
         LH    R0,TGETLEN        GET LENGTH OF INPUT STREAM.
         AHI   R0,-6             GET LENGTH OF TEXT.
         BNP   RESETESR          HANDLE NULL INPUT.
         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?
         BE    TGETESR#          YES, UNEXPECTED SO REDRIVE THE PROMPT.
         SLR   R1,R1             CLEAR ESR SVC NUMBER.
JUSTESR# CLI   0(R15),C' '       INPUT CHARACTER A BLANK?
         BNE   CHKESR#           NO, INPUT IS LEFT JUSTIFIED.
         LA    R15,1(,R15)       YES, POINT TO NEXT TEXT BYTE.
         BCT   R0,JUSTESR#
RESETESR LA    R4,256            NULL INPUT SO GET NUMBER OF SVCS.
         L     R5,MAINTABL       GET ADDRESS OF MAIN SVC TABLE.
         STM   R4,R5,TENTRYCT    STORE THESE.
         ICM   R3,15,ESRSVCNO    GET THE ESR SVC NUMBER.
         BZ    TESCRLOK          NONE SO AVOID SCROLLING.
         LA    R3,1(,R3)         GET ITS LINE NUMBER.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         ST    R3,WINTOP         MAKE THIS THE NEW TOP DETAIL LINE.
         DROP  R15               WNDWMNGR.
TESCRLOK MVI   ENDDEPTH+1,0      MAKE PF3/15 FUNCTION AS '='.
         XC    ESRSVCNO,ESRSVCNO CLEAR ESR NUMBER.
         B     REDOSVCS          GO FORMAT NEW SCREEN IMAGE.
CHKESR#  CLI   0(R15),C'0'       NUMERIC CHARACTER?
         BL    GOTESR#           NO, END OF INPUT TEXT PARSING.
         SLL   R1,8              GET ROOM FOR ANOTHER DIGIT.
         IC    R1,0(,R15)        LOAD UNPACKED DIGIT.
         LA    R15,1(,R15)       POINT TO NEXT TEXT BYTE.
         BCT   R0,CHKESR#        EXAMINE NEXT DIGIT, IF ANY.
GOTESR#  ST    R1,WORK           GET UNPACKED NUMBER.
         OI    WORK+3,X'F0'      ENSURE A VALID DECIMAL SIGN.
         PACK  WORK+6(2),WORK+1(3)
         XC    WORK(6),WORK      LEAVE PACKED NUMBER IN DOUBLEWORD.
         CVB   R6,WORK           GET EQUIVALENT BINARY.
         LA    R0,256            GET NUMBER OF SVCS.
         CR    R6,R0             VALID SVC NUMBER?
         BNL   ESRERROR          NO, CAN'T BE AN ESR.
TESRZOOM LR    R1,R6             COPY THE POTENTIAL ESR SVC NUMBER.
         SLL   R1,3              GET INDEX INTO SVC TABLE.
         AL    R1,MAINTABL       POINT TO THE SVC TABLE ENTRY.
         USING SVCENTRY,R1
         TM    SVCATTR1,SVCESR   IS THIS AN EXTENDED SVC ROUTER?
         BZ    ESRERROR          NO.
         ST    R6,ESRSVCNO       YES, SAVE THE SVC NUMBER.
         L     R1,SVCESRAD       POINT TO THE ESR TABLE.
         TM    OSBITS,X'13'      MVS?
         BO    ESRTABOS          YES.
         L     R4,0(,R1)         GET THE NUMBER OF TABLE ENTRIES.
         LA    R5,4(,R1)         POINT TO THE LOGICAL TABLE ORIGIN.
         B     ESRTABOK
ESRTABOS L     R4,SVCESRMX       GET THE HIGHEST ENTRY CODE.
         LA    R4,1(,R4)         GET THE NUMBER OF TABLE ENTRIES.
         LA    R5,8(,R1)         POINT TO THE LOGICAL TABLE ORIGIN.
         DROP  R1                SVCENTRY.
ESRTABOK STM   R4,R5,TENTRYCT    SAVE THE ESR TABLE DETAILS.
         LA    R1,1              GET ONE.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         ST    R1,WINTOP         SHOW ESR TABLE FROM THE TOP.
         DROP  R15               WNDWMNGR.
         MVI   ENDDEPTH+1,1      MAKE PF3/15 FUNCTION AS 'E/'.
         B     REDOSVCS          GO FORMAT FROM START OF TABLE.
ESRERROR MVC   ESRERNOE,ED3      SUPPLY SVC NUMBER IN ERROR MESSAGE.
         ED    ESRERNOE,WORK+6
         LA    R0,GTESRELX       LOAD THE LENGTH OF THE DATA STREAM.
         MVI   ESRPRMTE,X'C5'    SET BELL BIT ON IN WCC.
         LA    R1,ESRPRMTE       POINT TO PROMPTING MESSAGE.
         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.
         TM    255(R15),X'10'    JAPANESE DISPLAY?
         BZ    ASKESRNO          NO, USE ENGLISH PROMPT.
         MVC   ESRERNOJ,ESRERNOE SUPPLY SVC NUMBER IN ERROR MESSAGE.
         LA    R0,GTESRJLX       LOAD THE LENGTH OF THE DATA STREAM.
         MVI   ESRPRMTJ,X'C5'    SET BELL BIT ON IN WCC.
         LA    R1,ESRPRMTJ       POINT TO PROMPTING MESSAGE.
         B     ASKESRNO          RE-PROMPT FOR ESR SVC NUMBER.
GIVEHLPT MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.
         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNT          GO DISPLAY HELP PANEL.
         SPACE
         DROP  R11,R10           SVCLIST.
         TITLE 'SVC TABLE DISPLAY - VARIABLES AND CONSTANTS'
TTOPLINE DC    F'1'              TOP-OF-SCREEN LINE NUMBER.
TENTRYCT DC    F'256'  \__ LIKE  NUMBER OF ENTRIES IN CURRENT TABLE.
CRNTABLE DC    A(0)    /   THIS  ADDRESS OF THE TABLE BEING DISPLAYED.
MAINTABL DC    A(0)              ADDRESS OF THE MAIN SVC TABLE.
ESRSVCNO DC    F'0'              ESR SVC NUMBER OF TABLE BEING SHOWN.
SVDL     EQU   221               DATA LINE LENGTH.
SVLL     EQU   LL-79+SVDL        BYTE LINE LENGTH.
SVIAMSP  EQU   LL-24             EYE-CATCHER LINE OFFSET FOR MSP.
SVILMSP  EQU   SVDL-52           EYE-CATCHER LINE LENGTH FOR MSP.
SVIAESR  EQU   LL-24-17          EYE-CATCHER LINE OFFSET FOR ESR.
SVILESR  EQU   SVDL-52+17        EYE-CATCHER LINE LENGTH FOR ESR.
SVIAMVS  EQU   LL+27             EYE-CATCHER LINE OFFSET FOR MVS.
SVILMVS  EQU   SVDL-LL-27        EYE-CATCHER LINE LENGTH FOR MVS.
TZMSTR   DC    X'7D40C11140C1'   READ HEADER FOR SVC ZOOM.
         DC    C'=VB'            CHARACTER STRING FOR SVC ZOOM.
         COPY  ESRPRMTE          ENGLISH ESR NUMBER PROMPT.
         COPY  ESRPRMTJ          JAPANESE ESR NUMBER PROMPT.
HEADINGT DC    CL79'             SVC TABLE AND EXTENDED SVC ROUTER (ESR+
               ) TABLE DISPLAY             '
SVCTCOLS DC    C' SVC-NO AMODE/EP TYP APF ESR AR LOCKS MACRO -COMPONENT+
                PARM-MEM CHG-DATE+COUNT NEW-ADDR PRIOR-TABLE-ENTRY '
SVCTDTLS DC    3CL71'MODULE-NAME/EYE-CATCHER '
         DS    0H
TICATCTB DC    4XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  00->3F
         DC    2XL16'00FFFFFFFFFFFFFFFFFF000000000000'  40->5F
         DC    1XL16'0000FFFFFFFFFFFFFFFF000000000000'  60->6F
         DC    1XL16'0000FFFFFFFFFFFFFF00000000000000'  70->7F
         DC    3XL16'FF000000000000000000FFFFFFFFFFFF'  80->AF
         DC    1XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  B0->BF
         DC    2XL16'00000000000000000000FFFFFFFFFFFF'  C0->DF
         DC    1XL16'00FF0000000000000000FFFFFFFFFFFF'  E0->EF
         DC    1XL16'00000000000000000000FFFFFFFFFFFF'  F0->FF
*                <--------------><-------------->
SVCXLATE DC    C'                                '     LIKELY
         DC    C'                                '     EYE-CATCHER
         DC    C'           .<(+            $*); '     CHARACTERS.
         DC    C'-/         ,%_>           :#@   '
         DC    C'                                '
         DC    C'                                '
         DC    C' ABCDEFGHI       JKLMNOPQR      '
         DC    C'  STUVWXYZ      0123456789      '
*                <--------------><--------------><-------------->
SVCMACRO DC    C'EXCP/XDAP       WAIT/WAITR/PRTOVPOST            '    2
         DC    C'EXIT            GETMAIN         FREEMAIN        '    5
         DC    C'LINK/LINKX      XCTL/XCTLX      LOAD            '    8
         DC    C'DELETE          GETMAIN/FREEMAINTIME            '   11
         DC    C'SYNCH/SYNCHX    ABEND           SPIE            '   14
         DC    C'ERREXCP         PURGE           RESTORE         '   17
         DC    C'BLDL/FIND  -BPAMOPEN    -O/C/EOVCLOSE   -O/C/EOV'   20
         DC    C'STOW       -BPAMOPEN TYPE=J -OCECLOSE TYPE=T-OCE'   23
         DC    C'DEVTYPE     -SAMTRKBAL      -SAMCATALOG/LOCATE  '   26
         DC    C'OBTAIN    -DADSMCVOL    -PRE-MVSSCRATCH   -DADSM'   29
         DC    C'RENAME    -DADSMFEOV    -O/C/EOV{RE}ALLOC -DADSM'   32
         DC    C'IOHALT          MGCR/QEDIT  -CMDWTO/WTOR   -COMM'   35
         DC    C'WTL             SEGLD/SEGWT              -OS/360'   38
         DC    C'LABEL -UTILITIESEXTRACT         IDENTIFY        '   41
         DC    C'ATTACH/ATTACHX  CIRB            CHAP            '   44
         DC    C'OVLYBRCH        TTIMER/STIMERM  STIMER/STIMERM  '   47
         DC    C'DEQ             TEST     -OS/360                '   50
         DC    C'SNAP{X}/SDUMP{X}RESTART -CKPT/RSRELEX      -BDAM'   53
         DC    C'DISABLE    -ISAMEOV     -O/C/EOVENQ/RESERVE     '   56
         DC    C'FREEDBUF   -BDAMREL+REQBUF -BTAMOLTEP     -OLTEP'   59
         DC    C'{E}STAE/{E}STAI IKJEGS6A   -TESTDETACH          '   62
         DC    C'CHKPT   -CKPT/RSRDJFCB  -O/C/EOV    -OS/360 QSAM'   65
         DC    C'BTAMTEST   -BTAMENDREADY   -QTAMSYNADAF/SYNADRLS'   68
         DC    C'BSP        -BSAMGSERV       -GAMASGN+RLSEBFR-GAM'   71
         DC    C'CHATR      -COMMSPAR        -GAMDAR         -GAM'   74
         DC    C'DQUEUE      -GAMIFBSTAT  -LOGRECQTAMTEST   -QTAM'   77
         DC    C'LSPACE    -DADSMSTATUS                          '   80
         DC    C'SETPRT+DEV  -SAMDASDR   -PRE-DFPSMFWTM/SMFEWTM  '   83
         DC    C'GRAPHICS    -GAMDDRSWAP         ATLAS -UTILITIES'   86
         DC    C'DOM        -COMMMOD88   -MVS/370EMSRV    -OS/VS1'   89
         DC    C'XQMNGR   -OS/VS1VOLSTAT         TCBEXCP         '   92
         DC    C'TGET/TPUT/TPG   -TSO TERMNL CNTLSYSEVENT        '   95
         DC    C'STAX            IKJEGS9G   -TESTPROTECT   -DADSM'   98
         DC    C'DYNALLOC        IKJEFFIB -TSO CPQTIP       -TCAM'  101
         DC    C'AQCTL      -TCAMXLATE   -O/C/EOVTOPCTL     -TCAM'  104
         DC    C'IMGLIB      -SAMISOLATE         MODESET         '  107
         DC    C'                ESPIE/MSGDISP         -CMD SCHED'  110
         DC    C'JECS        -JESPGRLSE          PGFIX/PGFREE &&C.' 113
         DC    C'EXCPVR          BLKPAGE         CALLDISP  -+BTAM'  116
         DC    C'DEBCHK                          TESTAUTH        '  119
         DC    C'GETMAIN/FREEMAINVSAM       -VSAMLINK/XCTL/LOAD  '  122
         DC    C'PURGEDQ/SPOST   TPIO       -VTAMEVENTS          '  125
         DC    C'            -MSS                                '  128
         DC    C'                RACHECK    -RACFRACINIT    -RACF'  131
         DC    C'RACLIST    -RACFRACDEF     -RACF                '  134
         DC    C'                                CALLDISP        '  137
         DC    C'PGSER           CVAFDIR+DSM+SEQ CROSSPTN -OS/VS1'  140
         DC    C'                                CUSP+PCF MACROS '  143
         DC    C'PTRACE  -OPENMVS     -DEBUG TOOLBPESVC -IMS OTMA'  146
*                <--------------><--------------><-------------->
MAXMACRO EQU   146
         SPACE
         LTORG
         SPACE
         DS    0H
