*        COPYRIGHT (C) 1986,1994,2006,2011  PRYCROFT SIX PTY LTD
         TITLE 'VIRTUAL STORAGE MONITOR SUBROUTINE'
         USING VIRTSTOR,R11,R10,R8
VIRTSTOR DS    0H
         LA    R10,2048(,R11)    SET UP SECOND
         LA    R10,2048(,R10)                  BASE REGISTER.
         LA    R8,2048(,R10)     SET UP THIRD
         LA    R8,2048(,R8)                   BASE REGISTER.
         ICM   R1,15,BRWSHOME    PERFORMED OPTION V INITIALIZATION?
         BNZ   BASIDSOK          YES.
         L     R1,PSAAOLD        NO, POINT TO THE CURRENT ASCB.
         USING ASCB,R1
         MVC   BRWSHOME,ASCBASID INITIALIZE THE PRIMARY ASID.
         MVC   BRWSASID,ASCBASID INITIALIZE THE SECONDARY ASID.
         DROP  R1                ASCB.
         XC    VSBTRACE(256),VSBTRACE      ZERO THE TRACE TABLE.
         LA    R0,VSBTRACE       POINT TO THE FIRST TRACE TABLE ENTRY.
         ST    R0,VSBTRPTR       LOAD POINTER.
         LA    R0,SECTCT         POINT TO THE SDWA SAVE AREA.
         ST    R0,VSDWASAV       SAVE ITS ADDRESS.
         LA    R1,LINES          POINT TO SCREEN DIMENSIONS.
         CLI   OLDCOLS+3,80      USING A WIDE SCREEN?
         BNH   *+8               NO.
         LA    R1,OLDSIZE        POINT TO WIDE SCREEN DIMENSIONS.
         LM    R0,R1,0(R1)       LOAD SCREEN DIMENSIONS.
         STM   R0,R1,VBLINES     SAVE SCREEN DIMENSIONS.
BASIDSOK MVC   INCHARS(L'INCHARS-1),INCHARS+1
         MVI   INCHARS+L'INCHARS-1,C' '   ADJUST ANY COMMAND INPUT.
         B     CMDSCANV          PROCESS IT.
         SPACE
VIRTOPTN XC    VWORDONE,VWORDONE CLEAR SYSTEM ABEND CODE.
         CLI   VCANDBAR,C'B'     IN VIRTUAL STORAGE BROWSE MODE?
         BE    VIRTBRWS          YES, BROWSE VIRTUAL STORAGE CONTENTS.
         SPACE
REDOVIRT L     R1,CRNTOPTN       POINT TO CURRENT OPTION ENTRY.
         MVI   13(R1),LL         RESET LINE LENGTH.
         L     R7,=A(VOPTSHOW)
         CLI   VCANDBAR,C' '     ANY SUB-OPTION SELECTED?
         BNHR  R7                NO, SHOW SUB-OPTION LIST.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         MVI   WINLNLEN+1,LL     RESET LINE LENGTH.
         LA    R1,1
         ST    R1,WINLINES       INITIALIZE LINE COUNTER.
         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.
         DROP  R15               WNDWMNGR.
         MVC   0(LL-79,R2),HIGHX LOAD HEADING ATTRIBUTES.
         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)
         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)
         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)
         MVI   ENDDEPTH+1,1      YES, MAKE PF3 SHOW LIST.
         CLI   VCANDBAR,C'C'     IN COMMON SERVICE AREA DISPLAY MODE?
         BE    CSAMON            YES, SHOW COMMON SERVICE AREA USAGE.
         CLI   VCANDBAR,C'V'     IN VIRTUAL STORAGE STRUCTURE MODE?
         BNE   COMNLIST          NO, PERFORM VSMLIST PROCESSING.
         MVC   LL-79(79,R2),HEADINGV     LOAD DISPLAYABLE
         TR    LL-79(79,R2),XLATETBL          HEADING.
         LA    R2,LL(,R2)        POINT PAST HEADING.
         SLR   R3,R3
         ST    R3,VWORDCNT       RESET DISPLAYED-AREAS COUNTER.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R3,CVTSMEXT       POINT TO CVT STORAGE MAP EXTENSION.
         DROP  R3                CVT.
         LA    R4,PARTITNS       POINT TO STORAGE PARTITION NAME TABLE.
         LA    R5,10             REPORT UP TO TEN STORAGE AREAS.
CALLPUTP BAS   R9,PUTPRTN1       CALL DETAIL LINE SUBROUTINE.
         LA    R3,8(,R3)         POINT TO THE NEXT AREA'S ADDRESSES.
         BCT   R5,CALLPUTP       PROCESS THE NEXT AREA'S DETAILS.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R6,CVTGDA         POINT TO THE GLOBAL DATA AREA.
         DROP  R3                CVT.
         USING GDA,R6
         LA    R3,GDACSA         POINT TO CSA ADDRESS VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         LA    R3,GDAECSA        POINT TO ECSA ADDRESS VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         LA    R3,GDASQA         POINT TO SQA ADDRESS VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         LA    R3,GDAESQA        POINT TO ESQA ADDRESS VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         L     R7,PSAAOLD        POINT TO THE CURRENT ASCB.
         USING ASCB,R7
         L     R7,ASCBLDA        POINT TO THE VSM LOCAL DATA AREA.
         DROP  R7                ASCB.
         USING LDA,R7
         LA    R3,LDASTRTA       POINT TO ADDRESS SPACE REGION VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         LA    R3,LDAESTRA       POINT TO EXTENDED REGION VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         LA    R3,LDASTRTS       POINT TO SYSTEM REGION VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         LA    R3,LDAESTRS       POINT TO EXTNDED SYSTEM REGION VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         L     R3,LDASTRTS       GET SIZE OF PSA.
         XC    WORK,WORK
         ST    R3,WORK+4
         LA    R3,WORK           POINT TO PREFIXED SAVE AREA VALUES.
         BAS   R9,PUTPRTN2       CALL DETAIL LINE SUBROUTINE.
         DROP  R7                LDA.
VIRTSORT MVI   VWORDONE,0        CLEAR A BYTE.
         L     R9,VWORDCNT       GET NUMBER OF VS AREAS REPORTED.
         BCTR  R9,0              TROUBLE IF ONLY ONE (IMPOSSIBLE).
         L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R1
         L     R1,WINBUFF        GET WINDOW BUFFER START ADDRESS.
         DROP  R1                WNDWMNGR.
         LA    R1,LL(,R1)        POINT TO FIRST DETAIL LINE.
VIRTCMPR CLC   LL-4(4,R1),LL+LL-4(R1)  IN DESCENDING ADDRESS ORDER?
         BH    VIRTLESS          YES, DON'T SWAP THESE TWO LINES.
         XC    LL(LL,R1),0(R1)   NO, SWAP THESE TWO LINES.
         XC    0(LL,R1),LL(R1)
         XC    LL(LL,R1),0(R1)
         MVI   VWORDONE,1        INDICATE A SWAP TOOK PLACE.
VIRTLESS LA    R1,LL(,R1)        POINT TO NEXT DETAIL LINE.
         BCT   R9,VIRTCMPR       COMPARE NEXT PAIR OF DETAIL LINES.
         CLI   VWORDONE,0        ANY BUBBLING IN THIS SORT PASS?
         BNE   VIRTSORT          YES, MAY NOT BE FINISHED YET.
         L     R9,VWORDCNT       GET NUMBER OF VS AREAS REPORTED.
         L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R1
         L     R1,WINBUFF        GET WINDOW BUFFER START ADDRESS.
         DROP  R1                WNDWMNGR.
         LA    R1,LL(,R1)        POINT TO FIRST DETAIL LINE.
VIRTBLNK MVC   LL-4(4,R1),BLANKS ERASE SORT FIELDS PRIOR TO DISPLAY.
         LA    R1,LL(,R1)        POINT TO NEXT DETAIL LINE.
         BCT   R9,VIRTBLNK       CLEAN UP NEXT DETAIL LINE.
         MVC   0(LL-80,R2),MEDX  MEDIUM INTENSITY AND
         MVI   LL-80(R2),X'F5'   TURQUOISE FOR SQA DETAILS.
         MVI   LL-79(R2),C' '    CLEAR DISPLAY LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   18(21,R2),=CL21'SQA OVERFLOW INTO CSA'
         L     R1,GDACSACV       GET AMOUNT OF SQA OVERFLOW INTO CSA.
         LA    R1,1023(,R1)      ROUND TO NEXT HIGHEST KILOBYTE.
         SRL   R1,10
         CVD   R1,WORK
         MVC   WORK2,ED7
         ED    WORK2,WORK+4
         MVC   9(7,R2),WORK2+1   DISPLAY KILOBYTES OF CSA
         MVI   16(R2),C'K'               CONVERTED INTO SQA.
         MVC   52(33,R2),=CL33'UNALLOCATED COMMON <16M (CSA+SQA)'
         L     R1,GDACSARE       GET AMOUNT OF UNALLOCATED COMMON.
         LA    R1,1023(,R1)      ROUND TO NEXT HIGHEST KILOBYTE.
         SRL   R1,10
         CVD   R1,WORK
         MVC   42(8,R2),ED7      HOPE THERE IS SOME, OR BIG TROUBLE!
         ED    42(8,R2),WORK+4   DISPLAY KILOBYTES OF UNALLOCATED
         MVI   50(R2),C'K'               CSA AND SQA.
         BAS   R14,VADDLINE      LINE NOW COMPLETE.
         MVC   0(LL-80,R2),MEDX  MEDIUM INTENSITY AND
         MVI   LL-80(R2),X'F1'   BLUE FOR CSA DETAILS.
         MVI   LL-79(R2),C' '    CLEAR DISPLAY LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         SLR   R1,R1             ZERO CSA FBQE SPACE COUNTER.
         L     R3,GDAFBQCF       POINT TO FIRST CSA FBQE.
         USING FBQE,R3
         C     R3,FBQENEXT       IS THE CHAIN EMPTY?
         BE    CSACROOK          YES, NO FREE CSA PAGES LEFT.
CSAFBQES AL    R1,FBQESIZE       ADD FREE SPACE OF CSA.
         C     R3,GDAFBQCL       FINISHED WITH LAST CSA FBQE?
         BE    CSACROOK          YES, TALLY UP THE RESULTS.
         L     R3,FBQENEXT       POINT TO NEXT FBQE ON CHAIN.
         B     CSAFBQES          PROCESS IT.
CSACROOK SRL   R1,10             GET 4 TIMES NUMBER OF FREE CSA PAGES.
         CVD   R1,WORK
         MVC   10(7,R2),ED5      LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    10(6,R2),WORK+5
         MVC   18(19,R2),=CL19'OF CSA PAGES UNUSED'
         SLR   R1,R1             ZERO ECSA FBQE SPACE COUNTER.
         L     R3,GDAEFBCF       POINT TO FIRST ECSA FBQE.
         C     R3,FBQENEXT       IS THE CHAIN EMPTY?
         BE    CSECROOK          YES, NO FREE ECSA PAGES LEFT.
ECSAFBQE AL    R1,FBQESIZE       ADD FREE SPACE OF ECSA.
         C     R3,GDAEFBCL       FINISHED WITH LAST ECSA FBQE?
         BE    CSECROOK          YES, TALLY UP THE RESULTS.
         L     R3,FBQENEXT       POINT TO NEXT FBQE ON CHAIN.
         B     ECSAFBQE          PROCESS IT.
         DROP  R3                FBQE.
CSECROOK SRL   R1,10             GET 4 TIMES NUMBER OF FREE ECSA PAGES.
         CVD   R1,WORK
         MVC   42(9,R2),ED7      LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    42(8,R2),WORK+4
         MVC   50(30,R2),=CL30'K OF EXTENDED CSA PAGES UNUSED'
         BAS   R14,VADDLINE      LINE NOW COMPLETE.
         B     TIDYVIRT          FINISH UP WITH SYSTEM SUMMARY ETC.
         DROP  R6                GDA.
         SPACE
COMNLIST MVC   LL-79(79,R2),HEADGDTL     LOAD DISPLAYABLE
         TR    LL-79(79,R2),XLATETBL          HEADING.
         LA    R2,LL(,R2)        POINT PAST HEADING.
         ICM   R1,15,VSREG1      VSMLIST WORK AREA GETMAINED?
         BNZ   VSMWKOK           YES.
         L     R0,VSREG0         GET VSMLIST WORKAREA SIZE.
         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=ANY
         ST    R1,VSREG1         SAVE VSAMLIST WORKAREA ADDRESS.
         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.
VSMWKOK  LM    R0,R1,VSREGS      LOAD VSMLIST WORK AREA PARTICULARS.
         SLR   R3,R3
         ST    R3,0(,R1)         ZERO THE FIRST WORD OF THE WORK AREA.
         CLI   VCANDBAR,C'D'     CSA DETAILS REQUESTED?
         BE    CSALIST           YES.
         CLI   VCANDBAR,C'S'     SQA DETAILS REQUESTED?
         BE    SQALIST           YES.
         CLI   VCANDBAR,C'P'     PVT DETAILS REQUESTED?
         BE    PVTLIST           YES.
         VSMLIST SP=LSQA,WKAREA=((1),(0)),SPACE=ALLOC,LOC=31,REAL64,   +
               LINKAGE=SYSTEM    LOAD SUBPOOL DETAILS INTO WORK AREA.
         B     VSMLISTD
PVTLIST  DS    0H
         L     R5,PSAAOLD        POINT TO THE CURRENT ASCB.
         USING ASCB,R5
         L     R5,ASCBASXB       POINT TO THE CURRENT ASXB.
         DROP  R5                ASCB.
         USING ASXB,R5
         L     R5,ASXBFTCB       POINT TO THE CURRENT RCT TCB.
         DROP  R5                ASXB.
         VSMLIST SP=PVT,WKAREA=((1),(0)),TCB=((5),ALL),SPACE=ALLOC,    +
               LOC=ANY,REAL64,LINKAGE=SYSTEM
         B     VSMLISTD
SQALIST  DS    0H
         VSMLIST SP=SQA,WKAREA=((1),(0)),SPACE=ALLOC,LOC=31,REAL64,    +
               LINKAGE=SYSTEM    LOAD SUBPOOL DETAILS INTO WORK AREA.
         B     VSMLISTD
CSALIST  DS    0H
         VSMLIST SP=CSA,WKAREA=((1),(0)),SPACE=ALLOC,LOC=31,REAL64,    +
               LINKAGE=SYSTEM    LOAD SUBPOOL DETAILS INTO WORK AREA.
VSMLISTD L     R1,VSREG1         POINT TO THE WORK AREA.
         L     R3,4(,R1)         GET ADDRESS OF RETURNED DATA AREA.
         LA    R7,1              PRETEND THIS ALL BELONGS TO ONE TASK.
         CLI   VCANDBAR,C'P'     PRIVATE AREA DETAILS?
         BNE   NOPVTTCB          NO.
         L     R7,0(,R3)         YES, GET REAL NUMBER OF TASKS.
         LA    R3,4(,R3)         POINT TO TCB ADDRESS.
VPVTTASK LA    R3,4(,R3)         POINT TO TASK SUBPOOL COUNT.
NOPVTTCB L     R4,0(,R3)         GET THE NUMBER OF SUBPOOLS DESCRIBED.
         LA    R3,4(,R3)         POINT TO FIRST SUBPOOL DESCRIPTOR.
         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.
         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
VSUBPOOL SLR   R15,R15
         IC    R15,2(,R3)        LOAD SUBPOOL ID.
         CVD   R15,WORK
         MVC   LL-77(4,R2),ED3
         ED    LL-77(4,R2),WORK+6     DISPLAY SUBPOOL ID.
         IC    R15,3(,R3)        LOAD STORAGE PROTECT KEY.
         SRL   R15,4             SHIFT TO LOW-ORDER FOUR BITS.
         IC    R15,HEX(R15)      GET STORAGE KEY CHARACTER.
         STC   R15,LL-69(,R2)    DISPLAY STORAGE KEY CHARACTER.
         CLI   VCANDBAR,C'P'     PVT VSMLIST?
         BNE   VSKIPTCB          NO, FORGET ABOUT OWNING TCB.
         MVC   LL-19(3,R2),=C'TCB'
         UNPK  LL-15(7,R2),5(4,3)
         TR    LL-15(6,R2),HEX-C'0'
         MVI   LL-9(R2),C' '     DISPLAY OWNING TCB ADDRESS.
VSKIPTCB AH    R3,0(,R3)         POINT PAST SUBPOOL DESCRIPTOR.
         L     R6,0(,R3)         GET THE NUMBER OF BLOCKS ALLOCATED.
         LA    R3,4(,R3)         POINT PAST BLOCK COUNT.
VALOCBLK L     R15,0(,R3)        GET ALLOCATED BLOCK ADDRESS.
         LA    R15,0(,R15)       ENSURE A ZERO SIGN BIT.
         ST    R15,WORK
         NI    WORK+3,X'FE'      ENSURE ADDRESS IS EVEN.
         MVI   LL-65(R2),X'24'
         UNPK  LL-64(9,R2),WORK(5)   DISPLAY BLOCK ADDRESS.
         TR    LL-64(8,R2),HEX-C'0'
         MVI   LL-56(R2),X'25'
         L     R15,4(,R3)        GET ALLOCATED BLOCK LENGTH.
         LA    R15,1023(,R15)
         SRL   R15,10            ROUND UP TO KILOBYTE BOUNDARY.
         CVD   R15,WORK
         MVC   LL-54(7,R2),ED5   LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    LL-54(6,R2),WORK+5
         MVI   LL-44(R2),C'('
         UNPK  LL-43(9,R2),4(5,R3)    ALSO SHOW BYTE COUNT IN HEX.
         TR    LL-43(8,R2),HEX-C'0'
         MVI   LL-35(R2),C')'
         TM    0(R3),X'80'       NEED TO BACK BELOW THE LINE?
         BZ    GOTR31BK          YES.
         MVC   LL-29(4,R2),=C'R=31'
GOTR31BK TM    3(R3),X'01'       NEED TO BACK BELOW THE BAR?
         BZ    GOTRBACK          YES.
         MVC   LL-29(4,R2),=C'R=64'
GOTRBACK LA    R3,8(,R3)         POINT PAST ALLOCATED BLOCK DESCRIPTOR.
         BAS   R14,VVSMLINE      LINE NOW COMPLETE.
VSMRESUM MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.
         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         BCT   R6,VALOCBLK       PROCESS NEXT ALLOCATED BLOCK.
         BCT   R4,VSUBPOOL       PROCESS NEXT SUBPOOL.
         BCT   R7,VPVTTASK       PROCESS NEXT TASK.
         B     TIDYVIRT          FINISH UP WITH SYSTEM SUMMARY &C.
VSMRETRN LTR   R6,R6             END OF ALLCOATED BLOCKS REACHED?
         BNZ   VSMRESUM          NO, RESUME FROM INTERRUPTION.
         LTR   R4,R4             END OF SUBPOOLS REACHED?
         BNZ   VSMRESUM          NO, RESUME FROM INTERRUPTION.
         LTR   R7,R7             END OF TASKS REACHED?
         BNZ   VSMRESUM          NO, RESUME FROM INTERRUPTION.
         B     VSMWKOK           YES, RESTART DISPLAY.
         SPACE
CSAMON   MVC   LL-79(79,R2),HEADGCSA     LOAD DISPLAYABLE HEADING.
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BO    CSAHDGOK          YES.
         MVC   LL-44(7,R2),HEADGCSA+46
         MVC   LL-36(36,R2),LL-37(R2)
         MVC   LL-31(5,R2),=C'TOTAL'
CSAHDGOK TR    LL-79(79,R2),XLATETBL
         LA    R2,LL(,R2)        POINT PAST HEADING.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R3,CVTGDA         POINT TO THE GLOBAL DATA AREA.
         DROP  R3                CVT.
         USING GDA,R3
         L     R3,GDASPT         POINT TO THE CSA SUBPOOL TABLE.
         DROP  R3                GDA.
         USING SPT,R3
         LA    R3,SPTNTRY        POINT TO FIRST SUBPOOL ENTRY.
         DROP  R3                SPT.
         LA    R4,CSASPIDS       POINT TO CSA SUBPOOL IDS LIST.
         XC    VLOWRLOW(24),VLOWRLOW  RESET CSA/ECSA ACCUMULATORS.
NEXTSPID SLR   R5,R5             RESET KEY INDICATOR.
         LA    R6,16             16 DIFFERENT STORAGE PROTECT KEYS.
NEXTKEY  MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.
         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-79(3,R2),0(R4) LOAD SUBPOOL ID.
         LA    R1,HEX(R5)        GET STORAGE KEY CHARACTER.
         MVC   LL-72(1,R2),0(R1) DISPLAY STORAGE KEY CHARACTER.
         LA    R1,LL-68(,R2)     ADJUST BUFFER POINTER.
         LA    R0,3              THREE ENTRIES PER KEY PER SUBPOOL.
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   *+8               NO.
         LA    R0,5              FIVE ENTRIES PER KEY PER SUBPOOL.
         LA    R7,VLOWRLOW       POINT TO FIRST COLUMN ACCUMULATOR.
         SLR   R15,R15           ZERO SUBPOOL/KEY ACCUMULATOR.
NXTENTYP LR    R14,R3            POINT TO FIRST DQE POINTER.
         SLR   R9,R9             ZERO STORAGE AMOUNT ACCUMULATOR.
         USING DQE,R14
NEXTDQE  L     R14,DQENEXT       POINT TO DQE.
         CR    R14,R3            END OF CHAIN?
         BE    DONSPKEY          YES, DONE THIS KEY FOR THIS SUBPOOL.
         A     R9,DQESIZE        NO, ACCUMULATE STORAGE SIZE.
         B     NEXTDQE           LOOK AT THE NEXT DQE.
         DROP  R14               DQE.
DONSPKEY SRL   R9,10             CONVERT BYTES TO KILOBYTES.
         CVD   R9,WORK
         AR    R15,R9            ACUMMULATE LINE TOTAL.
         A     R9,0(,R7)
         ST    R9,0(,R7)         ACCUMULATE COLUMN TOTAL.
         MVC   0(8,R1),ED7       LOAD EDIT MASK.
         MVI   8(R1),C'K'        LOAD KILOBYTES FLAG.
         ED    0(8,R1),WORK+4
         LA    R1,11(,R1)        ADJUST BUFFER POINTER.
         LA    R3,8(,R3)         ADJUST SUBPOOL TABLE ENTRY POINTER.
         LA    R7,4(,R7)         POINT TO NEXT COLUMN ACCUMULATOR.
         BCT   R0,NXTENTYP       PROCESS NEXT ENTRY TYPE.
         CVD   R15,WORK          DISPLAY TOTAL FOR LINE.
         MVC   0(8,R1),ED7       LOAD EDIT MASK.
         MVI   8(R1),C'K'        LOAD KILOBYTES FLAG.
         ED    0(8,R1),WORK+4
         LTR   R15,R15           ANY NON-ZERO DATA IN THIS LINE?
         BZ    CSALINOK          NO, DO NOT KEEP THIS DETAIL LINE.
         ST    R15,WORK          YES, SAVE LINE TOTAL.
         BAS   R14,VADDLINE      LINE NOW COMPLETE.
         L     R15,WORK          RESTORE LINE TOTAL.
CSALINOK A     R15,0(,R7)
         ST    R15,0(,R7)        ACCUMULATE COLUMN TOTAL.
         LA    R5,1(,R5)         INCREMENT STORAGE PROTECT KEY.
         BCT   R6,NEXTKEY        PROCESS NEXT STORAGE PROTECT KEY.
         LA    R4,3(,R4)         POINT TO NEXT SUBPOOL ID.
         LA    R1,SPIDSEND       POINT TO END OF SUBPOOL IDS.
         CR    R4,R1             DONE LAST CSA SUBPOOL?
         BL    NEXTSPID          NO, PROCESS THIS SUBPOOL.
PUTOTALS MVC   0(LL-79,R2),HIGHX SUPPLY ATTRIBUTE BYTES.
         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-76(5,R2),=C'TOTAL'   LOAD LINE TITLE.
         LA    R1,LL-68(,R2)     ADJUST BUFFER POINTER.
         LA    R0,4              FOUR TOTALS TO REPORT.
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   *+8               NO.
         LA    R0,6              YES, FOUR TOTALS TO REPORT.
         LA    R7,VLOWRLOW       POINT TO FIRST COLUMN ACCUMULATOR.
CSATOTES L     R9,0(,R7)         GET TOTAL.
         CVD   R9,WORK
         MVC   0(8,R1),ED7       LOAD EDIT MASK.
         MVI   8(R1),C'K'        LOAD KILOBYTES FLAG.
         ED    0(8,R1),WORK+4
         LA    R1,11(,R1)        ADJUST BUFFER POINTER.
         LA    R7,4(,R7)         POINT TO NEXT TOTAL ACCUMULATOR.
         BCT   R0,CSATOTES
         ST    R0,VALLRALL       FLAG THAT ACCUMULATORS SHOWN.
         BAS   R14,VADDLINE      LINE NOW COMPLETE.
         B     TIDYVIRT          FINISH UP WITH SYSTEM SUMMARY ETC.
         SPACE
BFNDATTN NI    MODESW2,255-ATTN  RESET ATTENTION FLAG.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    FAESTAE0          NO, DISABLE ESTAE NOW.
         CLC   BRWSHOME,BRWSASID IN CROSS-MEMORY MODE?
         BE    FARESTMC          NO, DISABLE ESTAE NOW.
         SAC   X'000'            YES, REVERT TO PRIMARY SPACE MODE.
         LAM   A0,A15,SECWORKA+64  RESTORE ACCESS REGISTER VALUES.
**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.
**       MVC   WORK+2(2),BRWSHOME  GET SECONDARY ASID.
**       MVC   WORK+6(2),BRWSHOME  GET PRIMARY ASID.
**       LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.
         LH    R1,BRWSHOME       GET PRIMARY ASID.
         SSAR  R1                CANCEL SECONDARY ASID TRANSLATION.
         L     R1,AXVALUE        GET SAVED AX NUMBER.
         AXSET AX=(1)            SET AX = 0.
FARESTMC STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.
         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.
FAESTAE0 ESTAE 0                 DISABLE TASK ABNORMAL EXIT.
         STFSMODE ON,NOEDIT=YES  RESTORE VTAM FULL SCREEN MODE.
VBASBRWS NI    VBDSTOKN,X'7F'    INVALIDATE DATASPACE SPACE TOKEN.
VIRTBRWS MVI   ENDDEPTH+1,1      MAKE PF3 SHOW SUB-OPTION LIST.
         UNPK  HEADBRWS+41(9),BRWSPNTR(5)
         TR    HEADBRWS+41(8),HEX-C'0'
         MVI   HEADBRWS+49,C' '  SHOW CURRENT POINTER ADDRESS.
         UNPK  HEADBRWS+58(5),BRWSASID(3)
         TR    HEADBRWS+58(4),HEX-C'0'
         MVI   HEADBRWS+62,C' '  SHOW SOURCE ADDRESS SPACE IDENTIFIER.
         L     R1,CRNTOPTN       POINT TO CURRENT OPTION ENTRY.
         LA    R4,WINLINOH       GET LINE OVERHEAD.
         A     R4,VBCOLS         GET LINE LENGTH.
         STH   R4,12(,R1)        SET LINE LENGTH.
         L     R1,INITADDR       GET ADDRESSABILITY TO SCRNHDR.
         USING INITIAL,R1        RESTORE EXPECTED HEADING FORMAT.
         MVC   HOME(HDRLEN),SCRNHDR
         DROP  R1                INITIAL.
         MVC   HEADING,HEADBRWS  LOAD VIRTUAL STORAGE BROWSE HEADING.
         L     R4,BRWSPNTR       GET BROWSE ADDRESS.
         L     R1,VSBTRPTR       POINT TO CURRENT TRACE TABLE ENTRY.
         C     R4,0(,R1)         SAME ADDRESS?
         BE    TRADOKAY          YES, TRACE ADDRESS IS UP-TO-DATE.
         LA    R1,4(,R1)         NO, POINT TO NEXT TRACE TABLE ENTRY.
         LA    R0,VSBTREND       POINT TO END OF TRACE TABLE.
         CR    R1,R0             REACHED THE END?
         BL    TRENTYOK          NO, NOW POINTING TO NEW CURRENT ENTRY.
         LA    R1,VSBTRACE       YES, WRAP AROUND TO THE START.
TRENTYOK ST    R4,0(,R1)         STORE BROWSE ADDRESS IN TRACE TABLE.
         ST    R1,VSBTRPTR       UPDATE TRACE TABLE POINTER.
TRADOKAY SRL   R4,7              TRUNCATE BROWSE ADDRESS TO GET
         SLL   R4,7                       DISPLAY ORIGIN.
         LA    R3,BUFFER
         AHI   R3,VBUFFER-BUFFER GET A HOLDING AREA.
         ST    R3,VWORDTWO       SAVE ITS ADDRESS.
         MVI   WORK2,0           FLAG NO DATA COPIED YET.
         MVI   VALLRALL,X'FF'    INVALIDATE REAL ADDRESS.
         XC    VWORDONE,VWORDONE CLEAR SYSTEM ABEND CODE.
         L     R2,BRWSDSAD       GET DATASPACE ROUTINE ENTRY POINT.
         TM    VBDSTOKN,X'80'    DATASPACE SPACE TOKEN PRESENT?
         BOR   R2                YES, PERFORM DATASPACE PROCESSING.
         MVI   VKEYPROT,7        INVALIDATE VIRTUAL STORAGE KEY.
         LA    R14,X'80'         USE KEY 8 IF NOT APF AUTHORIZED.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'B'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         OC    OPTNATR,C'V'-C' '(R15)  GATE CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BO    DODOVSB0          YES, DO DO A MODESET.
         CLC   BRWSHOME,BRWSASID TRYING TO GO CROSS-MEMORY?
         BE    SKIPVSB0          NO, PROCEED BUT DON'T DO A MODESET.
         B     BROWASID          YES, SUPPRESS IT.
DODOVSB0 DS    0H
         MODESET MF=(E,MDSTSUP0) SUPERVISOR STATE TO BYPASS AX CHECKING
         SLR   R14,R14           KEY ZERO FOR EXTRA FETCH CAPABILITY.
SKIPVSB0 DS    0H
         ESTAE MF=(E,ESTAEONV)   TRAP ABENDS WHILE FETCHING DATA.
         CLC   BRWSHOME,BRWSASID
         BE    HOMEASID          LASP NOT REQUIRED FOR HOME ASID.
         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.
         SLR   R14,R14           KEY ZERO FOR EXTRA FETCH CAPABILITY.
         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.
         LA    R1,1              ADDRESS ALL AX NUMBER.
         AXSET AX=(1)            SET AX = 1.
         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.
**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.
**       MVC   WORK+2(2),BRWSASID  GET SECONDARY ASID.
**       MVC   WORK+6(2),BRWSHOME  GET PRIMARY ASID.
**       LASP  WORK,1            ACTIVATE SECONDARY ASID TRANSLATION.
**       BZ    SKIPLASP          LASP WAS SUCCESSFUL.
**       STH   R14,BRWSASID      SASID ENDED OR SWAPPED OUT SO ZERO IT.
**       B     LASPBACK          PERFORM STATUS RESET AND OKSWAP.
         LH    R1,BRWSASID       GET SECONDARY ASID.
         ICMH  R1,15,BRWSISQN    GET SECONDARY ASID INSTANCE NUMBER.
         BZ    VDOSSAR1
         SSAIR R1                ACTIVATE SECONDARY ASID TRANSLATION.
         B     SKIPLASP
VDOSSAR1 SSAR  R1                ACTIVATE SECONDARY ASID TRANSLATION.
SKIPLASP DS    0H
         TM    OSLEVEL,CVTESA    MVS/ESA?
         BO    VBAXESS1          YES, USE ACCESS REGISTER MODE.
         LA    R5,128            FETCH 128 BYTES OF DATA PER MOVE.
         MVCP  0(R5,R3),0(R4),R14 GET CONSISTENT SNAPSHOT OF 128 BYTES.
         MVI   WORK2,8           FLAG 128 BYTES COPIED (8 DATA LINES).
         MVCP  128(R5,R3),128(R4),R14    GET ANOTHER 128 BYTES.
         MVI   WORK2,16          FLAG 256 BYTES COPIED (16 DATA LINES).
         CLI   COLUMNS+3,80      80-COLUMN SCREEN?
         BNE   RETRYVSB          NO.
         CLI   VBLINES+3,32      AT LEAST 32 SCREEN LINES?
         BL    RETRYVSB          NO.
         MVCP  256(R5,R3),256(R4),R14    GET ANOTHER 128 BYTES.
         MVI   WORK2,24          FLAG 256 BYTES COPIED (24 DATA LINES).
         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?
         BL    RETRYVSB          NO.
         MVCP  384(R5,R3),384(R4),R14    GET ANOTHER 128 BYTES.
         MVI   WORK2,32          FLAG 256 BYTES COPIED (32 DATA LINES).
RETRYVSB DS    0H
         CLI   WORK2,X'FA'       WAS FIND ACTIVE AT TIME OF ABEND?
         BE    BFNDABND          YES, CHECK FOR TRANSLATION EXCEPTION.
VSBRSPND LTR   R14,R14           RUNNING AUTHORIZED?
         BNZ   UNLASPED          NO, DON'T DO A LASP.
         CLC   BRWSHOME,BRWSASID
         BE    UNLASPED          LASP NOT REQUIRED FOR HOME ASID.
         TM    OSLEVEL,CVTESA    MVS/ESA?
         BNO   LASPBACK          NO, PROCEED WITH "UNLASP".
ESASACBK SAC   X'000'            REVERT TO PRIMARY SPACE MODE.
         LAM   A0,A15,SECWORKA+64 RESTORE ACCESS REGISTER VALUES.
LASPBACK EQU   *
**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.
**       MVC   WORK+2(2),BRWSHOME GET SECONDARY ASID.
**       MVC   WORK+6(2),BRWSHOME GET PRIMARY ASID.
**       LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.
         LH    R1,BRWSHOME       GET NEW SECONDARY ASID.
         SSAR  R1                TERMINATE SECONDARY ASID TRANSLATION.
         L     R1,AXVALUE        GET SAVED AX NUMBER.
         AXSET AX=(1)            SET AX = 0.
         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.
         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.
         B     UNLASPED          CROSS-MEMORY FETCH NOW COMPLETE.
VBAXESS1 XC    SECWORKA(64),SECWORKA   CLEAR SOME STORAGE.
         STAM  A0,A15,SECWORKA+64 SAVE CURRENT ACCESS REGISTER VALUE.
         MVI   SECWORKA+19,1     ONLY AR4 WILL USE SECONDARY.
         LAM   A0,A15,SECWORKA   LOAD NEW ACCESS REGISTER VALUES.
         SAC   X'200'            GET INTO ACCESS REGISTER MODE.
HOMEASID MVC   0(128,R3),0(R4)   GET CONSISTENT SNAPSHOT OF 128 BYTES.
         LTR   R14,R14           RUNNING AUTHORIZED?
         BNZ   VLRADONE          NO, CAN'T DO A LRA.
         L     R1,CVTPTR(,0)     POINT TO THE CVT,
         L     R1,CVTECVT-CVT(,R1)     TO THE ECVT.
         USING ECVT,R1
         CLC   =XL8'0000000080000000',ECVTEORM
         BL    VLRADONE          MORE THAN 2GB REAL SO SKIP LRA.
         DROP  R1                ECVT.
         LRA   R0,0(,R4)         GET REAL ADDRESS OF VIRTUAL STORAGE.
         BNZ   VLRADONE          REAL ADDRESS COULD NOT BE RESOLVED.
         ST    R0,VALLRALL       SAVE THE REAL ADDRESS FOR LATER.
VLRADONE MVI   WORK2,8           FLAG 128 BYTES COPIED (8 DATA LINES).
         LTR   R14,R14           RUNNING AUTHORIZED?
         BNZ   SKIPIVSK          NO, PROBABLY CAN'T DO AN IVSK.
         IVSK  R1,R4             GET KEY AND FETCH PROTECTION BITS.
         STC   R1,VKEYPROT       SAVE THEM.
SKIPIVSK MVC   128(128,R3),128(R4)    GET ANOTHER 128 BYTES.
         MVI   WORK2,16          FLAG 256 BYTES COPIED (16 DATA LINES).
         CLI   COLUMNS+3,80      80-COLUMN SCREEN?
         BNE   VBASIDCK          NO.
         CLI   VBLINES+3,32      AT LEAST 32 SCREEN LINES?
         BL    VBASIDCK          NO.
         MVC   256(128,R3),256(R4)    GET ANOTHER 128 BYTES.
         MVI   WORK2,24          FLAG 256 BYTES COPIED (24 DATA LINES).
         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?
         BL    VBASIDCK          NO.
         MVC   384(128,R3),384(R4)    GET ANOTHER 128 BYTES.
         MVI   WORK2,32          FLAG 256 BYTES COPIED (32 DATA LINES).
VBASIDCK CLC   BRWSHOME,BRWSASID
         BNE   ESASACBK          UNDO ESA CROSS MEMORY.
UNLASPED DS    0H
         ESTAE 0                 DISABLE TASK ABNORMAL EXIT.
         LTR   R14,R14           RUNNING AUTHORIZED?
         BNZ   SKIPVSB8          NO, CAN'T DO A MODESET.
         MODESET MF=(E,MDSTPROB) BACK TO TASK'S KEY AND PROBLEM STATE.
SKIPVSB8 SLR   R0,R0
         LA    R2,BUFFER         RESET BUFFER POINTER.
         LR    R14,R2            POINT TO BUFFER.
         LHI   R15,124*LL        GET ITS LENGTH.
         LA    R1,C' '
         SLL   R1,24             SET PAD TO BLANK AND ZERO LENGTH.
         MVCL  R14,R0            BLANK DETAIL LINE BUFFER.
         A     R2,VBCOLS         ADD SCREEN WIDTH.
         AHI   R2,-80            POINT TO FIRST DETAIL LINE.
         CLI   VKEYPROT,7        ANY VIRTUAL STORAGE KEY LOADED?
         BE    NOSTGKEY          NO, CAN'T SHOW IT IN THE HEADING.
         IC    R0,VKEYPROT       YES, GET IT.
         SRL   R0,4
         STC   R0,HEADING+7      SHOW IT IN THE HEADING.
         TR    HEADING+7(1),HEX  MAKE DISPLAYABLE.
         MVC   HEADING+3(3),=C'KEY'
         TM    VKEYPROT,X'08'    FETCH PROTECTED STORAGE?
         BZ    NOSTGKEY          NO.
         MVC   HEADING+63(8),=C'(F-PROT)'
NOSTGKEY ICM   R0,1,WORK2        GET THE NUMBER OF LINES TO FORMAT.
         BNZ   BRWSLOOP          GOT SOME SO GET TO IT.
BRWSABND L     R15,=A(VBPNKMSG)  LOAD PINK ERROR MESSAGE ROUTINE EP.
         BR    R15               INVOKE IT.
BFNDABND CLC   S0C4,VWORDONE+1   S0C4 ABEND?
         BNE   VSBRSPND          NO, DISPLAY DATA AT ABEND ADDRESS.
         LA    R1,12             12 BITS FOR OFFSET WITHIN PAGE.
         CLI   VWORDCNT+1,X'10'  SEGMENT TRANSLATION EXCEPTION?
         BNE   BFSKIPPG          NO, JUST JUMP OVER A SINGLE PAGE.
         LA    R1,20             20 BITS FOR OFFSET WITHIN SEGMENT.
BFSKIPPG L     R4,BRWSPNTR       NO, GET ABEND ADDRESS.
         LA    R4,30(,R4)        ENSURE INTO PROBLEM PAGE.
         SRL   R4,0(R1)          GET VIRTUAL PAGE OR SEGMENT NUMBER.
         LA    R4,1(,R4)         JUMP OVER ABSENT/UNREADABLE AREA.
         SLL   R4,0(R1)          TRANSFORM INTO VIRTUAL ADDRESS.
         BCTR  R4,0              POINT TO BEFORE SEARCH START ADDRESS.
         CLC   BRWSASID,BRWSHOME CROSS-MEMORY ACCESS?
         BE    BFNDLOOP          NO, RESUME FIND SEARCH.
         LA    R1,1
         SAR   A4,R1             ENSURE SECONDARY A.S. ADDRESSABILITY.
         B     BFNDLOOP          RESUME FIND SEARCH.
BRWSLOOP MVC   0(LL-79,R2),LOWX
         CHI   R0,1              FORMATTING LAST LINE?
         BNE   *+8               NO.
         MVI   2(R2),X'F4'       USE UNDERSCORE FOR LAST LINE.  (I3279)
         LR    R14,R2            REMEMBER ADDRESS OF LINE ATTRIBUTES.
         LA    R2,LL-80(,R2)     POINT PAST MOST 3270 ATTRIBUTES.
         UNPK  12(5,R2),0(3,R3)  UNPACK TWO BYTES OF DATA.
         TR    12(4,R2),HEX-C'0' MAKE IT DISPLAYABLE.
         MVI   16(R2),C' '       ERASE GARBAGE.
         UNPK  17(5,R2),2(3,R3)
         TR    17(4,R2),HEX-C'0'
         MVI   21(R2),C' '
         UNPK  23(5,R2),4(3,R3)
         TR    23(4,R2),HEX-C'0'
         MVI   27(R2),C' '
         UNPK  28(5,R2),6(3,R3)
         TR    28(4,R2),HEX-C'0'
         MVI   32(R2),C' '
         UNPK  35(5,R2),8(3,R3)
         TR    35(4,R2),HEX-C'0'
         MVI   39(R2),C' '
         UNPK  40(5,R2),10(3,R3)
         TR    40(4,R2),HEX-C'0'
         MVI   44(R2),C' '
         UNPK  46(5,R2),12(3,R3)
         TR    46(4,R2),HEX-C'0'
         MVI   50(R2),C' '
         UNPK  51(5,R2),14(3,R3)
         TR    51(4,R2),HEX-C'0'
         MVI   55(R2),C' '
         ICM   R15,15,BRWSPNTR   GET CURRENT BROWSE POINTER.
         BM    VSBFMTTT          NEGATIVE SO FORMAT TRACE TABLE.
         MVI   61(R2),C'|'
         MVI   78(R2),C'|'       SUPPLY CHARACTER BORDERS.
         MVC   62(16,R2),0(R3)   LOAD SIXTEEN BYTES TO BE SHOWN.
         TR    62(16,R2),XLATETBL  AVOID SCREEN ERRORS.
         ST    R4,WORK           GET THE ADDRESS.
         UNPK  1(9,R2),WORK(5)   UNPACK THE DISPLAY ADDRESS.
         TR    1(8,R2),HEX-C'0'  MAKE IT DISPLAYABLE.
         MVI   9(R2),C' '        ERASE GARBAGE.
         B     VSBFLGOK
VSBFMTTT L     R15,VSBTRPTR      GET CURRENT TRACE POINTER.
VSBFLGOK SR    R15,R4            GET POINTER MINUS START-OF-LINE-ADDR.
         BM    NOTBLINE          PAST IT.
         CHI   R15,16            IS IT ON THIS LINE?
         BNL   NOTBLINE          NO, NOT UP TO IT YET.
         MVC   0(LL-79,R14),HIGHX    SHOW THIS LINE IN HIGH INTENSITY.
         SLL   R15,1             GET INDEX INTO OFFSET/INDICATOR TABLE.
         LA    R15,BRWSFLAG(R15) POINT TO OFFSET AND INDICATOR.
         SLR   R14,R14
         IC    R14,0(,R15)       GET DISPLAY LINE OFFSET.
         IC    R15,1(,R15)       GET INDICATOR.
         LA    R14,1(R14,R2)     POINT TO FLAG'S POSITION.
         STC   R15,0(,R14)       PLACE THE FLAG THERE.
         L     R15,=A(VBDISASM)
         BASR  R14,R15           SHOW INSTRUCTION MNEMONIC.
NOTBLINE A     R2,VBCOLS         POINT TO NEXT DETAIL LINE.
         LA    R4,16(,R4)        GET NEXT LINE'S DATA ADDRESS.
         LA    R3,16(,R3)        POINT TO NEXT LINE'S DISPLAY DATA.
         BCT   R0,BRWSLOOP       FORMAT NEXT DETAIL LINE.
         TM    BRWSPNTR,X'80'    IS TRACE TABLE DISPLAY FLAG IS ON?
         BO    VSBTTOFF          YES, GO TURN IT OFF.
         CLI   WORK2,8           TARGET DATA FETCHED OKAY?
         BL    BRWSABND          NO, MUST HAVE ABENDED.
         ICM   R0,15,VWORDONE    ZERO ABEND CODE?
         BNZ   BRWSABND          NO, MUST HAVE ABENDED.
VBPNKRTN TM    VBDSTOKN,X'80'    SHOWING DATASPACE DATA?
         BO    TIDYBRWS          YES, END OF THINGS TO FORMAT.
         SPACE
         MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.
         MVI   VPARTFLG,C' '     CLEAR STORAGE PARTITION FLAG.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R4,CVTSMEXT       POINT TO CVT STORAGE MAP EXTENSION.
         USING CVTVSTGX,R4
         L     R5,BRWSPNTR       LOAD TARGET VIRTUAL ADDRESS.
         LA    R6,4095
         TM    FLCARCH,PSAZARCH  Z/ARCHITECTURE?
         BNO   *+8               NO.
         LA    R6,1(R6,R6)       YES, DOUBLE PSA SIZE.
         CR    R5,R6             PREFIXED SAVE AREA?
         BNH   QISNUC            YES, SHOW AS NUCLEUS.
         C     R5,CVTRWNS        BELOW THE NUCLEUS?
         BL    QNOTNUC           YES.
         C     R5,CVTERWNE       ABOVE THE NUCLEUS?
         BH    QNOTENUC          YES.
         DROP  R4                CVTVSTGX.
         SPACE
QISNUC   MVC   LL-78(7,2),=C'NUCLEUS'
         SLR   R0,R0             CLEAR FOR INSERT.
         L     R3,CVTNUCMP       POINT TO THE NUCLEUS MAP.
         DROP  R3                CVT.
         L     R4,12(,R3)        GET LENGTH OF NUCLEUS MAP.
         SRL   R4,4              DIVIDE BY 16 FOR ENTRY POINT COUNT.
         LA    R3,16(,R3)        POINT TO THE FIRST ENTRY.
         BCTR  R4,0              DECREMENT FOR HEADER.
QNUCLOOP TM    12(R3),X'10'      JUST AN ENTRY POINT?
         BZ    QNXTNUCE          YES, SKIP IT.
         L     R1,8(,R3)         NO, LOAD CSECT START ADDRESS.
         CR    R5,R1             NO, PAST REQUIRED CSECT?
         BL    QNUCGAP           YES, MUST BE INTER-CSECT GAP.
         ICM   R0,7,13(R3)       NO, LOAD CSECT LENGTH.
         ALR   R1,R0             POINT PAST END OF CSECT.
         CR    R5,R1             IN THIS CSECT?
         BNL   QNXTNUCE          NO, TRY NEXT CSECT.
         MVC   LL-70(5,R2),=C'CSECT'
         TM    12(R3),X'08'      READ-ONLY SECTION?
         BZ    QNUCREAD          NO.
         MVI   LL-70(R2),C'R'    YES, INDICATE THIS.
QNUCREAD MVC   LL-64(8,R2),0(3)  SHOW CSECT NAME.
         MVC   LL-51(8,R2),=C'OFFSET +'
         SL    R5,8(,R3)         DETERMINE OFFSET.
         ST    R5,WORK
         UNPK  LL-43(7,R2),WORK+1(4)
         TR    LL-43(6,R2),HEX-C'0'
         MVI   LL-37(R2),C' '    SHOW HEXADECIMAL OFFSET INTO CSECT.
         B     QXITOKAY          EXIT FROM SUBROUTINE.
QNUCGAP  MVC   LL-70(15,R2),=C'INTER-CSECT GAP'
         B     QXITOKAY          EXIT FROM SUBROUTINE.
QNXTNUCE LA    R3,16(,R3)        ADJUST ENTRY POINTER.
         BCT   R4,QNUCLOOP       PROCESS NEXT NUCLEUS MAP ENTRY.
         B     QNUCGAP           HANDLE END OF NUCLEUS.
         SPACE
         USING CVT,R3
         USING CVTVSTGX,R4
QNOTNUC  C     R5,CVTPLPAS       BELOW PLPA?
         BL    QNOTPLPA          YES.
         C     R5,CVTPLPAE       IN PLPA?
         BNH   QISPLPA           YES.
QISSQA   MVI   VPARTFLG,C'S'     FLAG SQA.
         B     REALVIRT          IN SQA SO FORGET MODULE SEARCH.
QNOTENUC C     R5,CVTEPLPE       ABOVE EPLPA?
         BH    QNOTPLPA          YES.
         C     R5,CVTEPLPS       IN EPLPA?
         BL    QISSQA            NO, IN SQA SO FORGET MODULE SEARCH.
         DROP  R4                CVTVSTGX.
         SPACE
QISPLPA  MVC   LL-75(4,R2),=C'PLPA'
         SR    R4,R4             GET ZERO.
         TM    CVTOSLV6,X'10'    TEST CVTH77B0.
         BZ    *+8               NOT AT Z/OS 2.3 LEVEL.
         LA    R4,8              GET HBB77B0 EXTRA LPDE LENGTH.
         L     R3,CVTLPDIA       POINT TO THE LINK PACK AREA DIRECTORY.
         DROP  R3                CVT.
         USING LPDE,R3
QLPDLOOP TM    LPDEATTR,LPDEMIN  JUST A MINOR LPDE?
         BO    QNXTLPDE          YES, SKIP IT.
         L     R1,LPDEXTAD       NO, LOAD MODULE EXTENT START ADDRESS.
         CR    R5,R1             NO, ABOVE REQUIRED ADDRESS?
         BL    QNXTLPDE          YES, CAN'T BE THIS MODULE.
         AL    R1,LPDEXTLN       NO, ADD MODULE EXTENT LENGTH.
         CR    R5,R1             IN THIS MODULE?
         BNL   QNXTLPDE          NO, TRY NEXT MODULE.
         MVC   LL-70(6,R2),=C'MODULE'
*                                SHOW MODULE NAME.
         MVC   LL-63(8,R2),LPDENAME
         TM    LPDEATT2,LPDEAUTH LINKED WITH AC=1?
         BZ    PLPAACOK          NO.
         MVC   LL-32(4,R2),=C'AC=1'
PLPAACOK TM    LPDEATTR,LPDENLR  ONLY LOADABLE?
         BO    PLPAOLOK          NO.
         MVC   LL-27(2,R2),=C'OL'
PLPAOLOK TM    LPDEATTR,LPDEREN  REENTERABLE?
         BZ    PLPARNOK          NO.
         MVC   LL-24(2,R2),=C'RN'
PLPARNOK TM    LPDEATTR,LPDESER  SERIALLY REUSABLE?
         BZ    PLPARUOK          NO.
         MVC   LL-21(2,R2),=C'RU'
PLPARUOK SL    R5,36(,R3)         DETERMINE OFFSET.
PLPAOFST MVC   LL-51(8,R2),=C'OFFSET +'
         ST    R5,WORK
         UNPK  LL-43(7,R2),WORK+1(4)
         TR    LL-43(6,R2),HEX-C'0'
         MVI   LL-37(R2),C' '    SHOW HEXADECIMAL OFFSET INTO MODULE.
         B     QXITOKAY          EXIT FROM SUBROUTINE.
QNXTLPDE LA    R3,40(,R3)        ADJUST LPDE POINTER.
         AR    R3,R4             MAKE OS-DEPENDENT ADJUSTMENT.
         CLI   8(R3),X'FF'       END OF LINK PACK AREA DIRECTORY?
         BNE   QLPDLOOP          NO, PROCESS THIS ENTRY.
         DROP  R3                LPDE.
         LA    R3,16(,R3)        YES, POINT PAST PLPA DIRECTORY.
         CR    R5,R3             IN DIRECTORY?
         BNL   QPLPAGAP          NO.
         MVC   LL-70(9,R2),=C'DIRECTORY'
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         SL    R5,CVTLPDIA       GET PLPA DIRECTORY OFFSET.
         B     PLPAOFST          DISPLAY OFFSET.
QPLPAGAP MVC   LL-70(16,R2),=C'INTER-MODULE GAP'
         B     QXITOKAY          EXIT FROM SUBROUTINE.
         SPACE
QNOTPLPA MVC   LL-75(4,R2),=C'LPAQ'
         L     R3,CVTQLPAQ       POINT TO LPAQ ORIGIN.
         B     QNEXTCDE          CHECK FOR ANY LPAQ MODULES.
         DROP  R3                CVT.
         USING CDENTRY,R3
QCDELOOP TM    CDATTR,X'04'      JUST A MINOR CDE?
         BO    QNEXTCDE          YES, SKIP IT.
         L     R6,20(,R3)        NO, POINT TO EXTENT LIST.
         L     R7,4(,R6)         GET EXTENT COUNT.
         LR    R0,R7             COPY IT,
         SLA   R7,2              GET LENGTH WORDS BYTE COUNT.
         LAE   R7,8(R7,R6)       POINT TO EXTENT ADDRESS LIST.
QEXTLOOP L     R1,0(,R7)         GET EXTENT ADDRESS.
         CR    R5,R1             NO, ABOVE REQUIRED ADDRESS?
         BL    QNEXTEXT          YES, CAN'T BE THIS EXTENT.
         AL    R1,8(,R6)         ADD EXTENT LENGTH.
         LA    R1,0(,R1)         CLEAR FLAG BIT.
         CR    R5,R1             IN THIS EXTENT?
         BL    QTHISEXT          YES.
QNEXTEXT LA    R7,4(,R7)         POINT TO NEXT EXTENT ADDRESS.
         LA    R6,4(,R6)         POINT TO NEXT EXTENT LENGTH.
         BCT   R0,QEXTLOOP       TRY NEXT EXTENT.
         B     QNEXTCDE          TRY NEXT MODULE.
QTHISEXT MVC   LL-70(6,R2),=C'MODULE'
         MVC   LL-63(8,R2),8(R3) SHOW MODULE NAME.
         MVC   LL-51(8,R2),=C'OFFSET +'
         SL    R5,0(,R7)         DETERMINE OFFSET.
         ST    R5,WORK
         UNPK  LL-43(7,R2),WORK+1(4)
         TR    LL-43(6,R2),HEX-C'0'
         MVI   LL-37(R2),C' '    SHOW HEXADECIMAL OFFSET INTO MODULE.
         TM    CDATTR2,CDAUTH    LINKED WITH AC=1?
         BZ    LPAQACOK          NO.
         MVC   LL-32(4,R2),=C'AC=1'
LPAQACOK TM    CDATTR,CDNLR      ONLY LOADABLE?
         BO    LPAQOLOK          NO.
         MVC   LL-27(2,R2),=C'OL'
LPAQOLOK TM    CDATTR,CDREN      REENTERABLE?
         BZ    LPAQRNOK          NO.
         MVC   LL-24(2,R2),=C'RN'
LPAQRNOK TM    CDATTR,CDSER      SERIALLY REUSABLE?
         BZ    LPAQRUOK          NO.
         MVC   LL-21(2,R2),=C'RU'
LPAQRUOK TM    CDATTR2,CDOLY     OVERLAY FORMAT PROGRAM?
         BZ    LPAQOVOK          NO.
         MVC   LL-35(2,R2),=C'OV'
LPAQOVOK TM    CDATTRB,CDCONTMN  CONTAMINATION BIT ON?
         BZ    LPAQCNOK          NO.
         MVC   LL-18(4,R2),=C'CNTM'
LPAQCNOK LH    R0,CDUSE          LOAD USE COUNT.
         CVD   R0,WORK
         OI    WORK+7,X'0F'
         MVC   LL-13(2,R2),=C'US'
         UNPK  LL-11(5,R2),WORK+5(3)
         CLI   LL-11(R2),C'0'    LEADING ZERO?
         BNE   LPAQUSOK          NO.
         MVI   LL-11(R2),C'E'    YES, SHOW SOMETHING A BIT MORE USEFUL.
         CLI   LL-10(R2),C'0'    LEADING ZERO?
         BNE   LPAQUSOK          NO.
         MVI   LL-10(R2),C'='    YES, SHOW SOMETHING A BIT MORE USEFUL.
LPAQUSOK SLR   R0,R0
         IC    R0,CDSP           LOAD SUBPOOL.
         CVD   R0,WORK
         OI    WORK+7,X'0F'
         MVC   LL-5(2,R2),=C'SP'
         UNPK  LL-3(3,R2),WORK+6(2)
         CLC   LL-75(4,R2),=C' JPA'   MODULE WAS IN JPA?
         BE    ENDOFJPA          YES, MAYBE TIDY UP AFTER CROSS MEMORY.
         B     QXITOKAY          NO, EXIT FROM SUBROUTINE.
QNEXTCDE ICM   R3,15,CDCHAIN     POINT TO NEXT CDE.
         BNZ   QCDELOOP          PROCESS THIS ENTRY.
         LAE   R7,0              ZERO AR7.
         DROP  R3                CDENTRY.
*                                END OF JOB PACK AREA CDE CHAIN?
         CLC   LL-75(4,R2),=C' JPA'
         BE    QTCBLOOP          YES, TRY NEXT TCB ON CHAIN.
         L     R15,=A(QSRCHCSA)  LOAD ROUTINE ENTRY POINT.
         BASR  R14,R15           SEARCH CSA'S SUBPOOLS.
         CLC   BRWSHOME,BRWSASID CROSS-MEMORY MODE REQUIRED?
         BE    CANDOJPA          NO, CAN PROCESS OWN JOB PACK AREA.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    REALVIRT          NO, CANNOT LOOK AT JOB PACK AREA.
         MODESET MF=(E,MDSTSUP0) SUPERVISOR STATE FOR SYSEVENT ETC.
         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.
         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.
         LA    R1,1              ADDRESS ALL AX NUMBER.
         AXSET AX=(1)            SET AX = 1.
         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.
**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.
**       MVC   WORK+2(2),BRWSASID GET SECONDARY ASID.
**       MVC   WORK+6(2),BRWSHOME GET PRIMARY ASID.
**       LASP  WORK,1            ACTIVATE SECONDARY ASID TRANSLATION.
**       BNZ   EOESAJPA          LASP WAS NOT SUCCESSFUL.
         LH    R1,BRWSASID       GET SECONDARY ASID.
         ICMH  R1,15,BRWSISQN    GET SECONDARY ASID INSTANCE NUMBER.
         BZ    VDOSSAR2
         SSAIR R1                ACTIVATE SECONDARY ASID TRANSLATION.
         B     VSSAROK2
VDOSSAR2 SSAR  R1                ACTIVATE SECONDARY ASID TRANSLATION.
VSSAROK2 XC    SECWORKA(64),SECWORKA  CLEAR SOME STORAGE.
         STAM  R0,15,SECWORKA+64 SAVE CURRENT ACCESS REGISTER VALUE.
         MVI   SECWORKA+15,1     AR3 WILL USE SECONDARY.
         MVI   SECWORKA+19,1     AR4 WILL USE SECONDARY.
         MVI   SECWORKA+23,1     AR5 WILL USE SECONDARY.
         MVI   SECWORKA+27,1     AR6 WILL USE SECONDARY.
         LAM   A0,A15,SECWORKA   LOAD NEW ACCESS REGISTER VALUES.
         SAC   X'200'            GET INTO ACCESS REGISTER MODE.
CANDOJPA MVC   LL-75(4,R2),=C' JPA'   NO, SEARCH JOB PACK AREA.
         LH    R1,BRWSASID       GET TARGET ASID.
         SLL   R1,2              ASID TIMES 4.
         A     R1,ASVTADDR
*                                POINT TO THE TARGET ASCB.
         ICM   R1,15,ASVTENTY-ASVT-4(R1)
         BM    ENDOFJPA          UNASSIGNED ASID - SHOULD NOT HAPPEN.
         USING ASCB,R1
         L     R4,ASCBASXB       POINT TO THE TARGET ASXB.
         DROP  R1                ASCB.
         USING ASXB,R4
         L     R4,ASXBFTCB       POINT TO FIRST TCB IN TCB CHAIN.
         DROP  R4                ASXB.
         USING TCB,R4
         LA    R3,TCBJPQ         POINT TO TASK'S CDE CHAIN POINTER.
         B     QNEXTCDE          EXAMINE JPA MODULE ADDRESSES.
QTCBLOOP L     R15,=A(QSRCHMSS)  LOAD ROUTINE ENTRY POINT.
         LR    R7,R5             COPY TARGET VIRTUAL ADDRESS.
         BASR  R14,R15           SEARCH TASK'S SUBPOOLS.
         LR    R5,R7             RESTORE BRWSPNTR VALUE.
         ICM   R4,15,TCBTCB      POINT TO NEXT TASK IN TCB CHAIN.
         BZ    ENDOFJPA          NONE SO FINISHED FORMATTING SCREEN.
         LA    R3,TCBJPQ         POINT TO TASK'S CDE CHAIN POINTER.
         B     QNEXTCDE          EXAMINE JPA MODULE ADDRESSES.
         DROP  R4                TCB.
ENDOFJPA CLC   BRWSHOME,BRWSASID IN CROSS-MEMORY MODE?
         BE    QEXITIDY          NO, FINISH FORMATTING SCREEN.
         SAC   X'000'            YES, REVERT TO PRIMARY SPACE MODE.
         LAM   A0,A15,SECWORKA+64 RESTORE ACCESS REGISTER VALUES.
EOESAJPA EQU   *
**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.
**       MVC   WORK+2(2),BRWSHOME  GET SECONDARY ASID.
**       MVC   WORK+6(2),BRWSHOME  GET PRIMARY ASID.
**       LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.
         LH    R1,BRWSHOME       GET NEW SECONDARY ASID.
         SSAR  R1                CANCEL SECONDARY ASID TRANSLATION.
         L     R1,AXVALUE        GET SAVED AX NUMBER.
         AXSET AX=(1)            SET AX = 0.
         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.
         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.
         MODESET MF=(E,MDSTPROB) BACK TO TASK'S KEY AND PROBLEM STATE.
QEXITIDY CLC   LL-5(2,R2),=C'SP' DETAILS SUCCESSFULLY EXTRACTED?
         BNE   REALVIRT          NO.
         SPACE
QXITOKAY CLC   LL-51(8,R2),=C'OFFSET +'
         BNE   QXITLNOK
         LA    R0,5
QXITLNLP CLI   LL-43(R2),C'0'
         BNE   QXITLNOK
         MVC   LL-43(6,R2),LL-42(R2)
         BCT   R0,QXITLNLP
QXITLNOK TR    LL-79(79,R2),XLATETBL    AVOID SCREEN ERRORS.
         LA    R2,LL-80(,R2)
         A     R2,VBCOLS         ADJUST SCREEN BUFFER POINTER.
         SPACE
REALVIRT MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.
         CLI   VPARTFLG,C'S'     STORAGE IN SQA?
         BNE   VSHOWRSA          NO, SHOW REAL STORAGE ADDRESS.
         L     R1,BRWSPNTR       YES, POINT TO ADDRESS.
         VSMLOC SQA,AREA=((1),1) DETERMINE IF ALLOCATED.
         LTR   R15,R15           WAS IT ALLOCATED?
         BNZ   VFREESQA          NO.
         LA    R1,255            YES, REPORT SUBPOOL.
         NR    R0,R1             CLEAR MEANINGLESS BYTES.
         CVD   R0,WORK
         OI    WORK+7,X'0F'
         MVC   LL-5(2,R2),=C'SP'
         UNPK  LL-3(3,R2),WORK+6(2)
         B     VGETREAL
VFREESQA CHI   R15,4             FREE STORAGE?
         BNE   VSMLOCER          NO, ERROR.
         MVC   LL-43(15,R2),=C'   FREE STORAGE'
         B     VGETREAL
VSMLOCER STC   R15,WORK          SHOW RETURN CODE.
         MVC   LL-18(16,R2),=C'VSMLOC ERROR RC='
         UNPK  LL-2(3,R2),WORK(2)
         TR    LL-2(2,R2),HEX-C'0'
VGETREAL LA    R2,LL-80(,R2)
         A     R2,VBCOLS         ADJUST SCREEN BUFFER POINTER.
VSHOWRSA CLI   VALLRALL,X'FF'    WAS THE REAL ADDRESS DETERMINED?
         BE    VGTMNDTL          NO.
         L     R15,CRNTOPTN      POINT TO CURRENT OPTION ENTRY.
         SH    R2,12(,R15)       POINT TO PREVIOUS LINE.
         CLC   LL-79(30,R2),BLANKS
         BE    VREALNOW          ROOM ON PREVIOUS LINE.
         AH    R2,12(,R15)       POINT TO NEW LINE.
         MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.
VREALNOW MVC   LL-79(15,R2),=C'REAL ADDRESS IS'
         UNPK  LL-63(5,R2),VALLRALL(3)
         OI    LL-59(R2),X'F0'   GET FIRST FIVE DIGITS OF REAL ADDRESS.
         TR    LL-63(5,R2),HEX-C'0'
         MVC   LL-58(3,R2),HEADING+46   GET LAST THREE DIGITS.
         AH    R2,12(,R15)       ADJUST SCREEN BUFFER POINTER.
         SPACE
VGTMNDTL MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.
         L     R15,=A(VBGMDTLS)  GET ROUTINE ADDRESS.
         BASR  R14,R15           GO SHOW COMMON STORAGE OBTAIN DETAILS.
         AR    R2,R15            UPDATE SCREEN BUFFER CURSOR.
         SPACE
VSBTTOFF NI    BRWSPNTR,X'7F'    ENSURE SHOW TRACE TABLE FLAG IS OFF.
         SPACE
TIDYBRWS XC    VBECHO,VBECHO     CLEAR COMMAND ECHO.
TIDYBMSG LR    R9,R2             COPY SUMMARY LINE ADDRESS.
         ST    R2,HEXDEC@        SAVE FOR HEX/DEC RESUMPTION.
         OI    MODESW,ALTS       NEED ALTERNATE SCREEN SIZE.
         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.
         MVI   0(R9),X'28'       CLEAR NON-SCROLLABLE LINE FLAG.
         MVC   0(LL-79,R2),HIGHX LOAD HEX/DEC ATTRIBUTES.
         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         CLI   HXDECHEX,C' '     ANY NUMBERS ON SHOW?
         BE    HXDECDON          NO.
         MVI   8(R2),X'F7'       SHOW NUMBERS IN WHITE.         (I3279)
         MVC   LL-60(HXDECLEN,R2),HXDECDEC
HXDECDON LA    R2,LL-80(,R2)
         A     R2,VBCOLS
         MVC   0(LL-79,R2),HIGHX LOAD MESSAGE ATTRIBUTES.
         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         CLI   BEMSGCLR,0        ANY MESSAGE TO SHOW?
         BE    BEMSGDON          NO.
         MVI   2(R2),X'F2'       SHOW IN REVERSE VIDEO.         (I3279)
         MVC   8(1,R2),BEMSGCLR  SHOW IN CORRECT COLOUR.        (I3279)
         MVC   LL-39(39,R2),BEMSGTXT
         MVI   BEMSGCLR,0        CLEAR PENDING MESSAGE.
BEMSGDON LA    R2,LL-80(,R2)
         A     R2,VBCOLS
         MVC   0(LL-79,R2),HIGHX LOAD PROMPT ATTRIBUTES.
         MVI   LL-79(R2),C' '    BLANK OUT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-70(VBPRMPTL,R2),VBPROMPT
         LA    R2,LL-70+VBPRMPTL(,R2)
         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.
         LA    R2,4(,R2)         ADJUST BUFFER POINTER.
TIDYVOPT L     R9,CCTADDR        GET CCT ADDRESS.
         LH    R9,UTILP(,R9)     LOAD CCVUTILP (CPU BUSY %).
         CVD   R9,WORK           CONVERT IT TO DECIMAL.
         MVC   BUSY,ED3          MOVE IN THE EDIT MASK.
         ED    BUSY,WORK+6       EDIT THE OUTPUT FIELD.
         LA    R1,HOME           POINT TO START OF SCREEN BUFFER.
         LR    R0,R2             POINT TO END OF SCREEN BUFFER.
         SR    R0,R1             GET SCREEN BUFFER LENGTH.
PUTSCRNV BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.
         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?
         BZ    GETCMDVS          NO, PROCESS SUBCOMMAND.
VIRTEXIT LM    R0,R1,VSREGS      YES, RESTORE REGISTERS FOR FREEMAIN.
         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL  FREE VSMLIST WORK AREA.
         SLR   R0,R0
         ST    R0,VSREG1         GETMAIN REQUIRED NEXT TIME.
         BR    R9                RETURN TO MAINLINE VIA SCREENIO.
TIDYVIRT BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R1,1
         A     R1,WINLINES       INCREMENT LINE COUNTER.
         ST    R1,WINLINES
         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.
         DROP  R15               WNDWMNGR.
         LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.
GETSCRNV L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         BASR  R14,R15           CALL WINDOW MANAGER.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?
         BO    VIRTEXIT          YES.
GETCMDVS CLI   INBUFF,3          PF3/15?
         BE    VIRTPFK3          YES.
         CLI   INBUFF,5          PF5/17?
         BE    BRWSPFK5          YES, FIND.
         CLI   INBUFF,7          PF7/19?
         BE    BROWSEUP          YES.
         CLI   INBUFF,8          PF8/20?
         BE    BROWSEDN          YES.
         CLI   INBUFF,10         PF10/22?
         BE    BROWSEUP          YES.
         CLI   INBUFF,11         PF11/23?
         BE    BROWSEDN          YES.
         CLI   INBUFF+4,0        PRIMARY AREA INPUT?
         BH    BROWSPEC          NO, MUST BE BROWSE ADDRESS SPEC.
         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?
         BNH   CMDSCANV          NO, LOOK FOR COMMAND.
         MVC   INCHARS(4),BLANKS CLEAR NUMERIC INPUT.
         CLI   VCANDBAR,C'B'     SHOWING OPTIONS OR IN BROWSE?
         BNH   BROWSEDN          YES, DO NOT INVOKE WINDOW MANAGER.
         MVI   INBUFF,X'F8'      SIMULATE A SCROLL DOWN REQUEST.
         MVI   TGETLEN+1,3       SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNV          GO SCROLL DOWN A PAGE.
CMDSCANV CLI   INCHARS,C' '      CONTINUE REQUESTED?
         BE    VIRTOPTN          YES, UPDATE THE DISPLAY.
         CLI   INCHARS,C'V'      VIRTUAL STORAGE DISPLAY SELECTED?
         BNE   TRYPVTVS          NO, CHECK FOR PVT DETAIL DISPLAY.
         MVI   VCANDBAR,C'V'     FLAG VIRTUAL STORAGE DISPLAY MODE.
         B     REDOVIRT          DISPLAY VIRTUAL STORAGE LAYOUT.
TRYPVTVS CLI   INCHARS,C'P'      PRIVATE AREA DISPLAY SELECTED?
         BNE   TRYLSQAS          NO, CHECK FOR LSQA DETAIL DISPLAY.
         MVI   VCANDBAR,C'P'     FLAG LSQA DETAIL DISPLAY MODE.
         MVC   HEADGDTL+47(7),=C' << PVT'
         B     REDOVIRT          DISPLAY SYSTEM QUEUE AREA DETAILS.
TRYLSQAS CLI   INCHARS,C'L'      LSQA DISPLAY SELECTED?
         BNE   TRYSQAVS          NO, CHECK FOR SQA DETAIL DISPLAY.
         MVI   VCANDBAR,C'L'     FLAG LSQA DETAIL DISPLAY MODE.
         MVC   HEADGDTL+47(7),=C'<< LSQA'
         B     REDOVIRT          DISPLAY SYSTEM QUEUE AREA DETAILS.
TRYSQAVS CLI   INCHARS,C'S'      SYSTEM QUEUE AREA DISPLAY SELECTED?
         BNE   TRYCSAVS          NO, CHECK FOR CSA DETAIL DISPLAY.
         MVI   VCANDBAR,C'S'     FLAG SQA DETAIL DISPLAY MODE.
         MVC   HEADGDTL+47(7),=C' << SQA'
         B     REDOVIRT          DISPLAY SYSTEM QUEUE AREA DETAILS.
TRYCSAVS CLI   INCHARS,C'D'      COMMON SERVICE AREA DISPLAY SELECTED?
         BNE   TRYCSAMN          NO, CHECK FOR CSA USAGE DISPLAY.
         MVI   VCANDBAR,C'D'     FLAG CSA DETAIL DISPLAY MODE.
         MVC   HEADGDTL+47(7),=C' << CSA'
         B     REDOVIRT          DISPLAY COMMON SERVICE AREA DETAILS.
TRYCSAMN CLI   INCHARS,C'C'      COMMON SERVICE AREA DISPLAY SELECTED?
         BNE   TRYBRWSV          NO, CHECK FOR CONTENTS DISPLAY.
         MVI   VCANDBAR,C'C'     FLAG CSA USAGE DISPLAY MODE.
         B     REDOVIRT          DISPLAY COMMON SERVICE AREA USAGE.
VIRTPFK3 MVI   VCANDBAR,C' '     RESET SUB-OPTION SELECTION.
         B     REDOVIRT          DISPLAY SUB-OPTION LIST.
TRYBRWSV CLI   INCHARS,C'B'      VIRTUAL STORAGE BROWSE SELECTED?
         BNE   GIVEHLPV          NO, SHOW HELP PANEL.
         MVI   VCANDBAR,C'B'     FLAG VIRTUAL STORAGE BROWSE MODE.
         XC    VWORDONE,VWORDONE CLEAR SYSTEM ABEND OR RETURN CODE.
         CLI   INCHARS+1,C' '    SUBCOMMAND SPECIFIED?
         BE    VIRTBRWS          NO, GET BROWSING.
         MVC   INCHARS,INCHARS+1 PROMOTE VB SUBCOMMAND.
         MVI   INCHARS+L'INCHARS-1,C' '
         OC    JBTARGAS,JBTARGAS ASID SUPPLIED FROM OPTION "J"?
         BZ    BROWSPEC          NO.
         MVC   BRWSASID,JBTARGAS YES.
         MVC   BRWSISQN,JBTARGI# COPY INSTANCE NUMBER.
         XC    JBTARGAS,JBTARGAS RESET IT.
         XC    JBTARGI#,JBTARGI# RESET IT.
         NI    VBDSTOKN,X'7F'    INVALIDATE DATASPACE SPACE TOKEN.
         TM    BRWSASID,X'80'    FETCHING DATA FROM DATA SPACE?
         BNO   BROWSPEC          NO.
         NI    BRWSASID,X'7F'    YES, CORRECT ASID.
         OI    VBDSTOKN,X'80'    REVALIDATE DATASPACE SPACE TOKEN.
         SPACE
BROWSPEC CLI   INCHARS,C'0'      NUMERIC?
         BL    BRWSNTNM          NO, NOT NUMERIC.
         LA    R0,8              YES, ASSUME NEW EXPLICIT ADDRESS.
         LA    R3,INCHARS        POINT TO FIRST DIGIT.
         LA    R14,BRWSADRT      LOAD RETURN ADDRESS.
         B     BRWSHEX2          INTERPRET HEX INPUT.
BRWSNTNM CLI   INCHARS,C'<'      TRACE TABLE ENTRY JUMPING?
         BE    BRWSJUMP          YES.
         CLI   INCHARS,C'>'      TRACE TABLE ENTRY JUMPING?
         BE    BRWSJUMP          YES.
         CLI   INCHARS,C'+'      PLUS?
         BE    BRWSADD           YES.
         CLI   INCHARS,C'-'      MINUS?
         BNE   BRWSTBLU          NO, PERFORM TABLE LOOK-UP.
         LA    R0,8              YES.
         LA    R3,INCHARS+1      POINT TO FIRST DIGIT.
         LA    R14,BRWSLSRT      LOAD RETURN ADDRESS.
         B     BRWSHEX2          INTERPRET HEX INPUT.
BRWSADD  LA    R0,8
         LA    R3,INCHARS+1      POINT TO FIRST DIGIT.
         LA    R14,BRWSPLRT      LOAD RETURN ADDRESS.
         B     BRWSHEX2          INTERPRET HEX INPUT.
BRWSTBLU LA    R0,BRWSPEC#       GET NUMBER OF SUBCOMMANDS.
         LA    R1,BRWSPCTB       POINT TO SPECIFICATION TABLE.
BRWSPCLP L     R15,4(,R1)        LOAD POSSIBLE ENTRY POINT.
         CLC   0(4,R1),INCHARS   FOUND IT?
         BER   R15               YES.
         LA    R1,8(,R1)         NO, POINT TO NEXT ONE.
         BCT   R0,BRWSPCLP       TRY IT OUT.
         CLI   INBUFF+4,0        PRIMARY AREA INPUT?
         BE    VIRTBRWS          YES, IGNORE EXTRA CHARACTERS.
BRWSERIS MVC   BEMSGTXT,ISMSG    LOAD "INVALID SPECIFICATION" MESSAGE.
BROWSERR OI    HOME,X'04'        ENSURE BELL REQUESTED IN WCC.
         MVI   BEMSGCLR,X'F2'    ENSURE MESSAGE IS IN RED.
         L     R2,HEXDEC@        LOAD RESUMPTION ADDRESS.
         B     TIDYBMSG          GO DISPLAY THE MESSAGE.
BROWSEF  CLI   WORK2,0           COULD DATA BE FETCHED?
         BE    BRWSERIS          NO, SO THIS IS INVALID.
         L     R1,BRWSPNTR       GET CURRENT BROWSE POINTER.
         LR    R0,R1             COPY IT.
         SRL   R0,7
         SLL   R0,7              GET DISPLAY ORIGIN.
         SLR   R1,R0             GET OFFSET INTO DISPLAYED DATA.
         AL    R1,VWORDTWO       POINT TO DATA IN HOLD AREA.
         ICM   R15,15,0(R1)      GET FULLWORD CONTENTS.
         LA    R15,0(,R15)       ENSURE 31-BIT ADDRESS FORMAT.
         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.
         CLI   INCHARS,C'F'      FULLWORD COMMAND?
         BE    VIRTBRWS          YES, DISPLAY DATA FROM NEW ADDRESS.
         MVI   BRWSPNTR,0        NO, 24-BIT ADDRESS COMMAND.
         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSADDR LA    R0,8              MAXIMUM OF 8 HEX DIGITS IN AN ADDRESS.
         BAS   R14,BROWSHEX      GET SPECIFIED ADDRESS.
BRWSADRT LA    R15,0(,R15)       ENSURE 31-BIT ADDRESS FORMAT.
         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.
         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSASCB LA    R3,INCHARS+4      POINT TO OPERAND, IF ANY.
         LA    R0,2              MAXIMUM NUMBER OF STARTING COLUMNS.
BASCBOLP CLI   0(R3),C' '        CHARACTER BLANK?
         BNE   BRASCBOP          NO, FOUND AN OPERAND.
         LA    R3,1(,R3)         YES, TRY NEXT ONE.
         BCT   R0,BASCBOLP       CATER FOR LEADING BLANK.
         L     R4,PSAAOLD        NO OPERAND SO POINT TO CURRENT ASCB.
         B     BGOTASCB          DISPLAY DATA FROM NEW ADDRESS.
BRASCBOP CLI   0(R3),C''''       LEADING QUOTE?
         BNE   BASCBHEX          NO, TRY FOR ASID.
         CLC   BCSCBCHR,INCHARS  REQUESTED CSCB BY JOB/STEP NAME?
         BE    BRWSCSCB          YES.
         CLC   BCNCLCHR,INCHARS  REQUESTED CANABLE BY JOB/STEP NAME?
         BE    BRWSCSCB          YES.
         CLC   BNCANCHR,INCHARS  REQUESTED NONCANABLE BY JOB/STEP NAME?
         BE    BRWSCSCB          YES.
         L     R7,ASVTADDR       POINT TO ADDRESS SPACE VECTOR TABLE.
         USING ASVT,R7
         L     R9,ASVTMAXU       GET MAXUSER.
         LA    R7,ASVTENTY-4     POINT TO FIRST ASVT ENTRY - 4.
         DROP  R7                ASVT.
BWSASVTE LA    R7,4(,R7)         POINT TO NEXT ENTRY.
         ICM   R4,15,0(R7)       POINT TO ASCB.
         BM    NXTASVTB          ASID NOT ASSIGNED.
         ICM   R15,15,JBNI(R4)   GET JOBNAME POINTER.
         BNZ   BLOCJNAM          BATCH JOB.
         ICM   R15,15,JBNS(R4)   GET JOBNAME POINTER.
         BNZ   BLOCJNAM          HAVE POINTER.
         LA    R15,STARTING      NO POINTER, SO STARTING.
BLOCJNAM CLC   1(8,R3),0(R15)    RIGHT JOB?
         BE    BGOTASCB          YES, LOCATED REQUESTED JOB.
NXTASVTB BCT   R9,BWSASVTE       GET NEXT ASVT ENTRY.
         B     BRWSERIS          NO MORE ASVT ENTRIES.
BASCBHEX LA    R0,4              MAXIMUM OF 4 HEX DIGITS IN AN ASID.
         BAS   R14,BROWSHEX      GET SPECIFIED ASID.
         LTR   R15,R15           POSITIVE ASID NUMBER?
         BNP   BRWSERIS          NO, INVALID.
         L     R7,ASVTADDR       POINT TO ADDRESS SPACE VECTOR TABLE.
         USING ASVT,R7
         C     R15,ASVTMAXU      ASID GREATER THAN MAXUSER?
         BH    BRWSERIS          YES, INVALID.
         SLL   R15,2             GET INDEX INTO ASVT.
*                                POINT TO ASVT ENTRY.
         LA    R7,ASVTENTY-4(R15)
         DROP  R7                ASVT.
         ICM   R4,15,0(R7)       POINT TO ASCB.
         BM    BRWSERIS          ASID NOT ASSIGNED.
         USING ASCB,R4
BGOTASCB CLC   BCNCLCHR,INCHARS  REQUESTED CANCELLABLE BY ASID?
         BE    BGETCSCB          YES.
         CLC   BNCANCHR,INCHARS  REQUESTED NON-CANCELLABLE BY ASID?
         BE    BGETCSCB          YES.
         CLC   BSWAPCHR,INCHARS  REQUESTED SWAPPABLE?
         BE    BRWSSWAP          YES.
         CLC   BNSWPCHR,INCHARS  REQUESTED NON-SWAPPABLE?
         BE    BRWSSWAP          YES.
         L     R1,BRWSPNTR       SAVE OLD DISPLAY ADDRESS.
         ST    R4,BRWSPNTR       UPDATE DISPLAY ADDRESS.
         CLC   BASCBCHR,INCHARS  WAS ASCB REQUESTED?
         BE    VBASBRWS          YES, DISPLAY DATA FROM NEW ADDRESS.
         CLC   BASIDCHR,INCHARS  WAS ASID REQUESTED?
         BE    BROWASID          YES, DISPLAY DATA FROM NEW ADDRESS.
         ST    R1,BRWSPNTR       NO, RESTORE OLD DISPLAY ADDRESS.
         LA    R1,248            LOAD THE ASTE POINTER OFFSET.
         CLC   BASTECHR,INCHARS  WAS ASTE REQUESTED?
         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.
         LA    R1,ASCBOUCB-ASCB  LOAD THE OUCB POINTER OFFSET.
         CLC   BOUCBCHR,INCHARS  WAS OUCB REQUESTED?
         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.
         LA    R1,ASCBOUXB-ASCB  LOAD THE OUXB POINTER OFFSET.
         CLC   BOUXBCHR,INCHARS  WAS OUXB REQUESTED?
         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.
         LA    R1,ASCBRSME-ASCB  LOAD THE RAX POINTER OFFSET.
         CLC   BRAXCHR,INCHARS   WAS RAX REQUESTED?
         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.
         LA    R1,ASCBCSCB-ASCB  LOAD THE CSCB POINTER OFFSET.
         CLC   BCSCBCHR,INCHARS  WAS CSCB REQUESTED?
         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.
         LA    R1,ASCBASSB-ASCB  LOAD THE ASSB POINTER OFFSET.
         CLC   BASSBCHR,INCHARS  WAS ASSB REQUESTED?
         BE    BGETJPTR          YES, UPDATE THE DISPLAY ADDRESS.
         ICM   R4,15,ASCBASSB    POINT TO ASSB.
         BZ    BRWSERIS          THE CONTROL BLOCK DOES NOT EXIST.
         DROP  R4                ASCB.
         LA    R1,ASSBJSAB-ASSB  LOAD THE JSAB POINTER OFFSET.
BGETJPTR LA    R1,0(R1,R4)       POINT TO THE POINTER.
         ICM   R4,15,0(R1)       IS THE POINTER ZERO?
         BZ    BRWSERIS          YES, THE CONTROL BLOCK DOES NOT EXIST.
         LA    R4,0(,R4)         NO, ENSURE SIGN BIT IS OFF.
         ST    R4,BRWSPNTR       UPDATE DISPLAY ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSASXB L     R1,PSAAOLD        POINT TO THE CURRENT ASCB.
         USING ASCB,R1
         MVC   BRWSPNTR,ASCBASXB COPY ASXB POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R1                ASCB.
         USING ASCB,R4
BROWASID MVC   BRWSASID,BRWSHOME RESET DATA SOURCE ASID.
         MVC   BEMSGTXT,AFMSG    LOAD "AUTHORIZATION FAILURE" MESSAGE.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'B'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         OC    OPTNATR,C'V'-C' '(R15)  GATE CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   BROWSERR          NO, CAN'T USE XMS.
         L     R1,ASCBRSME       YES, GET RAX POINTER.
         USING RAX,R1
         L     R1,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.
         DROP  R1                RAX.
         LTR   R1,R1             ZERO FRAMES FOR THIS ADDRESS SPACE?
         BZ    VBASBRWS          YES, IT MUST BE SWAPPED OUT.
         TM    ASCBRCTF,ASCBOUT  IS THIS ADDRESS SPACE SWAPPED OUT?
         BO    VBASBRWS          YES, CAN'T DO ANYTHING ABOUT THAT.
         MVC   BRWSASID,ASCBASID NO, LOAD TARGET ASID.
         B     VBASBRWS          DISPLAY NEW ASID'S ASCB.
BGETCSCB ICM   R1,15,ASCBCSCB    LOAD ADDRESS SPACE TOP CSCB ADDRESS.
         BZ    BRWSERIS          ADDRESS SPACE HAS NO CSCB.
         B     BGOTCSCB          NOW HAVE CSCB ADDRESS.
         DROP  R4                ASCB.
BRWSCSCB L     R1,CVTPTR(,0)     LOAD CVT POINTER.
         USING CVT,R1
         L     R1,CVTMSER        LOAD MSER POINTER.
         DROP  R1                CVT.
*  BACHN AND CHPTR BOTH HAVE THE SAME OFFSET WHICH IS ZERO.
         USING CHAIN,R1
BCHNLOOP ICM   R1,15,CHPTR       LOAD CSCB POINTER.
         BZ    BRWSERIS          END OF CHAIN REACHED.
         CLC   CHKEY,1(R3)       FOUND THE NAME?
         BE    BGOTCSCB          YES.
         CLI   CHTRKID,CHTSID    TSO USER?
         BE    BCHNLOOP          YES, DON'T CHECK STEP NAME.
         CLC   CHCLS,1(R3)
         BNE   BCHNLOOP          NO, TRY NEXT ONE.
BGOTCSCB CLC   BCSCBCHR,INCHARS  CSCB DISPLAY REQUEST?
         BE    BUSECSCB          YES, SO DISPLAY IT.
         MVC   BEMSGTXT,AFMSG    LOAD "AUTHORIZATION FAILURE" MESSAGE.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'J'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         OC    OPTNATR,C'V'-C' '(R15)  GATE CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   BROWSERR          NO, CAN'T PERFORM THIS REQUEST.
         LR    R4,R1             COPY CSCB ADDRESS.
         DROP  R1                CHAIN.
         USING CHAIN,R4
         CLC   BNCANCHR,INCHARS  NON-CANCELLABLE REQUEST?
         BE    BRWSNCAN          YES, DO IT.
         TM    CHACT,CHCL        CANCELLABLE JOB?
         BO    BRWSERAH          YES, ALREADY IS.
         MODESET MF=(E,MDSTSUP0)
         OI    CHACT,CHCL        NO, BUT NOW IT IS.
         MODESET MF=(E,MDSTPROB)
         MVC   BEMSGTXT,CNMSG    LOAD "CANCELLABLE" MESSAGE.
*                                LOAD THE JOB NAME.
         MVC   BEMSGTXT+6(8),CHKEY
         B     BRWSMWTO          GO DISPLAY THE MESSAGE.
BRWSNCAN TM    CHACT,CHCL        NON-CANCELLABLE JOB?
         BZ    BRWSERAH          YES, ALREADY IS.
         MODESET MF=(E,MDSTSUP0)
         NI    CHACT,255-CHCL    NO, BUT NOW IT IS.
         MODESET MF=(E,MDSTPROB)
         MVC   BEMSGTXT,NCMSG    LOAD "NON-CANCELLABLE" MESSAGE.
*                                LOAD THE JOB NAME.
         MVC   BEMSGTXT+4(8),CHKEY
BRWSMWTO MVC   VBPRY64I+12(39),BEMSGTXT
         L     R1,PSATOLD        POINT TO THE CURRENT TCB.
         USING TCB,R1
         L     R1,TCBTIO         POINT TO THE TIOT.
         DROP  R1                TCB.
         USING TIOT1,R1
*                                LOAD USERID INTO MESSAGE.
         MVC   VBPRY64I+57(8),TIOCNJOB
         DROP  R1                TIOT1.
         WTO   MF=(E,VBPRY64I)   LET OPERATORS KNOW AND LOG IT.
         B     BRWSMESG          GO DISPLAY THE MESSAGE.
BUSECSCB ST    R1,BRWSPNTR       SAVE CSCB ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R4                CHAIN.
BRWSDEC  LA    R0,8              MAXIMUM OF 8 HEX DIGITS TO CONVERT.
         BAS   R14,BROWSHEX      GET SPECIFIED HEXADECIMAL NUMBER.
BRWSCNVT LA    R15,0(,R15)       TURN OFF SIGN BIT.
         CVD   R15,WORK
         MVC   HXDECDEC,ED11
         ED    HXDECDEC,WORK+2   DISPLAY DECIMAL.
         ST    R15,WORK
         UNPK  HXDECHEX,WORK(5)
         TR    HXDECHEX(8),HEX-C'0'
         MVI   HXDECHEX+8,C''''  DISPLAY HEXADECIMAL.
         L     R2,HEXDEC@        LOAD RESUMPTION ADDRESS.
         B     TIDYBRWS          SHOW CONVERSION RESULTS.
BRWSPFK5 CLI   VCANDBAR,C'B'     IN BROWSE MODE?
         BNE   CMDSCANV          NO, TREAT IT AS ENTER.
         LA    R3,INCHARS        POINT TO OPERAND, IF ANY.
         B     BRWSPF17          PERFORM FIND FOR PF5/17 REQUEST.
BRWSCHNG MVC   BEMSGTXT,AFMSG    LOAD "AUTHORIZATION FAILURE" MESSAGE.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'V'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'F8'     SUITABLY AUTHORIZED?
         BNO   BROWSERR          NO, CAN'T PERFORM THIS REQUEST.
BRWSFIND LA    R3,INCHARS+4      POINT TO OPERAND, IF ANY.
BRWSPF17 MVC   BEMSGTXT,EDMSG    LOAD "ESA DATASPACE" MESSAGE.
         TM    VBDSTOKN,X'80'    DATASPACE SPACE TOKEN PRESENT?
         BO    BROWSERR          YES, CAN'T PERFORM CROSS-MEMORY FIND.
BFASIDOK LA    R0,2              MAXIMUM NUMBER OF STARTING COLUMNS.
BFINDOLP CLI   0(R3),C' '        CHARACTER BLANK?
         BNE   BRFINDOP          NO, FOUND AN OPERAND.
         LA    R3,1(,R3)         YES, TRY NEXT ONE.
         BCT   R0,BFINDOLP       CATER FOR LEADING BLANK.
         CLI   INBUFF,5          NO OPERAND, PF5/17?
         BE    BREPFIND          YES, SO REPEAT FIND.
         CLC   BFINDCHR,INCHARS  FIND COMMAND?
         BE    BREPFIND          YES, SO REPEAT FIND.
         B     BREPCHNG          NO OPERAND SO REPEAT ALTERATION.
BRFINDOP CLI   0(R3),C''''       LEADING QUOTE?
         BNE   BCHNGHEX          NO, TRY FOR HEX.
         LA    R0,20             UP TO 20 CHARACTERS.
         LA    R1,1(,R3)         POINT TO FIRST CHARACTER.
BRFNDTRL CLI   1(R1),C''''       FOUND THE TRAILING QUOTE?
         BE    BCHNGEOC          YES, END OF CHARACTER STRING.
         LA    R1,1(,R1)         NO, INCREMENT POINTER.
         BCT   R0,BRFNDTRL       CHECK NEXT BYTE.
         MVC   BEMSGTXT,TQMSG    LOAD "TRAILING QUOTE" MESSAGE.
         B     BROWSERR          DISPLAY THE ERROR MESSAGE.
BCHNGEOC LA    R1,20             GET MAXIMUM LENGTH.
         SR    R1,0              GET TEXT LENGTH CODE.
         CLI   INBUFF,5          PF5/17?
         BE    BFINDEOC          YES, OBVIOUSLY A FIND COMMAND.
         CLC   BFINDCHR,INCHARS  FIND COMMAND?
         BE    BFINDEOC          YES.
         ST    R1,BCHNGLEN       NO, SAVE "CHANGE" TEXT LENGTH CODE.
         MVC   BCHNGTXT,1(R3)    COPY THE ALTERATION TEXT.
         B     BREPCHNG          GO ALTER THE DATA.
BFINDEOC ST    R1,BFINDLEN       SAVE THE "FIND" TEXT LENGTH CODE.
         MVC   BFINDTXT,1(R3)    COPY THE TEXT TO BE SEARCHED FOR.
         B     BREPFIND          GO LOOK FOR THE DATA.
BCHNGHEX LA    R0,8              MAXIMUM OF 8 HEX DIGITS TO CONVERT.
         BAS   R14,BRWSHEX2      GET SPECIFIED HEXADECIMAL DATA.
         MVC   BEMSGTXT,OXMSG    LOAD "ODD HEX" MESSAGE.
         CLI   0(R3),C' '        MORE THAN MAXIMUM DIGITS?
         BH    BROWSERR          YES, DISPLAY ERROR MESSAGE.
         ST    R0,WORK           SAVE EIGHT MINUS DIGIT COUNT.
         TM    WORK+3,X'01'      ODD NUMBER OF HEX DIGITS?
         BO    BROWSERR          YES, DISPLAY ERROR MESSAGE.
         LA    R1,8              NO, GET MAXIMUM DIGIT COUNT.
         SR    R1,R0             GET ACTUAL DIGIT COUNT.
         SRL   R1,1              GET DATA BYTE COUNT.
         BCTR  R1,0              GET DATA LENGTH CODE.
         XR    R1,R0
         XR    R0,R1             EXCHANGE LENGTH CODE & 8-DIGIT COUNT.
         XR    R1,R0
         SLL   R1,2              GET UNUSED BIT COUNT.
         SLL   R15,0(R1)         LEFT JUSTIFY THE HEX DATA.
         CLI   INBUFF,5          PF5/17?
         BE    BFINDHEX          YES, OBVIOUSLY A FIND COMMAND.
         CLC   BFINDCHR,INCHARS  FIND COMMAND?
         BE    BFINDHEX          YES.
         ST    R0,BCHNGLEN       SAVE LENGTH CODE.
         ST    R15,BCHNGTXT      SAVE THE ALTERATION DATA.
BREPCHNG MVC   BEMSGTXT,MDMSG    LOAD "MISSING DATA" MESSAGE.
         ICM   R3,15,BCHNGLEN    GET CHANGE DATA LENGTH CODE.
         BM    BROWSERR          NO DATA SPECIFIED.
         MVI   WORK2,0           FLAG NO DATA LINES FETCHED.
         MVI   VKEYPROT,7        INVALIDATE VIRTUAL STORAGE KEY.
         LA    R2,BUFFER         RESET BUFFER POINTER.
         A     R2,VBCOLS         ADD SCREEN WIDTH.
         AHI   R2,-80            POINT TO FIRST DETAIL LINE.
         B     BREPOINT          GO POINT TO THE DATA.
BFINDHEX ST    R0,BFINDLEN       SAVE LENGTH CODE.
         ST    R15,BFINDTXT      SAVE THE DATA TO BE SEARCHED FOR.
BREPFIND MVC   BEMSGTXT,MDMSG    LOAD "MISSING DATA" MESSAGE.
         ICM   R3,15,BFINDLEN    GET FIND DATA LENGTH CODE.
         BM    BROWSERR          NO DATA SPECIFIED.
         MVI   WORK2,X'FA'       FLAG FIND SUBCOMMAND IS ACTIVE.
BREPOINT L     R4,BRWSPNTR       POINT TO CURRENT ADDRESS.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    BFNDPLEB          NO, CAN'T DO A MODESET.
         MODESET MF=(E,MDSTSUP0) KEY ZERO FOR X-RAY VISION SEARCH.
BFNDPLEB MVI   VWORDCNT+1,0      CLEAR INTERRUPT CODE.
         ESTAE MF=(E,ESTAEONV)   TRAP ABENDS WHILE CHECKING DATA.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    BFALLSET          NO, CAN'T BE A CROSS-MEMORY SEARCH.
         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.
         CLC   BRWSHOME,BRWSASID CROSS-MEMORY MODE REQUIRED?
         BE    BFALLSET          NO, START SEARCHING.
         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.
         LA    R1,1              ADDRESS ALL AX NUMBER.
         AXSET AX=(1)            SET AX = 1.
         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.
**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.
**       MVC   WORK+2(2),BRWSASID GET SECONDARY ASID.
**       MVC   WORK+6(2),BRWSHOME GET PRIMARY ASID.
**       LASP  WORK,1            ACTIVATE SECONDARY ASID TRANSLATION.
**       BNZ   EOESAJPA          LASP WAS NOT SUCCESSFUL.
         LH    R1,BRWSASID       GET SECONDARY ASID.
         ICMH  R1,15,BRWSISQN    GET SECONDARY ASID INSTANCE NUMBER.
         BZ    VDOSSAR3
         SSAIR R1                ACTIVATE SECONDARY ASID TRANSLATION.
         B     VSSAROK3
VDOSSAR3 SSAR  R1                ACTIVATE SECONDARY ASID TRANSLATION.
VSSAROK3 XC    SECWORKA(64),SECWORKA  CLEAR SOME STORAGE.
         STAM  A0,A15,SECWORKA+64 SAVE CURRENT ACCESS REGISTER VALUE.
         MVI   SECWORKA+19,1     ONLY AR4 WILL USE SECONDARY.
         LAM   A0,A15,SECWORKA   LOAD NEW ACCESS REGISTER VALUES.
         SAC   X'200'            GET INTO ACCESS REGISTER MODE.
BFALLSET CLI   WORK2,X'FA'       IS THIS A FIND SUBCOMMAND?
         BE    BFNDLOOP          YES, GO DO IT.
         L     R1,PSATOLD        POINT TO THE CURRENT TCB.
         USING TCB,R1
         L     R1,TCBTIO         POINT TO THE TIOT.
         DROP  R1                TCB.
         USING TIOT1,R1
*                                LOAD USERID INTO MESSAGE.
         MVC   VBPRY61I+12(8),TIOCNJOB
         DROP  R1                TIOT1.
         UNPK  VBPRY61I+40(9),BRWSPNTR(5)
         TR    VBPRY61I+40(8),HEX-C'0'
         MVI   VBPRY61I+48,C' '  SHOW THE VIRTUAL ADDRESS.
         UNPK  VBPRY61I+57(5),BRWSASID(3)
         TR    VBPRY61I+57(4),HEX-C'0'
         MVI   VBPRY61I+61,C' '  SHOW THE TARGET ADDRESS SPACE ID.
         EX    R3,BCHNGSAV       COPY DATA TO BE CHANGED.
         MVC   VBPRY62I+23(41),BLANKS
         LA    R1,VBPRY62I+23    POINT TO WTO DAT AREA.
         LA    R15,SECWORKA+128  POINT TO ORIGINAL DATA.
         LA    R0,1(,R3)         GET REPLACEMENT DATA LENGTH.
WIM2LOOP UNPK  0(3,R1),0(2,R15)  UNPACK A BYTE.
         TR    0(2,R1),HEX-C'0'  MAKE DISPLAYABLE.
         MVI   2(R1),C''''       TRAILING QUOTE IN CASE LAST DATA BYTE.
         LA    R1,2(,R1)         POINT TO NEXT HEX DIGIT PAIR LOCATION.
         LA    R15,1(,R15)       POINT TO NEXT SOURCE BYTE.
         BCT   R0,WIM2LOOP       PROCESS NEXT BYTE.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    VBPROTOK          NO.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         L     R1,CVTSMEXT       POINT TO CVT STORAGE MAP EXTENSION.
         DROP  R1                CVT.
         USING CVTVSTGX,R1
         C     R4,CVTRONS        BELOW THE READ-ONLY NUCLEUS?
         BL    ZNOTRNUC          YES, NOT IN THE READ-ONLY NUCLEUS.
         C     R4,CVTERWNS       BELOW THE EXTENDED READ/WRITE NUCLEUS?
         BNL   ZNOTRNUC          NO, NOT IN THE READ-ONLY NUCLEUS.
         SLR   R7,R7             YES, CLEAR FOR FLAG PURPOSES.
         B     ZAPBNDRY          GO CHECK PAGE BOUNDARY.
ZNOTRNUC C     R4,CVTPLPAS       BELOW PLPA?
         BL    VBPROTOK          YES, ASSUME NO PAGE PROTECTION.
         C     R4,CVTEPLPE       ABOVE EPLPA?
         BH    VBPROTOK          YES, ASSUME NO PAGE PROTECTION.
         C     R4,CVTPLPAE       IN PLPA?
         BNH   VBISPLPA          YES.
         C     R4,CVTEPLPS       IN EPLPA?
         BL    VBPROTOK          NO, FORGET ABOUT PAGE PROTECTION.
         DROP  R1                CVTVSTGX.
VBISPLPA LA    R7,1              FLAG PAGE-FIXING NECESSITY.
ZAPBNDRY MVC   BEMSGTXT,PBMSG    LOAD "PAGE BOUNDARY" MESSAGE.
         LA    R0,0(R3,R4)       GET ADDRESS OF LAST BYTE TO BE ZAPPED.
         SRL   R0,12             GET ITS RELATIVE PAGE NUMBER.
         LA    R1,0(,R4)         SAME FOR THE FIRST BYTE.
         SRL   R1,12
         CLR   R1,R0             ENTIRE UPDATE WITHIN THE ONE PAGE?
         BNE   BROWSERR          NO, DISPLAY THE ERROR MESSAGE.
         LTR   R7,R7             PAGE-FIX TO BE PERFORMED?
         BZ    ZAPFIXOK          NO.
         SLL   R1,12             YES, GET ADDRESS OF ITS FIRST BYTE.
         LA    R2,4095(,R1)      GET ADDRESS OF ITS LAST BYTE.
         SLR   R0,R0             SYNCHRONOUS PAGE-FIX SO NO ECB.
         SLR   R4,R4             ZERO OWNING TCB POINTER.
         PGSER R,FIX,A=(1),EA=(2),TCB=(4),ECB=(0),LONG=Y,BRANCH=Y
*                                HAVE NOW PAGE-FIXED THE PLPA PAGE
*                                FOR THE LIFE OF THE IPL.
ZAPFIXOK LA    R2,BUFFER         RESET BUFFER POINTER.
         A     R2,VBCOLS         ADD SCREEN WIDTH.
         AHI   R2,-80            POINT TO FIRST DETAIL LINE.
         L     R3,BCHNGLEN       GET CHANGE DATA LENGTH CODE.
         L     R4,BRWSPNTR       POINT TO CURRENT ADDRESS.
         LA    R0,VBZLEN         GET DAT-OFF ROUTINE SIZE.
         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=ANY,BNDRY=PAGE
         LR    R7,R1             REMEMBER GETMAINED ADDRESS.
         LA    R15,4095(,R1)     POINT TO END OF GETMAINED AREA.
         PGSER R,FIX,A=(1),EA=(15),ECB=0  PAGE-FIX THE DAT-OFF PAGE.
         LR    R15,R7            POINT BACK TO THE GETMAINED AREA.
         L     R1,=A(VZDATOFF)
         MVC   0(VBZLEN,R15),0(R1) LOAD IT WITH THE DAT-OFF ROUTINE.
         USING VZDATOFF,R15
         MVC   VZREQ,INCHARS     SUPPLY REQUEST NAME.
         MVC   ZCHNGTXT,BCHNGTXT COPY REPLACEMENT DATA.
         DROP  R15               VZDATOFF.
         BASR  R14,R15           INVOKE THE DAT-OFF ROUTINE.
         LR    R1,R7             POINT TO THE GETMAINED AREA.
         LA    R15,4095(,R1)     POINT TO END OF GETMAINED AREA.
         PGSER R,FREE,A=(1),EA=(15) FREE PREVIOUSLY FIXED DAT-OFF PAGE.
         LA    R0,VBZLEN         LOAD GETMAINED AREA SIZE.
         LR    R1,R7             POINT TO THE GETMAINED AREA.
         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL  FREE THE DAT-OFF PAGE.
         B     BCHANGED
VBPROTOK CLI   INCHARS,C'A'      AND REQUESTED?
         BE    BCHNGAND          YES.
         CLI   INCHARS,C'O'      OOR REQUESTED?
         BE    BCHNGOOR          YES.
         CLI   INCHARS,C'R'      REP REQUESTED?
         BE    BCHNGREP          YES.
         CLI   INCHARS,C'X'      XOR REQUESTED?
         BE    BCHNGXOR          YES.
         DC    H'0'
BCHNGAND EX    R3,BCHNGNC        AND DATA INTO TARGET ADDRESS.
         B     BCHANGED
BCHNGOOR EX    R3,BCHNGOC        OR DATA INTO TARGET ADDRESS.
         B     BCHANGED
BCHNGREP EX    R3,BCHNGMVC       MOVE DATA INTO TARGET ADDRESS.
         B     BCHANGED
BCHNGXOR EX    R3,BCHNGXC        XOR DATA INTO TARGET ADDRESS.
BCHANGED EX    R3,BCHNGSAV       COPY DATA REPLACEMENT.
         MVC   VBPRY63I+23(41),BLANKS
         LA    R1,VBPRY63I+23    POINT TO WTO DATA AREA.
         LA    R15,SECWORKA+128  POINT TO NEW DATA.
         LA    R0,1(,R3)         GET REPLACEMENT DATA LENGTH.
WIM3LOOP UNPK  0(3,R1),0(2,R15)  UNPACK A BYTE.
         TR    0(2,R1),HEX-C'0'  MAKE DISPLAYABLE.
         MVI   2(R1),C''''       TRAILING QUOTE IN CASE LAST DATA BYTE.
         LA    R1,2(,R1)         POINT TO NEXT HEX DIGIT PAIR LOCATION.
         LA    R15,1(,R15)       POINT TO NEXT SOURCE BYTE.
         BCT   R0,WIM3LOOP       PROCESS NEXT BYTE.
         B     BFNDSTOP
BFINDCLC CLC   0(0,R4),BFINDTXT                 <<< EXECUTED >>>
BCHNGNC  NC    0(0,R4),BCHNGTXT                 <<< EXECUTED >>>
BCHNGMVC MVC   0(0,R4),BCHNGTXT                 <<< EXECUTED >>>
BCHNGOC  OC    0(0,R4),BCHNGTXT                 <<< EXECUTED >>>
BCHNGXC  XC    0(0,R4),BCHNGTXT                 <<< EXECUTED >>>
BCHNGSAV MVC   SECWORKA+128(0),0(R4)            <<< EXECUTED >>>
BFNDLOOP DS    0H
         LA    R4,1(,R4)         INCREMENT THE CURRENT ADDRESS.
         ST    R4,BRWSPNTR       REMEMBER IT IN CASE OF ABEND.
         TM    MODESW2,ATTN      NO, ATTENTION HIT?
         BO    BFNDATTN          YES, INTERRUPT LOOP.
         LTR   R4,R4             GONE THROUGH TOP OF ADDRESS SPACE?
         BZ    BFNDSTOP          YES, SO STOP LOOPING.
         EX    R3,BFINDCLC       FOUND REQUESTED DATA?
         BNE   BFNDLOOP          NO, CONTINUE IN SEARCH LOOP.
BFNDSTOP DS    0H
         CLC   BRWSHOME,BRWSASID IN CROSS-MEMORY MODE?
         BE    BFESWAP0          NO, DISABLE ESTAE NOW.
         SAC   X'000'            YES, REVERT TO PRIMARY SPACE MODE.
         LAM   A0,A15,SECWORKA+64 RESTORE ACCESS REGISTER VALUES.
**       XC    WORK,WORK         CLEAR ADDRESS SPACE PARAMETERS.
**       MVC   WORK+2(2),BRWSHOME  GET SECONDARY ASID.
**       MVC   WORK+6(2),BRWSHOME  GET PRIMARY ASID.
**       LASP  WORK,1            CANCEL SECONDARY ASID TRANSLATION.
         LH    R1,BRWSHOME       GET PRIMARY ASID.
         SSAR  R1                CANCEL SECONDARY ASID TRANSLATION.
         L     R1,AXVALUE        GET SAVED AX NUMBER.
         AXSET AX=(1)            SET AX = 0.
         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.
         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.
BFESWAP0 ESTAE 0                 DISABLE TASK ABNORMAL EXIT.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    VBWTOCHK          NO, FORGET MODESET, SHOW CURRENT DATA.
         MODESET MF=(E,MDSTPROB) BACK TO TASK'S KEY AND PROBLEM STATE.
VBWTOCHK CLI   WORK2,X'FA'       WAS IT A 'FIND' SUBCOMMAND?
         BE    VIRTBRWS          YES, SHOW FOUND DATA OR RESTART PSW.
         WTO   MF=(E,VBPRY61I)   SHOW DETAILS OF WHO IS CHANGING WHAT.
         WTO   MF=(E,VBPRY62I)   SHOW THE ORIGINAL DATA.
         WTO   MF=(E,VBPRY63I)   SHOW THE ORIGINAL DATA.
         B     VIRTBRWS          SHOW RESULT OF ALTERATION.
BRWSHEX  LA    R0,10             MAXIMUM OF 10 DIGITS TO CONVERT.
         LA    R3,INCHARS+4      POINT TO FIRST ALLEGED NUMERIC CHAR.
         SLR   R1,R1             ZERO WORK REGISTER.
         SLR   R15,R15           ZERO ACCUMULATOR.
         CLI   0(R3),C' '        A LEADING BLANK?
         BNE   BDECLOOP          NO.
         LA    R3,1(,R3)         YES, ALLOW ONE.
BDECLOOP CLI   0(R3),C'.'        BLANK (OR DECIMAL POINT)?
         BNH   BRWSCNVT          YES, REACHED END OF NUMBER.
         CLI   0(R3),C'0'        INVALID?
         BL    BDCMLERR          YES.
         CLI   0(R3),C'9'        INVALID?
         BH    BDCMLERR          YES.  (HOW WAS THAT DONE?)
         NI    0(R3),X'0F'       NO, GET NUMERIC PART.
         M     R14,TEN           PROMOTE ANY PREVIOUS DIGITS.
         IC    R1,0(,R3)         LOAD THIS DIGIT.
         ALR   R15,R1            GATE INTO ACCUMULATOR.
         LA    R3,1(,R3)         POINT TO NEXT POSSIBLE DIGIT.
         BCT   R0,BDECLOOP       PROCESS NEXT POSSIBLE DIGIT POSSIBLY.
         B     BRWSCNVT          END OF NUMBER SO SHOW IT.
BDCMLERR MVC   BEMSGTXT,NDMSG    LOAD "NON-DECIMAL" MESSAGE.
         B     BROWSERR          DISPLAY THE ERROR MESSAGE.
BRWSJUMP LA    R3,INCHARS        POINT TO INPUT STRING.
         L     R4,VSBTRPTR       GET CURRENT TRACE TABLE ENTRY ADDRESS.
         LA    R5,VSBTRACE       GET TRACE TABLE START ADDRESS.
         LA    R6,VSBTREND       GET TRACE TABLE END ADDRESS.
BJMPLOOP CLI   0(R3),C'<'        BACKWARD JUMP?
         BE    BJMPBACK          YES.
         CLI   0(R3),C'>'        FORWARD JUMP?
         BNE   BJMPRETN          NO, SO RETURN.
         LA    R4,4(,R4)         YES, POINT TO NEXT TRACE TABLE ENTRY.
         CR    R4,R6             NOW PAST THE END OF THE TABLE?
         BL    BJMPOKAY          NO.
         LR    R4,R5             YES, WRAP-AROUND TO START.
BJMPOKAY LA    R3,1(,R3)         POINT TO NEXT INPUT CHARACTER.
         B     BJMPLOOP          GO PROCESS IT.
BJMPBACK AHI   R4,-4             POINT TO PREVIOUS TRACE TABLE ENTRY.
         CR    R4,R5             GONE PAST THE TRACE TABLE START?
         BNL   BJMPOKAY          NO.
         LA    R4,VSBTREND-4     YES, POINT TO LAST TRACE TABLE ENTRY.
         B     BJMPOKAY
BJMPRETN ST    R4,VSBTRPTR       SAVE NEW TRACE TABLE ENTRY ADDRESS.
         MVC   BRWSPNTR,0(R4)    UPDATE DISPLAY ADDRESS.
         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSLCCA CLC   INCHARS+4(2),BLANKS
         BNE   CPULCCA           CPU NUMBER SPECIFIED.
         MVC   BRWSPNTR,PSALCCAV COPY THE CURRENT LCCA POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
CPULCCA  LA    R0,1              MAXIMUM OF 1 HEX DIGIT IN AN CP ID.
         BAS   R14,BROWSHEX      GET SPECIFIED CPU.
         SLL   R15,2             CONVERT INTO LCCAVT INDEX.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         L     R1,CVTLCCAT       POINT TO THE LCCAVT.
         DROP  R1                CVT.
         LA    R1,0(15,R1)       POINT TO THE LCCAVT ENTRY.
         ICM   R15,15,0(R1)      LOAD ADDRESS OF PARTICULAR LCCA.
         BZ    BRWSERIS          ZERO, SELECTED CPU IS NOT ACTIVE.
         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSLESS LA    R0,8              MAXIMUM OF 8 HEX DIGITS IN AN OFFSET.
         BAS   R14,BROWSHEX      GET SPECIFIED OFFSET.
BRWSLSRT L     R1,BRWSPNTR       GET CURRENT ADDRESS.
         LA    R15,0(,R15)       ENSURE POSITIVE NUMBER.
         SLR   R0,R0
         ST    R0,BRWSPNTR       PREPARE FOR NEGATIVE.
         SR    R1,R15            SUBTRACT OFFSET FROM CURRENT ADDRESS.
         BM    VIRTBRWS          USE ZERO IF RESULT NEGATIVE.
         ST    R1,BRWSPNTR       UPDATE BROWSE POINTER.
         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSMNT  MVC   BEMSGTXT,AFMSG    LOAD "AUTHORIZATION FAILURE" MESSAGE.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'V'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         OC    OPTNATR,C'M'-C' '(R15)  GATE CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   BROWSERR          NO, CAN'T PERFORM THIS REQUEST.
         L     R1,PSATOLD        POINT TO THE CURRENT TCB.
         USING TCB,R1
         ICM   R1,15,TCBJSCB     POINT TO THE CURRENT JSCB.
         BZ    BRWSERIS          WHAT HAPPENED THERE?
         DROP  R1                TCB.
         USING IEZJSCB,R1
         ICM   R4,15,JSCBPSCB    POINT TO THE TSO USER'S PSCB.
         BZ    BRWSERAH          THERE IS NO PSCB.
         DROP  R1                IEZJSCB.
         USING PSCB,R4
         CLC   BNMNTCHR,INCHARS  NMNT BROWSE SUBCOMMAND?
         BE    BRWSNMNT          YES.
         TM    PSCBATR1,PSCBVMNT ALREADY HAVE THE MOUNT ATTRIBUTE?
         BO    BRWSERAH          YES.
         MODESET MF=(E,MDSTSUP0)
         OI    PSCBATR1,PSCBVMNT TURN ON MOUNT BIT.
         MODESET MF=(E,MDSTPROB)
         MVC   BEMSGTXT,MNMSG    LOAD "MOUNT" MESSAGE.
         MVC   BEMSGTXT+2(7),0(R4)   LOAD TSO USERID.
BRWSMESG MVI   BEMSGCLR,X'F4'    ENSURE MESSAGE IS IN GREEN.
         L     R2,HEXDEC@        LOAD RESUMPTION ADDRESS.
         B     TIDYBRWS          GO DISPLAY THE MESSAGE.
BRWSNMNT TM    PSCBATR1,PSCBVMNT ALREADY HAVE THE NOMOUNT ATTRIBUTE?
         BZ    BRWSERAH          YES.
         MODESET MF=(E,MDSTSUP0)
         NI    PSCBATR1,255-PSCBVMNT TURN OFF MOUNT BIT.
         MODESET MF=(E,MDSTPROB)
         MVC   BEMSGTXT,NMMSG    LOAD "NOMOUNT" MESSAGE.
         MVC   BEMSGTXT+1(7),0(R4)   LOAD TSO USERID.
         B     BRWSMESG          GO DISPLAY THE MESSAGE.
         DROP  R4                PSCB.
         USING ASCB,R4
         USING OUCB,R5
BRWSNSWP TM    OUCBSFL,OUCBNSW   NON-SWAPPABLE JOB?
         BO    BRWSERAH          YES, ALREADY IS.
         CLM   R4,7,PSAAOLD+1    CURRENT ADDRESS SPACE?
         BE    NSWPSELF          YES, GO ISSUE SYSEVENT.
         MVI   SECWORKA+4,C'D'   SET CODE FOR DONTSWAP.
         MVI   SECWORKA+5,C'A'   SPECIFYING ASID.
         MVC   SECWORKA+6(8),BLANKS   NO JOB NAME.
         UNPK  SECWORKA+14(5),ASCBASID(3)
         TR    SECWORKA+14(4),HEX-C'0'
         LA    R1,SECWORKA+4
         ST    R1,SECWORKA
         LA    R1,SECWORKA
         L     R15,=V(IMSWAP)
         BASR  R14,R15
         LTR   R15,R15
         BZ    BNSWPSHO
         B     BRWSERIS
NSWPSELF MODESET MF=(E,MDSTSUP0)
         LH    R0,ASCBASID
         SYSEVENT DONTSWAP,ASID=(0)
         MODESET MF=(E,MDSTPROB)
BNSWPSHO MVC   BEMSGTXT,DSMSG    LOAD "DON'T SWAP" MESSAGE.
         LA    R1,BEMSGTXT+5     POINT TO JOBNAME SLOT.
         B     BSWAPWTO          GO DISPLAY THE MESSAGE.
         DROP  R4,R5             ASCB, OUCB.
BRWSERAH MVC   BEMSGTXT,AHMSG    LOAD "ALREADY HAS STATUS" MESSAGE.
         B     BROWSERR          DISPLAY THE ERROR MESSAGE.
BRWSPLUS LA    R0,8              MAXIMUM OF 8 HEX DIGITS IN AN OFFSET.
         BAS   R14,BROWSHEX      GET SPECIFIED OFFSET.
BRWSPLRT A     R15,BRWSPNTR      ADD OFFSET TO CURRENT ADDRESS.
         LA    R15,0(,R15)       CONVERT TO 31-BIT ADDRESS FORMAT.
         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.
         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.
         USING ASCB,R4
BRWSSWAP MVC   BEMSGTXT,AFMSG    LOAD "AUTHORIZATION FAILURE" MESSAGE.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'J'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         OC    OPTNATR,C'V'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   BROWSERR          NO, CAN'T PERFORM THIS REQUEST.
         TM    52(R4),X'10'      V=R ADDRESS SPACE?
         BO    BROWSERR          YES, CAN'T MAKE IT SWAPPABLE.
         CLC   =H'1',ASCBASID    MASTER ADDRESS SPACE?
         BNL   BROWSERR          YES, LEAVE IT.
         ICM   R5,15,ASCBOUCB    LOAD OUCB ADDRESS.
         BZ    BRWSERIS          ADDRESS SPACE HAS NO OUCB.
         USING OUCB,R5
         CLC   BNSWPCHR,INCHARS  REQUESTED NON-SWAPPABLE?
         BE    BRWSNSWP          YES.
         TM    OUCBSFL,OUCBNSW   SWAPPABLE JOB?
         BZ    BRWSERAH          YES, ALREADY IS.
         CLM   R4,7,PSAAOLD+1    CURRENT ADDRESS SPACE?
         BE    SWAPSELF          YES, GO ISSUE SYSEVENT.
         MVI   SECWORKA+4,C'S'   SET CODE FOR OKSWAP.
         MVI   SECWORKA+5,C'A'   SPECIFYING ASID.
         MVC   SECWORKA+6(8),BLANKS   NO JOB NAME.
         UNPK  SECWORKA+14(5),ASCBASID(3)
         TR    SECWORKA+14(4),HEX-C'0'
         LA    R1,SECWORKA+4
         ST    R1,SECWORKA
         LA    R1,SECWORKA
         L     R15,=V(IMSWAP)
         BASR  R14,R15
         LTR   R15,R15
         BZ    BSWAPSHO
         B     BRWSERIS
SWAPSELF MODESET MF=(E,MDSTSUP0)
         LH    R0,ASCBASID
         SYSEVENT OKSWAP,ASID=(0)
         MODESET MF=(E,MDSTPROB)
BSWAPSHO MVC   BEMSGTXT,SWMSG    LOAD "SWAPPABLE" MESSAGE.
         LA    R1,BEMSGTXT+7     POINT TO JOBNAME SLOT.
BSWAPWTO MVC   0(8,R1),OUCBTRXN  LOAD THE JOB NAME (TRXNAME).
         CLC   OUCBSUBN,=CL4'TSO '   TSO USER?
         BNE   BRWSMWTO          NO, GO DISPLAY THE MESSAGE.
         MVC   0(8,R1),OUCBUSRD  LOAD THE USERID.
         B     BRWSMWTO          GO DISPLAY THE MESSAGE.
         DROP  R4,R5             ASCB, OUCB.
BRWSTCAS L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         MVC   BRWSPNTR,CVTTCASP COPY TCAS TABLE POINTER.
         DROP  R1                CVT.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSTCB  MVC   BRWSPNTR,PSATOLD  COPY CURRENT TCB POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSTRAC MVC   HEADING,HEADVSBT  INDICATE TRACE DISPLAY IN HEADING.
         LA    R3,VSBTRACE       POINT TO TRACE TABLE.
         LR    R4,R3             COPY DISPLAY ORIGIN.
         OI    BRWSPNTR,X'80'    TURN ON TRACE TABLE DISPLAY FLAG.
         LA    R2,BUFFER         RESET BUFFER POINTER.
         A     R2,VBCOLS         ADD SCREEN WIDTH.
         AHI   R2,-80            POINT TO FIRST DETAIL LINE.
         LA    R0,16             SIXTEEN DETAIL DISPLAY LINES.
         B     BRWSLOOP          GO DISPLAY TRACE TABLE.
BRWSUCB  LA    R0,4              MAXIMUM OF 4 HEX DIGITS IN DEVICE NO.
         BAS   R14,BROWSHEX      GET SPECIFIED DEVICE NUMBER.
         XC    WORK,WORK         CLEAR UCB ADDRESS POINTERS.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         TM    CVTOSLVL,CVTUCBSV UCB SERVICES AVAILABLE?
         BNO   BOLDUCBS          NO, CHECK FIRST UCB ON STATIC CHAIN.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BO    BRWSUCBA          YES, USED AUTHORIZED SERVICE.
         L     R5,CVTIXAVL       NO, POINT TO THE IOCOM.
         USING IOCOM,R5
         L     R5,IOCIOVTP       POINT TO THE IOVT.
         DROP  R5                IOCOM.
         L     R5,8(,R5)         POINT TO THE UCB LOOK-UP TABLE.
         L     R0,16(,R5)        GET THE TOTAL UCB COUNT.
BNEWUCLP CLM   R15,3,132(R5)     CORRECT DEVICE NUMBER?
         BE    BNEWUCOK          YES, LOAD UCB ADDRESS.
         LA    R5,12(,R5)        NO, POINT TO NEXT UCB ENTRY.
         BCT   R0,BNEWUCLP       GO TRY IT.
         B     BRWSERIS          NO MORE UCB ENTRIES.
         DROP  R1                CVT.
BNEWUCOK L     R1,132+8(,R5)     LOAD THE UCB ADDRESS.
         B     BUNITCMD          NOW GO CHECK ON REQUEST.
BRWSUCBA STH   R15,WORK2+4       YES, STORE THE REQUIRED DEVICE NUMBER.
         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.
         UCBLOOK DEVN=WORK2+4,   NOMINATE DEVICE NUMBER LOCATION.      +
               UCBPTR=WORK,      NOMINATE UCB ADDRESS SAVE AREA.       +
               UCBPXPTR=WORK+4,  NOMINATE UCB PREFIX ADDRESS SAVE AREA.+
               LOC=ANY,          SEARCH ALL UCB LOCATIONS.             +
               NOPIN,            DO NOT PIN ANY UCB.                   +
               DYNAMIC=YES,      INCLUDE ALL UCB TYPES.                +
               RANGE=ALL,        INCLUDE ALL UCB NUMBERS.              +
               RETCODE=SAVE+16,  SAVE RETURN CODE FROM REGISTER 15.    +
               MF=(E,UCBLKLS,COMPLETE)
         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM PROGRAM STATE.
         ICM   R15,15,SAVE+16    WAS THE UCB FOUND?
         BNZ   BRWSERIS          NO, SO IT DOESN'T EXIST.
         L     R1,WORK           YES, POINT TO THE UCB.
         CLC   INCHARS(4),BUCBCHR     WAS UCB REQUESTED?
         BE    BUNITCMD          YES, DISPLAY DATA FROM NEW ADDRESS.
         L     R1,WORK+4         NO, POINT TO THE UCB PREFIX.
         B     BRWSCMB           NOW GO FIND THE CMB.
         USING CVT,R1
BOLDUCBS L     R1,CVTUCBA        POINT TO FIRST UCB.
         B     BFRSTUCB          FIRST TIME THROUGH THE LOOP.
         DROP  R1                CVT.
         USING UCBOB,R1
BNEXTUCB ICM   R1,15,UCBNXUCB    GET NEXT UCB ADDRESS.
         BZ    BRWSERIS          NO MORE UCB ENTRIES.
BFRSTUCB CLM   R15,3,UCBCHAN     CORRECT DEVICE NUMBER?
         BNE   BNEXTUCB          NO, TRY NEXT UCB.
BUNITCMD ST    R1,BRWSPNTR       SAVE UPDATED VALUE.
         CLC   INCHARS(4),BUCBCHR     WAS UCB REQUESTED?
         BE    VBASBRWS          YES, DISPLAY DATA FROM NEW ADDRESS.
         DROP  R1                UCBOB.
         AHI   R1,-48            NO, POINT TO UCB PREFIX.
         USING UCBPDATA,R1
BRWSCMB  TM    UCBPMCW1+1,UCBMCMB ARE MEASUREMENTS BEING COLLECTED?
         BZ    BRWSERIS          NO, NOT FOR THIS DEVICE.
         ICM   R15,3,UCBMBI      GET MEASUREMENT BLOCK INDEX.
         DROP  R1                UCBPDATA.
         L     R1,CMCTADDR       POINT TO CHANNEL MEASUREMENT CNTL TBL.
         USING CMCT,R1
         L     R1,CMCTCMBV       POINT TO CHANNEL MEASUREMENT BLOCK.
         DROP  R1                CMCT.
         SLL   R15,5             GET ENTRY OFFSET INTO CMB.
         ALR   R1,R15            POINT TO THIS DEVICE'S ENTRY.
         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         SPACE
BROWSHEX LA    R3,INCHARS+4      POINT TO FIRST ALLEGED HEX CHARACTER.
BRWSHEX2 SLR   R1,R1             ZERO WORK REGISTER.
         SLR   R15,R15           ZERO ACCUMULATOR.
         CLI   0(R3),C' '        A LEADING BLANK?
         BNE   BHEXLOOP          NO.
         LA    R3,1(,R3)         YES, ALLOW ONE.
BHEXLOOP CLI   0(R3),C'A'        BLANK OR INVALID?
         BLR   R14               YES, ASSUME END OF HEX AND RETURN.
         CLI   0(R3),C'9'        INVALID?
         BH    BRWSERIS          YES.  (HOW WAS THAT DONE?)
         CLI   0(R3),C'G'        VALID?
         BL    BHEXALFA          YES, ALPHABETIC HEX CHARACTER.
         CLI   0(R3),C'0'        INVALID?
         BL    BRWSERIS          YES.
         NI    0(R3),X'0F'       NO, GET NUMERIC PART.
         B     BHEXNMBR          NOW HAVE HEX DIGIT'S VALUE.
BHEXALFA TR    0(1,R3),BALFAHEX-C'A'
BHEXNMBR SLL   R15,4             PROMOTE ANY PREVIOUS DIGITS.
         IC    R1,0(,R3)         LOAD THIS DIGIT.
         OR    R15,R1            GATE INTO ACCUMULATOR.
         LA    R3,1(,R3)         POINT TO NEXT POSSIBLE DIGIT.
         BCT   R0,BHEXLOOP       PROCESS NEXT POSSIBLE DIGIT POSSIBLY.
         BR    R14               FORCE RETURN AFTER MAXIMUM DIGITS.
         SPACE
BROWSEUP CLI   VCANDBAR,C'B'     IN BROWSE MODE?
         BNE   CMDSCANV          NO, TREAT IT AS ENTER.
         LA    R0,256
         CLI   COLUMNS+3,80      80-COLUMN SCREEN?
         BNE   VBUPOKAY          NO.
         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?
         BL    VBUPOKAY          NO.
         LA    R0,512
VBUPOKAY L     R1,BRWSPNTR       GET CURRENT BROWSE ADDRESS.
         SR    R1,R0             SUBTRACT FROM IT.
         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.
         BNM   VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.
         SLR   R0,R0             ZERO IT IF NEGATIVE.
         ST    R0,BRWSPNTR       CAN'T SCROLL UP PAST ZERO.
         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.
BROWSEDN CLI   VCANDBAR,C'B'     IN BROWSE MODE?
         BNE   CMDSCANV          NO, TREAT IT AS ENTER.
         LA    R1,256            YES.
         CLI   COLUMNS+3,80      80-COLUMN SCREEN?
         BNE   VBDNOKAY          NO.
         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?
         BL    VBDNOKAY          NO.
         LA    R1,512            YES.
VBDNOKAY A     R1,BRWSPNTR       GET CURRENT BROWSE ADDRESS.
         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.
         B     VIRTBRWS          DISPLAY DATA FROM NEW ADDRESS.
GIVEHLPV MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.
         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     PUTSCRNV          GO DISPLAY HELP PANEL.
         SPACE
PUTPRTN2 DS    0H                LOW-ADDRESS, SIZE ENTRY POINT.
         L     R1,0(,R3)         GET LOWEST ADDRESS OF AREA
         ST    R1,VWORDONE       AND SAVE IT.
         A     R1,4(,R3)         ADD SIZE OF AREA.
         BZ    NULLAREA          VIRTUAL STORAGE AREA NOT THERE.
         BCTR  R1,0              GET HIGHEST ADDRESS OF AREA
NULLAREA ST    R1,VWORDTWO       AND SAVE IT.
         LA    R3,VWORDONE       POINT TO PARAMETER LIST.
PUTPRTN1 DS    0H                LOW-ADDRESS, HIGH ADDRESS ENTRY POINT.
         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.
         MVI   LL-79(R2),C' '    CLEAR DISPLAY LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-80(41,R2),0(R4) LOAD THIS AREA'S DESCRIPTION.
         LA    R4,41(,R4)        POINT TO THE NEXT AREA'S NAME.
         MVC   LL-4(4,R2),0(R3)  SAVE ADDRESS IN DISPLAY LINE FOR SORT.
         UNPK  52(9,R2),0(5,R3)  DISPLAY LOW ADDRESS OF AREA IN HEX.
         TR    52(8,R2),HEX-C'0'
         MVI   60(R2),C' '
         UNPK  63(9,R2),4(5,R3)  DISPLAY TOP ADDRESS OF AREA IN HEX.
         TR    63(8,R2),HEX-C'0'
         MVI   71(R2),C' '
         L     R1,4(,R3)         OBTAIN TOP ADDRESS OF AREA.
         S     R1,0(,R3)         SUBTRACT LOW ADDRESS OF AREA.
         BNPR  R9                DON'T REPORT NON-EXISTENT AREA.
         LA    R1,1024(,R1)      GET SIZE OF AREA PLUS 1023.
         SRL   R1,10             ROUND SIZE TO NEXT HIGHEST KILOBYTE.
         CVD   R1,WORK
         MVC   74(8,R2),ED7Z     SHOW SIZE OF PARTITION IN DECIMAL.
         ED    74(8,R2),WORK+4
         MVI   82(R2),C'K'       INDICATE KILOBYTE (1024B) UNITS.
         TR    LL-79(75,R2),XLATETBL
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R0,1
         A     R0,WINLINES       INCREMENT LINE COUNTER.
         ST    R0,WINLINES
         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.
         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.
         BNL   GETSCRNV          IF YES, THEN FORGET SUMMARY LINE.
         DROP  R15               WNDWMNGR.
         LA    R1,1
         A     R1,VWORDCNT       INCREMENT LINES-TO-BE-SORTED COUNT.
         ST    R1,VWORDCNT       SAVE IT.
         BR    R9                DETAIL LINE NOW READY FOR DISPLAY.
         SPACE
VADDLINE TR    LL-79(79,R2),XLATETBL
VVSMLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R0,1
         A     R0,WINLINES       INCREMENT LINE COUNTER.
         ST    R0,WINLINES
         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.
         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.
         BNL   GETSCRNV          IF YES, THEN FORGET SUMMARY LINE.
         BR    R14
         DROP  R15               WNDWMNGR.
         SPACE
         DROP  R10,R11,R8        VIRTSTOR.
         SPACE
ESTAEONV ESTAE VSBABEND,PARAM=RETRYVSB,MF=L
         TITLE 'VIRTUAL STORAGE MONITOR - TASK ABNORMAL END EXIT'
         USING VSBABEND,R15
VSBABEND CHI   R0,12             ENTRY CODE 12?
         BE    ENTRY12V          YES, ISSUE MESSAGE & PERCOLATE ABEND.
         SPACE
         STM   R14,R12,12(R13)   NO, SAVE REGISTERS IN SUPPLIED AREA.
         DROP  R15               VSBABEND.
         USING VSBABEND,R10
         LR    R10,R15           LOAD EXIT BASE REGISTER.
         USING SDWA,R3
         LR    R3,R1             POINT TO SYSTEM DIAGNOSTIC WORK AREA.
         MVC   VSBADPSW,SDWAEC1  COPY THE FAILING PSW.
         MVC   VWORDONE,SDWAABCC      SAVE THE ABEND CODE.
         MVC   VWORDCNT(2),SDWAINC1   SAVE THE INTERRUPT CODE.
         CLI   SDWACMPC,X'0C'    ABEND S0CX?
         BE    GOTVCODE          YES, INTERRUPT CODE IS RELEVANT.
         CLI   SDWACMPC,X'0D'    ABEND S0DX?
         BE    GOTVCODE          YES, INTERRUPT CODE IS RELEVANT.
         L     R1,VSDWASAV       POINT TO A SAVE AREA.
         MVC   0(256,R1),0(R3)   COPY THE SDWA.
         MVC   256(256,R1),256(R3)
         ST    R1,BRWSPNTR       DISPLAY THE SDWA.
         MVC   VWORDCNT(2),SDWAGR15+2    SAVE THE REASON CODE.
         ICM   R15,15,SDWAXPAD   POINT TO POINTERS EXTENSION.
         BZ    GOTVCODE          CATER FOR ZERO POINTER.
         USING SDWAPTRS,R15
         ICM   R15,15,SDWASRVP   POINT TO COMPONENT EXTENSION.
         DROP  R15               SDWAPTRS.
         BZ    GOTVCODE          CATER FOR ZERO POINTER.
         USING SDWARC1,R15
         ICM   R0,15,SDWACRC     ANY REASON CODE SUPPLIED?
         BZ    GOTVCODE          NO.
         MVC   VWORDCNT(2),SDWACRC+2     SAVE THE REASON CODE.
         DROP  R15               SDWARC1.
GOTVCODE L     R12,SDWAPARM      LOAD THE RETRY ADDRESS.
         SETRP WKAREA=(3),REGS=(14,12),DUMP=NO,RC=4,                   +
               RETADDR=(12),RETREGS=YES,FRESDWA=YES
         DROP  R3                SDWA.
         SPACE
ENTRY12V LR    R10,R15           LOAD EXIT BASE REGISTER.
         LR    R5,R14            SAVE RETURN ADDRESS.
         LA    R1,ESTAVMSG       POINT TO ESTAE EXIT NOTIFY MESSAGE.
         LA    R0,L'ESTAVMSG     GET THE LENGTH OF THIS MESSAGE.
         TPUT  (1),(0),R         DISPLAY THE MESSAGE ON THE SCREEN.
         LR    R14,R5            RESTORE RETURN ADDRESS.
         SLR   R15,R15           CONTINUE WITH ABEND (PERCOLATE).
         BR    R14               EXIT FROM EXIT.
         DROP  R10               VSBABEND.
         TITLE 'VIRTUAL STORAGE MONITOR - VARIABLES AND CONSTANTS'
VWORDONE DC    F'0'              PARAMETERS FOR PUTPRTN# ROUTINE.
VWORDTWO DC    F'0'
VWORDCNT DC    F'0'              COUNT OF VIRTUAL STORAGE AREAS LISTED.
VLOWRLOW DC    F'0'              ACCUMULATOR FOR CSA BACKED BELOW.
         DC    F'0'              ACCUMULATOR FOR CSA BACKED <2GB.
         DC    F'0'              ACCUMULATOR FOR CSA BACKED ANYWHERE.
         DC    F'0'              ACCUMULATOR FOR ECSA.
         DC    F'0'              ACCUMULATOR FOR ECSA BACKED ANYWHERE.
VALLRALL DC    F'0'              ACCUMULATOR FOR ALL USED CSA PAGES.
VSDWASAV DC    F'0'              SDWA SAVE AREA ADDRESS.
BRWSPNTR DC    F'0'              VIRTUAL STORAGE PEEK ADDRESS.
         DC    CL8'BAD PSW:'
VSBADPSW DC    XL8'00'
VSBTRPTR DC    F'0'              POINTER TO CURRENT TRACE TABLE ENTRY.
VSREGS   EQU   *,8               GETMAIN REGISTERS SAVE AREA.
VSREG0   DC    F'16384'
VSREG1   DC    F'0'
BRWSFLAG DC    AL1(10),C'>',AL1(15),C'<',AL1(15),C'>',AL1(20),C'<'
         DC    AL1(21),C'>',AL1(26),C'<',AL1(26),C'>',AL1(31),C'<'
         DC    AL1(33),C'>',AL1(38),C'<',AL1(38),C'>',AL1(43),C'<'
         DC    AL1(44),C'>',AL1(49),C'<',AL1(49),C'>',AL1(54),C'<'
BRWSHOME DC    H'0'              PRIMARY ADDRESS SPACE ID.
BRWSASID DC    H'0'              SECONDARY ADDRESS SPACE ID.
BRWSISQN DC    F'0'              SECONDARY ASID INSTANCE NUMBER.
BFINDLEN DC    F'-1'             LENGTH CODE OF SEARCH DATA.
BFINDTXT DC    XL20'00'          DATA TO BE SEARCHED FOR.
BCHNGLEN DC    F'-1'             LENGTH CODE OF REPLACEMENT DATA.
BCHNGTXT DC    XL20'00'          REPLACEMENT DATA.
BRWSPCTB DS    0F                ADDRESS SPECIFICATION SUBROUTINE TABLE
         DC    CL4'    ',A(VIRTBRWS)
         DC    CL4'?   ',A(BRWSTRAC)
         DC    CL4'A   ',A(BROWSEF)
         DC    CL4'ADDR',A(BRWSADDR)
         DC    CL4'AND ',A(BRWSCHNG)
BASCBCHR DC    CL4'ASCB',A(BRWSASCB)
BASIDCHR DC    CL4'ASID',A(BRWSASCB)
         DC    CL4'ASMV',A(BRWSASMV)
BASSBCHR DC    CL4'ASSB',A(BRWSASCB)
BASTECHR DC    CL4'ASTE',A(BRWSASCB)
         DC    CL4'ASVT',A(BRWSASVT)
         DC    CL4'ASXB',A(BRWSASXB)
BCDECHR  DC    CL4'CDE ',A(BRWSLPDE)
         DC    CL4'CMB ',A(BRWSUCB)
         DC    CL4'CMCT',A(BRWSCMCT)
BCNCLCHR DC    CL4'CNCL',A(BRWSASCB)
BCSCBCHR DC    CL4'CSCB',A(BRWSASCB)
         DC    CL4'CSD ',A(BRWSCSD)
         DC    CL4'CVT ',A(BRWSCVT)
         DC    CL4'DEC ',A(BRWSDEC)
         DC    CL4'ECVT',A(BRWSECVT)
         DC    CL4'F   ',A(BROWSEF)
BFINDCHR DC    CL4'FIND',A(BRWSFIND)
         DC    CL4'GDA ',A(BRWSGDA)
         DC    CL4'HEX ',A(BRWSHEX)
         DC    CL4'JSAB',A(BRWSASCB)
         DC    CL4'JSCB',A(BRWSJSCB)
         DC    CL4'LCCA',A(BRWSLCCA)
         DC    CL4'LESS',A(BRWSLESS)
BLPAQCHR DC    CL4'LPAQ',A(BRWSLPDE)
BLPDECHR DC    CL4'LPDE',A(BRWSLPDE)
         DC    CL4'MNT ',A(BRWSMNT)
BNCANCHR DC    CL4'NCAN',A(BRWSASCB)
BNMNTCHR DC    CL4'NMNT',A(BRWSMNT)
BNSWPCHR DC    CL4'NSWP',A(BRWSASCB)
         DC    CL4'OOR ',A(BRWSCHNG)
BOUCBCHR DC    CL4'OUCB',A(BRWSASCB)
BOUXBCHR DC    CL4'OUXB',A(BRWSASCB)
         DC    CL4'PART',A(BRWSPART)
         DC    CL4'PCCA',A(BRWSPCCA)
         DC    CL4'PLPA',A(BRWSLPDE)
         DC    CL4'PLUS',A(BRWSPLUS)
         DC    CL4'PSA ',A(BRWSPSA)
         DC    CL4'PSCB',A(BRWSPSCB)
         DC    CL4'PVT ',A(BRWSPVT)
BRAXCHR  DC    CL4'RAX ',A(BRWSASCB)
         DC    CL4'RCE ',A(BRWSRCE)
         DC    CL4'REP ',A(BRWSCHNG)
         DC    CL4'RIT ',A(BRWSRIT)
         DC    CL4'RMCT',A(BRWSRMCT)
         DC    CL4'SART',A(BRWSSART)
         DC    CL4'SMCA',A(BRWSSMCA)
         DC    CL4'SVC ',A(BRWSSVC)
         DC    CL4'SVCE',A(BRWSSVC)
BSWAPCHR DC    CL4'SWAP',A(BRWSASCB)
         DC    CL4'TCAS',A(BRWSTCAS)
         DC    CL4'TCB ',A(BRWSTCB)
         DC    CL4'TCT ',A(BRWSTCT)
         DC    CL4'TRAC',A(BRWSTRAC)
BUCBCHR  DC    CL4'UCB ',A(BRWSUCB)
         DC    CL4'XOR ',A(BRWSCHNG)
BRWSPEC# EQU   (*-BRWSPCTB)/8
BRWSDSAD DC    A(BRWSDSPC)       DATASPACE HANDLING ROUTINE ADDRESS.
VBDSPRMS DC    A(VBDSFUNC)       PLIST FOR IMDSLIST ROUTINE.
VBDSFUNC DC    CL4'DS  '         FUNCTION REQUEST TYPE - 'LD' OR 'DS'.
VBDSADDR DC    XL4'00'           ASID OR STORAGE START ADDRESS.
VBDSTOKN DC    XL8'00'           DATASPACE STOKEN.
VBDSPNTR DC    A(0)              RETURNED DATA AREA.
VBDSNAME DC    CL8' '            DATASPACE NAME.
HEXDEC@  DS    A(0)              HEX/DEC RESUME BUFFER ADDRESS.
VBLINES  DC    F'0'              AVAILABLE SCREEN LINES.
VBCOLS   DC    F'0'              AVAILABLE SCREEN COLUMNS.
VBPRY61I WTO   'PRY601I TSOUSER HAS ALTERED ADDRESS 12345678 IN ASID 12+
               34 ',ROUTCDE=(9),MF=L
VBPRY62I WTO   'PRY602I DATA WAS X''12345678901234567890123456789012345+
               67890''',ROUTCDE=(9),MF=L
VBPRY63I WTO   'PRY603I DATA IS  X''12345678901234567890123456789012345+
               67890''',ROUTCDE=(9),MF=L
VBPRY64I WTO   'PRY604I 123456789012345678901234567890123456789 - BY TS+
               OUSER ',ROUTCDE=(1,2),MF=L
HEADINGV DC    CL79'     VIRTUAL STORAGE AREA NAME             LOW-ADDR+
                  TOP-ADDR       SIZE      '
HEADGDTL DC    CL79'   SPID  KEY    ADDRESS     SIZE                << +
               ??? SUBPOOL DETAILS >>      '
HEADGCSA DC    CL79'SPID  KEY    V24,R24    V24,R31    V24,R64    V31,R+
               31    V31,R64      TOTAL    '
HEADBRWS DC    CL71'         VIRTUAL STORAGE DATA AT ADDRESS ???????? I+
               N ASID ????         '
HEADVSBT DC    CL71'         VIRTUAL STORAGE BROWSE TRACE TABLE DISPLAY+
                                   '
ESTAVMSG DC    C'IMP/XA ESTAE EXIT V - ENTRY CODE 12 - NO VIRTUAL STORA+
               GE FOR RTM SDWA'
VCANDBAR DC    C' '                DISPLAY MODE FOR THIS MONITOR.
VPARTFLG DC    C' '                STORAGE PARTITION FLAG.
CSASPIDS DC    C'227228231241'     COMMON SERVICE AREA SUBPOOLS.
SPIDSEND EQU   *
S0C4     DC    X'0C40'
BALFAHEX DC    X'0A0B0C0D0E0F'     ALPHABETIC HEX VALUES.
VKEYPROT DC    X'07'
HXDECDEC DC    CL12' '
         DC    C' = X'''
HXDECHEX DC    CL9' '
HXDECLEN EQU   *-HXDECDEC
VBPROMPT DC    C'ENTER NEW ADDRESS SPECIFICATION ==>',X'24'
         DCS   IC
VBECHO   DC    XL20'00'
         DC    X'26'
VBPRMPTL EQU   *-VBPROMPT
ISMSG    DC    CL39'     INVALID ADDRESS SPECIFICATION     '
NDMSG    DC    CL39'   NON-DECIMAL CHARACTER ENCOUNTERED   '
EDMSG    DC    CL39'   FIND/ALTER INVALID FOR DATASPACES   '
TQMSG    DC    CL39'   EXPECTED TRAILING QUOTE NOT FOUND   '
OXMSG    DC    CL39'  HEX DIGIT COUNT IS NOT 2, 4, 6 OR 8  '
MDMSG    DC    CL39'   DATA TO BE PROCESSED NOT SUPPLIED   '
AHMSG    DC    CL39'  JOB OR USER ALREADY HAS THAT STATUS  '
MNMSG    DC    CL39'  TSOUSER NOW HAS THE MOUNT ATTRIBUTE  '
NMMSG    DC    CL39' TSOUSER NOW HAS THE NOMOUNT ATTRIBUTE '
CNMSG    DC    CL39'      JOB-NAME IS NOW CANCELLABLE      '
NCMSG    DC    CL39'    JOB-NAME IS NOW NON-CANCELLABLE    '
SWMSG    DC    CL39'       JOB-NAME IS NOW SWAPPABLE       '
DSMSG    DC    CL39'     JOB-NAME IS NOW NON-SWAPPABLE     '
PBMSG    DC    CL39'RNUC/PLPA ZAP MUST NOT CROSS PAGE BNDRY'
AFMSG    DC    CL39'      AUTHORIZATION CHECK FAILURE      '
BEMSGCLR DC    X'00'               "BROWSE ERROR" MESSAGE COLOUR.
BEMSGTXT DC    CL39' '             "BROWSE ERROR" MESSAGE TEXT.
         SPACE
         LTORG
         SPACE
PARTITNS DS    0X     VIRTUAL STORAGE AREA NAME AND COLOUR CODE TABLE.
         DC    CL41'7BLDL LIST          (IMPOSSIBLE WITH LLA)'
         DC    CL41'6MLPA           (MODIFIED LINK PACK AREA)'
         DC    CL41'2FLPA              (FIXED LINK PACK AREA)'
         DC    CL41'6PLPA           (PAGEABLE LINK PACK AREA)'
         DC    CL41'3NUC                 (READ/WRITE NUCLEUS)'
         DC    CL41'2RNUC                 (READ-ONLY NUCLEUS)'
         DC    CL41'3ENUC       (EXTENDED READ/WRITE NUCLEUS)'
         DC    CL41'6EPLPA (EXTENDED PAGEABLE LINK PACK AREA)'
         DC    CL41'2EFLPA    (EXTENDED FIXED LINK PACK AREA)'
         DC    CL41'6EMLPA (EXTENDED MODIFIED LINK PACK AREA)'
         DC    CL41'1CSA                (COMMON SERVICE AREA)'
         DC    CL41'1ECSA      (EXTENDED COMMON SERVICE AREA)'
         DC    CL41'5SQA                  (SYSTEM QUEUE AREA)'
         DC    CL41'5ESQA        (EXTENDED SYSTEM QUEUE AREA)'
         DC    CL41'4ADDRESS SPACE REGION    (INCLUDING LSQA)'
         DC    CL41'4EXTENDED ADDR SPACE REGION (INCL. ELSQA)'
         DC    CL41'4SYSTEM REGION  (WITHIN THE PRIVATE AREA)'
         DC    CL41'4EXTENDED SYSTEM REGION    (IN EPVT AREA)'
         DC    CL41'7PSA                 (PREFIXED SAVE AREA)'
         SPACE
         DS    0H
         TITLE 'VIRTUAL STORAGE MONITOR SUBROUTINE'
         USING VIRTSTOR,R11,R10,R8
         USING VOPTSHOW,R7
VOPTSHOW L     R1,INITADDR       GET ADDRESSABILITY TO SCRNHDR.
         USING INITIAL,R1        RESTORE EXPECTED HEADING FORMAT.
         MVC   HOME(HDRLEN),SCRNHDR
         DROP  R1                INITIAL.
         MVC   HEADING,HEADOPTV
         LA    R2,BUFFER-LL      POINT TO BEFORE FIRST DETAIL LINE.
         BAS   R14,VOMTLINE      POINT TO FIRST DETAIL LINE.
         BAS   R14,VOMTLINE      ADD A BLANK LINE.
         MVC   LL-60(26,R2),=C'B - BROWSE VIRTUAL STORAGE'
         BAS   R14,VOPTLINE
         BAS   R14,VOMTLINE      ADD A BLANK LINE.
         MVC   LL-60(21,R2),=C'C - CSA USAGE SUMMARY'
         BAS   R14,VOPTLINE
         BAS   R14,VOMTLINE      ADD A BLANK LINE.
         MVC   LL-60(21,R2),=C'D - CSA USAGE DETAILS'
         BAS   R14,VOPTLINE
         BAS   R14,VOMTLINE      ADD A BLANK LINE.
         MVC   LL-60(22,R2),=C'L - LSQA USAGE DETAILS'
         BAS   R14,VOPTLINE
         BAS   R14,VOMTLINE      ADD A BLANK LINE.
         MVC   LL-60(33,R2),=C'P - PRIVATE STORAGE USAGE DETAILS'
         BAS   R14,VOPTLINE
         BAS   R14,VOMTLINE      ADD A BLANK LINE.
         MVC   LL-60(21,R2),=C'S - SQA USAGE DETAILS'
         BAS   R14,VOPTLINE
         BAS   R14,VOMTLINE      ADD A BLANK LINE.
         MVC   LL-60(30,R2),=C'V - VIRTUAL STORAGE PARTITIONS'
         BAS   R14,VOPTLINE
         BAS   R14,VOMTLINE      ADD A BLANK LINE.
         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.
         MVC   0(4,R2),BLNKREST  ERASE REST OF SCREEN.
         LA    R2,4(,R2)         ADJUST BUFFER POINTER.
         B     TIDYVOPT          FINISH UP AND DISPLAY.
         SPACE
VOPTLINE MVI   LL-61(R2),X'26'   YELLOW FOR SUB-OPTION SELECTION CODE.
         MVI   LL-59(R2),X'25'   BACK TO TURQUOISE FOR REST OF LINE.
VOMTLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.
         MVI   LL-79(R2),C' '    CLEAR DISPLAY LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         BR    R14
         DROP  R7                VOPTSHOW.
HEADOPTV DC    CL71'           VIRTUAL STORAGE MONITOR SUB-OPTION SELEC+
               TION LIST           '
         LTORG
         DS    0H
         TITLE 'EXTRA VIRTUAL STORAGE BROWSE SUBROUTINES'
         USING QSRCHCSA,R15
QSRCHCSA STM   R14,R12,12(R13)   SAVE REGISTERS.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R3,CVTGDA         POINT TO THE GLOBAL DATA AREA.
         DROP  R3                CVT.
         USING GDA,R3
         C     R5,GDACSA         TARGET ADDRESS BELOW CSA?
         BL    QSCSAXIT          YES, SKIP CSA SCAN.
         L     R0,GDAECSA        POINT TO ECSA.
         A     R0,GDAECSAS       POINT PAST ECSA.
         CR    R5,R0             TARGET ADDRESS ABOVE ECSA?
         BNL   QSCSAXIT          YES, SKIP CSA SCAN.
         L     R3,GDASPT         POINT TO THE CSA SUBPOOL TABLE.
         DROP  R3                GDA.
         USING SPT,R3
         LA    R3,SPTNTRY        POINT TO FIRST SUBPOOL ENTRY.
         DROP  R3                SPT.
         LA    R4,CSASPIDS       POINT TO CSA SUBPOOL IDS LIST.
QNXTSPID LA    R14,16            16 DIFFERENT STORAGE PROTECT KEYS.
QNEXTKEY LA    R7,3              THREE ENTRIES PER KEY PER SUBPOOL.
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   QNXTNTYP          NO.
         LA    R7,5              FIVE ENTRIES PER KEY PER SUBPOOL.
QNXTNTYP LR    R6,R3             POINT TO FIRST DQE POINTER.
         USING DQE,R6
QNEXTDQE L     R6,DQENEXT        POINT TO DQE.
         CR    R6,R3             END OF CHAIN?
         BE    QDNSPKEY          YES, DONE THIS KEY FOR THIS SUBPOOL.
         L     R0,DQEAREA        POINT TO ALLOCATED BLOCK.
         CR    R5,R0             IN ALLOCATED AREA?
         BL    QNEXTDQE          NO.
         A     R0,DQESIZE
         CR    R5,R0
         BNL   QNEXTDQE          NO.
         MVI   LL-79(R2),C' '    YES, BLANK THE DISPLAY LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LA    R0,3              THREE ENTRIES PER KEY PER SUBPOOL.
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   *+8               NO.
         LA    R0,5              FIVE ENTRIES PER KEY PER SUBPOOL.
         CR    R7,R0             PAGE-FIXED BELOW THE LINE?
         BNE   *+10              NO.
         MVC   LL-21(7,R2),=C'(R<16M)'
         MVC   LL-5(2,R2),=C'SP' SHOW SUBPOOL NUMBER.
         MVC   LL-3(3,R2),0(R4)
         MVC   LL-12(3,R2),=C'KEY'
         LA    R0,16             SHOW STORAGE KEY.
         SR    R0,R14
         STC   R0,LL-8(,R2)
         TR    LL-8(1,R2),HEX
**       ST    R6,WORK           SHOW DQE ADDRESS.
**       MVC   LL-74(3,R2),=C'DQE'
**       UNPK  LL-70(9,R2),WORK(5)
**       TR    LL-70(8,R2),HEX-C'0'
**       MVI   LL-62(R2),C' '
         LR    R7,R6             COPY DQE ADDRESS.
         USING FQE,R7
QFQELOOP L     R7,FQENEXT        POINT TO THE NEXT FQE.
         CR    R7,R6             END OF FQE CHAIN?
         BE    QALLOCSA          YES, DISPLAY LINE NOW COMPLETE.
         L     R0,FQEAREA        POINT TO ALLOCATED BLOCK.
         CR    R5,R0             IN FREE AREA?
         BL    QFQELOOP          NO.
         A     R0,FQESIZE
         CR    R5,R0
         BNL   QFQELOOP          NO.
         MVC   LL-43(15,R2),=C'   FREE STORAGE'
QALLOCSA LA    R2,LL-80(,R2)     LINE NOW COMPLETE.
         A     R2,VBCOLS         ADJUST SCREEN BUFFER POINTER.
         ST    R2,28(,R13)       SAVE NEW BUFFER POINTER.
         MVC   0(LL-79,R2),=X'2841001BF8402842F1' HIGH INTENSITY/BLUE.
         MVI   LL-79(R2),C' '    BLANK A DISPLAY LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         B     QSCSAXIT          STILL PERFORM TCB SCAN.
         DROP  R6,R7             DQE, FQE.
QDNSPKEY LA    R3,8(,R3)         ADJUST SUBPOOL TABLE ENTRY POINTER.
         BCT   R7,QNXTNTYP       PROCESS NEXT ENTRY TYPE.
         BCT   R14,QNEXTKEY      PROCESS NEXT STORAGE PROTECT KEY.
         LA    R4,3(,R4)         POINT TO NEXT SUBPOOL ID.
         LA    R1,SPIDSEND       POINT TO END OF SUBPOOL IDS.
         CR    R4,R1             DONE LAST CSA SUBPOOL?
         BL    QNXTSPID          NO, PROCESS THIS SUBPOOL.
QSCSAXIT LM    R14,R12,12(R13)   RESTORE REGISTERS.
         BR    R14               RETURN TO CALLER.
         DROP  R15               QSRCHCSA.
         SPACE 2
         USING QSRCHMSS,R15
         USING TCB,R4
QSRCHMSS LA    R3,TCBMSS         POINT TO FIRST SPQE ANCHOR.
         LA    R9,TCBUKYSP       POINT TO SECOND SPQE ANCHOR.
         USING SPQE,R3
VQSPQELP ICM   R3,15,SPQENEXT    POINT TO NEXT SPQE.
         BNZ   VGETSPQA          GO FIND THE SPQA.
         LTR   R9,R9             ANY MORE SPQE ANCHORS?
         BZR   R14               NO, NO MORE SPQES TO CHECK.
         LA    R3,TCBSWA         YES, POINT TO LAST SPQE ANCHOR.
         CR    R3,R9             ALREADY QUEUED LAST ANCHOR?
         LR    R3,R9             COPY NEXT TCB SPQE POINTER.
         BE    VSWADONE          YES.
         LA    R9,TCBSWA         NO, QUEUE UP LAST ANCHOR.
         B     VQSPQELP          TRY THIS SPQE CHAIN.
VSWADONE SLR   R9,R9             DON'T DO THIS AGAIN.
         B     VQSPQELP          TRY THIS SPQE CHAIN.
VGETSPQA L     R5,SPQESPQA       POINT TO SPQA.
         USING SPQA,R5
         XC    WORK,WORK         RESET A FLAG.
         ST    R5,WORK+4         SAVE SPQA CHECK.
         LA    R0,2
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   *+8               NO.
         LA    R0,3              YES.
         TM    BRWSPNTR,X'7F'    EXTENDED ADDRESS?
         BZ    VDQESCAN          NO.
         LA    R5,SPQAADQE+8     YES, POINT TO EXTENDED DQE ANCHORS.
         LA    R0,1
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   VDQESCAN          NO.
         L     R5,SPQESPQX       YES, POINT TO EXTENDED DQE ANCHORS.
         LA    R0,2
VDQESCAN STH   R0,WORK           SAVE DQE QUEUE COUNT.
         LR    R6,R5             POINT TO FIRST DQE ANCHOR.
         USING DQE,R6
VDQELOOP L     R6,DQENEXT        POINT TO NEXT DQE.
         CR    R6,R5             END OF DQE CHAIN?
         BE    VANKCHEK          YES, CHECK FOR MORE ANCHORS.
         L     R0,DQEAREA        POINT TO ALLOCATED BLOCK.
         CR    R7,R0             IN ALLOCATED AREA?
         BL    VDQELOOP          NO.
         A     R0,DQESIZE
         CR    R7,R0
         BNL   VDQELOOP          NO.
         DROP  R5                SPQA.
         MVI   LL-79(R2),C' '    YES, BLANK THE DISPLAY LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         C     R5,WORK+4         PAGE-FIXED BELOW THE LINE?
         BNE   *+10              NO.
         MVC   LL-21(7,R2),=C'(R<16M)'
         SLR   R0,R0
         IC    R0,SPQEID         SHOW SUBPOOL NUMBER.
         CVD   R0,WORK
         OI    WORK+7,X'0F'
         MVC   LL-5(2,R2),=C'SP'
         UNPK  LL-3(3,R2),WORK+6(2)
         MVC   LL-12(3,R2),=C'KEY'
         IC    R0,SPQEKEY        SHOW STORAGE KEY.
         SRL   R0,4
         STC   R0,LL-8(,R2)
         TR    LL-8(1,R2),HEX
         MVC   LL-75(14,R2),=C'PAGE IS SHARED'
         TM    SPQEFLGS,SPQEOWN  OWNED BY A TCB?
         BZ    VQCHKFQE          NO, DON'T SHOW TCB ADDRESS.
         MVC   LL-67(15,R2),=C'OWNED BY TCB AT'
         UNPK  LL-51(7,R2),SPQETCB+1(4)
         TR    LL-51(6,R2),HEX-C'0'
         MVI   LL-45(R2),C' '
         L     R5,SPQETCB
         MVC   LL-43(6,R2),=C'(TERM)'
         TM    29(R5),X'C0'      IS THE TASK TERMINATING?
         BNZ   ENDOFJPA          YES, DISPLAY LINE NOW COMPLETE.
         MVC   LL-43(6,R2),BLANKS
         L     R5,0(,R5)         POINT TO TOP RB.
VQRBLOOP ICM   R0,7,29(R5)       GET RBLINK.
         C     R0,SPQETCB        BOTTOM RB?
         BE    VQGOTPRB          YES.
         LR    R5,R0             NO.
         B     VQRBLOOP
VQGOTPRB TM    10(R5),X'E0'      PRB?
         BNZ   VQCHKFQE          NO, DON'T SHOW PROGRAM NAME.
         ICM   R5,7,13(R5)       POINT TO THE CDE.
         MVC   LL-36(8,R2),8(R5) COPY PROGRAM NAME.
         MVC   LL-43(7,R2),=C'-  PGM='
VQCHKFQE LR    R5,R6             COPY DQE ADDRESS.
         USING FQE,R5
VFQELOOP L     R5,FQENEXT        POINT TO THE NEXT FQE.
         CR    R5,R6             END OF FQE CHAIN?
         BE    ENDOFJPA          YES, DISPLAY LINE NOW COMPLETE.
         L     R0,FQEAREA        POINT TO ALLOCATED BLOCK.
         CR    R7,R0             IN FREE AREA?
         BL    VFQELOOP          NO.
         A     R0,FQESIZE
         CR    R7,R0
         BNL   VFQELOOP          NO.
         MVC   LL-43(15,R2),=C'   FREE STORAGE'
         B     ENDOFJPA          DISPLAY LINE NOW COMPLETE.
         DROP  R5,R6             FQE, DQE.
VANKCHEK LA    R5,8(,R5)         POINT TO NEXT DQE ANCHORS.
         LH    R0,WORK
         BCT   R0,VDQESCAN       LOOK AT NEXT DQE CHAIN.
         B     VQSPQELP          CHECK NEXT SUBPOOL QUEUE ELEMENT.
         DROP  R3,R4             SPQE, TCB.
         DROP  R15               QSRCHMSS.
         SPACE
         LTORG
         SPACE
         DS    0H
         EJECT
         USING CVT,R1
BRWSASMV L     R1,CVTPTR(,0)     LOAD CVT POINTER.
         MVC   BRWSPNTR,CVTASMVT COPY ASMVT POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSASVT L     R1,CVTPTR(,0)     LOAD CVT POINTER.
         MVC   BRWSPNTR,CVTASVT  COPY ASVT POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSCMCT MVC   BRWSPNTR,CMCTADDR COPY THE CMCT ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSCSD  L     R1,CVTPTR(,0)     LOAD CVT POINTER.
         MVC   BRWSPNTR,CVTCSD   COPY COMMON SYSTEM DATA AREA POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSCVT  MVC   BRWSPNTR,CVTPTR(0) COPY CVT POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSECVT L     R1,CVTPTR(,0)     LOAD CVT POINTER.
         MVC   BRWSPNTR,CVTECVT  COPY EXTENDED CVT POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSGDA  L     R1,CVTPTR(,0)     LOAD CVT POINTER.
         MVC   BRWSPNTR,CVTGDA   COPY GLOBAL DATA AREA POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R1                CVT.
BRWSJSCB L     R1,PSATOLD        POINT TO THE CURRENT TCB.
         USING TCB,R1
         MVC   BRWSPNTR,TCBJSCB  COPY THE JSCB ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R1                TCB.
         USING BRWSLPDE,R2
BRWSLPDE LR    R2,R15            TEMPORARY BASE REGISTER.
         LA    R3,INCHARS+4      POINT TO MODULE NAME.
         CLI   0(R3),C' '        A LEADING BLANK?
         BNE   BGOTLPAM          NO.
         LA    R3,1(,R3)         YES, ALLOW ONE.
         CLI   0(R3),C' '        A LEADING BLANK?
         BE    BPLPADIR          YES, POINT TO PLPA DIRECTORY/START.
BGOTLPAM CLI   0(R3),C''''       A LEADING QUOTE?
         BNE   BLPDENAM          NO.
         LA    R3,1(,R3)         YES, ALLOW ONE.
BLPDENAM MVC   WORK,0(R3)        GET ON WORD BOUNDARY.
         CLC   INCHARS(4),BLPAQCHR   WAS LPAQ REQUESTED?
         BE    BRWSLPAQ          YES.
         CLC   INCHARS(4),BCDECHR    WAS CDE REQUESTED?
         BE    BRWSLPAQ          YES.
         LR    R4,R8             SAVE A BASE REGISTER.
         LM    R0,R1,WORK        LOAD NAME FOR IEAVVMSR TO SEARCH FOR.
         L     R3,CVTPTR(,0)     CVT POINTER REQUIRED BY IEAVVMSR.
         USING CVT,R3
         L     R15,CVTLPDSR      GET ENTRY POINT FOR IEAVVMSR.
         DROP  R3                CVT.
         BASR  R14,R15           CALL IEAVVMSR (7, 8 AND 9 WORK REGS).
         B     BRWSPLPA          FOUND IN PLPA.
         LR    R8,R4             RESTORE BASE REGISTER.
         B     BRWSERIS          NO LPDE, NOT IN PLPA.
BRWSPLPA LR    R8,R4             RESTORE BASE REGISTER.
         LR    R1,R0             POINT TO THE LPDE.
         LA    R1,0(,R1)         ENSURE SIGN BIT IS OFF.
         USING LPDE,R1
BCDELPDE ST    R1,BRWSPNTR       SAVE THE LPDE ADDRESS.
         CLC   INCHARS(4),BLPDECHR   WAS LPDE REQUESTED?
         BE    VBASBRWS          YES, ALL SET.
         CLC   INCHARS(4),BCDECHR    WAS CDE REQUESTED?
         BE    VBASBRWS          YES, ALL SET.
         L     R1,LPDENTP        NO, POINT TO THE ENTRY POINT.
         DROP  R1                LPDE.
BRPLPAOK LA    R1,0(,R1)         ENSURE SIGN BIT IS OFF.
         ST    R1,BRWSPNTR       SAVE THE LOAD MODULE START ADDRESS.
         NI    BRWSPNTR,X'FE'    ENSURE AMODE64 BIT IS OFF.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BPLPADIR CLC   INCHARS(4),BLPAQCHR   WAS LPAQ REQUESTED?
         BE    BRWSERIS          YES, MISSING OPERAND.
         CLC   INCHARS(4),BCDECHR    WAS CDE REQUESTED?
         BE    BRWSERIS          YES, MISSING OPERAND.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         L     R1,CVTLPDIA       POINT TO THE PLPA DIRECTORY.
         B     BRPLPAOK          USE THIS ADDRESS.
BRWSLPAQ L     R1,CVTPTR(,0)     POINT TO CVT.
         L     R1,CVTQLPAQ       POINT TO LPAQ ORIGIN.
         DROP  R1                CVT.
         USING CDENTRY,R1
VBLPAQLP ICM   R1,15,CDCHAIN     LAST CDE ON CHAIN?
         BZ    BRWSERIS          YES, WASN'T ON LINK PACK CHAIN.
         CLC   WORK,CDNAME       FOUND THE LOAD MODULE?
         BNE   VBLPAQLP          NO, TRY NEXT ONE.
         B     BCDELPDE          YES, GOT THE DIRECTORY ELEMENT.
         DROP  R2,R1             BRWSLPDE, CDENTRY.
BRWSPART MVC   BRWSPNTR,PARTADDR COPY THE PART ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         USING BRWSPCCA,R15
BRWSPCCA CLC   INCHARS+4(2),BLANKS
         BNE   CPUPCCA           CPU NUMBER SPECIFIED.
         MVC   BRWSPNTR,PSAPCCAV COPY THE CURRENT PCCA POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R15               BRWSPCCA.
CPUPCCA  LA    R0,1              MAXIMUM OF 1 HEX DIGIT IN AN CP ID.
         BAS   R14,BROWSHEX      GET SPECIFIED CPU.
         SLL   R15,2             CONVERT INTO PCCAVT INDEX.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         L     R1,CVTPCCAT       POINT TO THE PCCAVT.
         DROP  R1                CVT.
         LA    R1,0(R15,R1)      POINT TO THE PCCAVT ENTRY.
         ICM   R15,15,0(R1)      LOAD ADDRESS OF PARTICULAR PCCA.
         BZ    BRWSERIS          ZERO, SELECTED CPU IS NOT ACTIVE.
         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         USING BRWSPSA,R15
BRWSPSA  CLC   INCHARS+4(2),BLANKS
         BNE   CPUPSA            CPU NUMBER SPECIFIED.
         SLR   R1,R1             GET CURRENT PSA ADDRESS.
         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R15               BRWSPSA.
CPUPSA   LA    R0,1              MAXIMUM OF 1 HEX DIGIT IN AN CP ID.
         BAS   R14,BROWSHEX      GET SPECIFIED CPU.
         SLL   R15,2             CONVERT INTO PCCAVT INDEX.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         L     R1,764(,R1)       POINT TO THE PCCAVT.
         DROP  R1                CVT.
         LA    R1,0(R15,R1)      POINT TO THE PCCAVT ENTRY.
         ICM   R15,15,0(R1)      LOAD ADDRESS OF PARTICULAR PCCA.
         BZ    BRWSERIS          ZERO, SELECTED CPU IS NOT ACTIVE.
         USING PCCA,R15
         L     R15,PCCAPSAV      POINT TO CORRESPONDING PSA.
         DROP  R15               PCCA.
         ST    R15,BRWSPNTR      UPDATE BROWSE POINTER.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSPSCB L     R1,PSATOLD        POINT TO THE CURRENT TCB.
         USING TCB,R1
         L     R1,TCBJSCB        POINT TO THE CURRENT JSCB.
         DROP  R1                TCB.
         USING IEZJSCB,R1
         MVC   BRWSPNTR,JSCBPSCB COPY THE PSCB ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R1                IEZJSCB.
BRWSPVT  L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         MVC   BRWSPNTR,CVTPVTP  COPY THE PVT ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSRCE  MVC   BRWSPNTR,RCEADDR  COPY THE RCE ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSRIT  L     R1,CVTPTR(,0)     POINT TO THE CVT.
         L     R1,CVTPVTP        POINT TO THE PVT.
         MVC   BRWSPNTR,4(R1)    COPY THE RIT ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSRMCT MVC   BRWSPNTR,RMCTADDR COPY THE RMCT ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSSART MVC   BRWSPNTR,SARTADDR COPY THE SART ADDRESS.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSSMCA MVC   BRWSPNTR,SMCAADDR COPY THE SMCA ADDRESS.
         NI    BRWSPNTR,X'7F'    TURN OFF VSAM SMF DATA SET FLAG.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
BRWSSVC  LA    R0,2              MAXIMUM OF 2 HEX DIGITS IN SVC NUMBER.
         BAS   R14,BROWSHEX      GET SPECIFIED SVC NUMBER.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         L     R1,CVTABEND       POINT TO THE SCVT.
         DROP  R1                CVT.
         USING SCVTSECT,R1
         L     R1,SCVTSVCT       POINT TO THE SVC TABLE.
         DROP  R1                SCVTSECT.
         SLL   R15,3             GET INDEX INTO TABLE.
         USING SVCENTRY,R1
         LA    R1,0(R15,R1)      POINT TO SVC TABLE ENTRY.
         ST    R1,BRWSPNTR       SAVE UPDATED VALUE.
         CLI   INCHARS+3,C' '    SVC TABLE ENTRY REQUESTED?
         BE    VBASBRWS          YES, DISPLAY DATA FROM NEW ADDRESS.
         MVC   BRWSPNTR,SVCEP    NO, LOAD ENTRY POINT ADDRESS.
         NI    BRWSPNTR,X'7F'    RESET AMODE BIT.
         NI    BRWSPNTR+3,X'FE'  JUST IN CASE THERE IS AN AM64 BIT.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R1                SVCENTRY.
BRWSTCT  L     R1,PSATOLD        POINT TO THE CURRENT TCB.
         USING TCB,R1
         MVC   BRWSPNTR,TCBTCT   COPY THE TCT ADDRESS.
         NI    BRWSPNTR,X'7F'    RESET SMF GETMAIN/FREEMAIN BIT.
         B     VBASBRWS          DISPLAY DATA FROM NEW ADDRESS.
         DROP  R1                TCB.
         TITLE 'VIRTUAL STORAGE MONITOR - DATASPACE ROUTINE'
         USING BRWSDSPC,R2
BRWSDSPC DS    0H                PROCESS DATASPACE REQUEST.
         MVC   HEADING+53(8),VBDSNAME
         MVI   HEADING+61,C' '   SHOW DATASPACE NAME.
         LA    R0,256            GET DATA LENGTH TO FETCH.
         CLI   COLUMNS+3,80      80-COLUMN SCREEN?
         BNE   BDGOTLEN          NO.
         CLI   VBLINES+3,43      AT LEAST 43 SCREEN LINES?
         BL    BASIDSOK          NO.
         LA    R0,512            YES, INCREASE DATA LENGTH.
BDGOTLEN STH   R0,VBDSDLEN       SAVE DATA SIZE TARGET.
         STH   R0,VBDSDREM       SET REMAINING DATA TO GET.
         LR    R5,R4             COPY DATA DISPLAY START ADDRESS.
         SRL   R4,12
         SLL   R4,12             GET ADDRESS OF START OF PAGE.
         SR    R5,R4             GET OFFSET INTO FETCHED PAGE.
         MODESET MF=(E,MDSET0)   KEY 0 FOR ALLOWUSERKEYCSA(NO).
BDPAGELP ST    R4,VBDSADDR       SAVE IT IN THE PARAMETER LIST.
         LA    R1,VBDSPRMS       POINT TO PARAMETER LIST.
         L     R15,=V(IMDSPACE)  GET DATASPACE LIST ROUTINE EP.
         BASR  R14,R15           INVOKE IT.
         ST    R15,VWORDONE      SAVE RETURN CODE.
         ICM   R15,15,VWORDONE   SUCCESSFUL CALL?
         BNZ   BDRETURN          NO, NO (MORE) DATA TO DISPLAY.
         L     R1,VBDSPNTR       YES, POINT TO RETURNED PAGE.
         AR    R5,R1             POINT TO START OF DATA TO SHOW.
         LR    R0,R1             POINT TO RETURNED DATA.
         AHI   R0,4096           POINT PAST RETURNED DATA.
         LH    R15,VBDSDREM      GET LENGTH TO GO.
BDCOPYLP MVC   0(128,R3),0(R5)   COPY 128 DATASPACE PAGE BYTES.
         LA    R3,128(,R3)       ADJUST TARGET ADDRESS.
         LA    R5,128(,R5)       ADJUST SOURCE ADDRESS.
         AHI   R15,-128          ADJUST LENGTH TO GO.
         STH   R15,VBDSDREM      UPDATE LENGTH TO GO.
         BNP   BDCOPYDN          DATA TARGET MET.
         CR    R5,R0             EXHAUSTED THIS PAGE?
         BL    BDCOPYLP          NO, GO COPY MORE DATA.
         BAS   R14,VBDSFREE      YES, FREE THE PAGE BUFFER.
         AHI   R4,4096           POINT TO NEXT DATASPACE PAGE.
         SR    R5,R5             ZERO PAGE OFFSET OF DATA TO COPY.
         B     BDPAGELP          GO FETCH NEXT DATASPACE PAGE.
BDCOPYDN BAS   R14,VBDSFREE      FREE THE PAGE BUFFER.
BDRETURN MODESET MF=(E,MDSETN0)  REVERT TO USER KEY.
         L     R3,VWORDTWO       RESTORE RETURNED DATA POINTER.
         L     R4,BRWSPNTR       GET TARGET BROWSE ADDRESS.
         SRL   R4,7
         SLL   R4,7              GET DATA START ADDRESS.
         LH    R15,VBDSDLEN      GET TARGET SIZE OF DATA.
         SH    R15,VBDSDREM      GET SIZE OF DATA PROCURED.
         SRA   R15,4             CONVERT TO SCREEN DISPLAY LINES.
         STC   R15,WORK2         SAVE IT.
         B     SKIPVSB8          RETURN.
         SPACE
VBDSFREE DS    0H                FREE DATASPACE PAGE BUFFER IN ECSA.
         FREEMAIN RU,A=(1),LV=4096,SP=241
         ST    R15,VBDSPNTR      RESET POINTER.
         BR    R14               RETURN TO CALLER.
         SPACE
         DROP  R2                BRWSDSPC.
         SPACE
VBDSDLEN DC    H'256'            LENGTH OF DATA TO SHOW.
VBDSDREM DC    H'256'            LENGTH OF DATA TO BE PROCURED.
         LTORG
         TITLE 'VIRTUAL STORAGE MONITOR - DATA FETCH ERROR MESSAGE'
         USING VBPNKMSG,R15
VBPNKMSG MVC   0(LL-79,R2),MEDX
         MVI   LL-79(R2),C' '    CLEAR A LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         TM    VBDSTOKN,X'80'    DATASPACE SPACE TOKEN PRESENT?
         BO    VBDSPINK          YES, DATASPACE ACCESS ERROR.
         ICM   R0,3,BRWSASID     IS THE SASID ZERO?
         BZ    LASPFAIL          YES, LASP SET A NON-ZERO COND CODE.
         CLC   S0C4,VWORDONE+1   S0C4 ABEND?
         BNE   VNOTS0C4          NO.
         CLI   VWORDCNT+1,X'04'  PROTECTION EXCEPTION?
         BE    VBPROTEX          YES.
         CLI   VWORDCNT+1,X'10'  SEGMENT TRANSLATION EXCEPTION?
         BE    VBSGMTEX          YES.
         CLI   VWORDCNT+1,X'11'  PAGE TRANSLATION EXCEPTION?
         BE    VBPAGEEX          YES.
VNOTS0C4 MVC   LL-57(35,R2),=C'ABEND OCCURRED WHILE ACCESSING DATA'
         MVI   LL-67(R2),C'S'    DENOTE SYSTEM ABEND.
         OI    VWORDONE+2,X'0F'  DISPLAY ABEND CODE (SHOULD BE 0C4).
         UNPK  LL-66(3,R2),VWORDONE+1(2)
         TR    LL-66(3,R2),HEX-C'0'
         MVI   LL-63(R2),C'-'
         UNPK  LL-62(5,R2),VWORDCNT(3)
         TR    LL-62(4,R2),HEX-C'0'
         MVI   LL-58(R2),C' '    DISPLAY INTERRRUPT OR REASON CODE.
         B     VBERRMSG
VBPROTEX MVC   LL-59(38,R2),=C'PROTECTION EXCEPTION  -  ACCESS DENIED'
         B     VBERRMSG
VBSGMTEX MVC   LL-61(33,R2),=C'TRANSLATION EXCEPTION  -  MISSING PAGE'
         MVC   LL-27(7,R2),=C'SEGMENT'
         B     VBERRMSG
VBPAGEEX MVC   LL-59(38,R2),=C'TRANSLATION EXCEPTION  -  MISSING PAGE'
         B     VBERRMSG
VBDSPINK CLI   VWORDONE+3,8      INVALID SPACE TOKEN?
         BE    VBDSGONE          YES, THE DATASPACE HAS GONE AWAY.
         CLI   VWORDONE+3,20     STORAGE OUT OF RANGE?
         BE    VBDSMALL          YES, DATASPACE TOO SMALL FOR ADDRESS.
         MVC   LL-54(24,R2),=C'SUBROUTINE RETURN CODE ='
         UNPK  LL-29(3,R2),VWORDONE+3(2)
         TR    LL-29(2,R2),HEX-C'0'
         MVI   LL-27(R2),C' '
         B     VBERRMSG
VBDSGONE MVC   LL-53(26,R2),=C'DATASPACE NO LONGER EXISTS'
         B     VBERRMSG
VBDSMALL MVC   LL-59(38,R2),=C'ADDRESS OUT OF DATASPACE STORAGE RANGE'
         B     VBERRMSG
LASPFAIL MVC   LL-67(33,R2),=C'LASP FAILURE - ASID RESET TO HOME'
         MVC   BRWSASID,BRWSHOME RESET SECONDARY ASID.
VBERRMSG LA    R2,LL-80(,R2)     THIS MESSAGE LINE NOW COMPLETE.
         A     R2,VBCOLS         ADJUST SCREEN BUFFER POINTER.
         XC    VWORDONE,VWORDONE CLEAR SYSTEM ABEND OR RETURN CODE.
         CLI   WORK2,8           ANY DATA FETCHED?
         BNL   VBPNKRTN          YES, TRY TO SHOW DETAILS.
         B     TIDYBRWS          FINISH UP WITH SYSTEM SUMMARY ETC.
         DROP  R15               VBPNKMSG.
         SPACE
         LTORG
         DS    0H
         TITLE 'VIRTUAL STORAGE MONITOR - GET GETMAIN DETAILS'
         USING VBGMDTLS,R7
VBGMDTLS TM    OSLEVEL+1,CVTH4430 SP4.3 OR LATER?
         BNO   TIDYBRWS          NO, NO COMMON STORAGE TRACKING.
         BAKR  R14,0             YES, SAVE STATUS.
         LR    R7,R15            SET LOCAL BASE REGISTER.
         SLR   R15,R15           FLAG NO ADDITIONAL OUTPUT.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R1,CVTGDA         POINT TO THE GLOBAL DATA AREA.
         DROP  R3                CVT.
         USING GDA,R1
         L     R3,GDAGQAT_INDEX  POINT TO GQAT INDEX TABLE.
         DROP  R1                GDA.
         SLR   R4,R4             CLEAR FOR SHIFT.
         L     R5,BRWSPNTR       GET BROWSE ADDRESS.
         SLDL  R4,9              GET TOP 8 ADDRESS BITS.
         SLL   R4,2              CONVERT TO WORD INDEX.
         AR    R3,R4             GET GQAT INDEX ENTRY ADDRESS.
         USING GQATITBL,R3
         L     R3,GQATINDX       POINT TO THE GQAT.
         DROP  R3                GQATITBL.
         LTR   R3,R3             ANY ENTRY PRESENT?
         BZ    VBGMEXIT          NO.
         USING GQAT,R3
         SLR   R4,R4             CLEAR FOR SHIFT.
         SLDL  R4,7              GET NEXT 7 ADDRESS BITS.
         SLL   R4,2              CONVERT TO WORD INDEX.
         L     R3,GQATNTRY(R4)   POINT TO GQE CHAIN ORIGIN.
         DROP  R3                GQAT.
VGQELOOP LTR   R3,R3             ANY ENTRY PRESENT?
         BZ    VBGMEXIT          NO.
         USING GQE,R3
         L     R0,GQE_AREA       GET THE AREA ADDRESS.
         L     R1,GQE_SIZE       GET THE SIZE.
         N     R0,VAREAMSK       DISCARD EXTRANEOUS BITS.
         N     R1,VSIZEMSK       DISCARD EXTRANEOUS BITS.
         C     R0,BRWSPNTR       AREA ABOVE CURRENT ADDRESS?
         BH    VNEXTGQE          YES.
         AR    R0,R1
         TM    GQE_SIZE_BYTE3,GQE_PROTECT
         BNO   *+8
         AHI   R0,4096
         TM    GQE_SIZE_BYTE3,GQE_DETECT
         BNO   *+8
         AHI   R0,8
         C     R0,BRWSPNTR       AREA BELOW CURRENT ADDRESS?
         BH    VTHISGQE          NO.
VNEXTGQE L     R3,GQE_NEXT       YES, POINT TO THE NEXT GQE.
         B     VGQELOOP
VTHISGQE MVI   LL-79(R2),C' '    BLANK A DISPLAY LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-79(16,R2),=C'OBTAIN DETAILS: '
         C     R15,GQE_GMTIME    IS TIMESTAMP ZERO?
         BE    VGETCAUB          YES.
         MVC   WORK(4),GQE_GMTIME
         ST    R15,WORK+4
         STCKCONV STCKVAL=WORK,  POINT TO INPUT STCK VALUE.            +
               CONVVAL=SAVE+28,  POINT TO OUTPUT FOUR WORDS.           +
               TIMETYPE=DEC,     GET TIME DECIMAL DIGITS (DEFAULT).    +
               DATETYPE=YYYYMMDD, SPECIFY DATE FORMAT.                 +
               MF=(E,STCKCNVL)   SPECIFY PARAMETER LIST.
         UNPK  LL-63(5,R2),SAVE+36(3)    YYYY.
         UNPK  LL-58(3,R2),SAVE+38(2)    MM.
         UNPK  LL-55(3,R2),SAVE+39(2)    DD.
         UNPK  LL-52(3,R2),SAVE+28(2)    HH.
         UNPK  LL-49(3,R2),SAVE+29(2)    MM.
         UNPK  LL-46(3,R2),SAVE+30(2)    SS.
         TR    LL-63(19,R2),HEX-C'0' HANDLE BAD DECIMAL DIGITS.
         MVI   LL-59(R2),C'-'        SUPPLY SEPARATORS AND
         MVI   LL-56(R2),C'-'               TIDY UP AFTER TRANSLATE
         MVI   LL-53(R2),C' '               AND THE LAST UNPACK.
         MVI   LL-50(R2),C':'
         MVI   LL-47(R2),C':'
         MVI   LL-44(R2),C' '
         L     R15,CRNTOPTN      POINT TO CURRENT OPTION ENTRY.
         LH    R15,12(,R15)      FLAG DISPLAY LINE GENERATED.
         SLR   R0,R0
         BCTR  R0,0              GET HIGH VALUES.
         C     R0,GQE_RETADDR    PRE-GETMAIN ACQUISITION?
         BE    VGETCAUB          YES, DO NOT DISPLAY.
         MVC   LL-79(6,R2),=C'OBTN@ '
         MVC   WORK(4),GQE_RETADDR
         NI    WORK+3,X'FE'      CLEAR FLAG FROM INSTRUCTION ADDRESS.
         UNPK  LL-73(9,R2),WORK(5)
         TR    LL-73(8,R2),HEX-C'0'
         MVI   LL-65(R2),C' '
VGETCAUB L     R3,GQE_CAUB       POINT TO THE CAUB.
         DROP  R3                GQE.
         LTR   R3,R3             ANY ENTRY PRESENT?
         BZ    VBGMTIDY          NO.
         USING CAUB,R3
         CLC   =C'CAUB',CAUB_ID  VALID ENTRY?
         BNE   VBGMTIDY          NO.
         L     R15,CRNTOPTN      POINT TO CURRENT OPTION ENTRY.
         LH    R15,12(,R15)      FLAG DISPLAY LINE GENERATED.
         MVC   LL-42(4,R2),=C'ASID'
         UNPK  LL-37(5,R2),CAUB_ASN(3)
         TR    LL-37(4,R2),HEX-C'0'
         MVI   LL-33(R2),C' '
         MVC   LL-31(8,R2),CAUB_JOBNAME
         MVC   LL-22(8,R2),CAUB_JOBID
         DROP  R3                CAUB.
VBGMTIDY LTR   R15,R15           ANY DATA GENERATED HERE?
         BZ    VBGMEXIT          NO.
         TR    LL-79(79,R2),XLATETBL
         SR    R2,R15            POINT TO PREVIOUS LINE.
         CLC   LL-79(67,R2),BLANKS
         BNE   VBGMEXIT          PREVIOUS LINE LOADED ENOUGH.
         AR    R15,R2
         MVC   LL-79(67,R2),LL-79(R15)
         SLR   R15,R15           CONSOLIDATE DISPLAY LINES.
VBGMEXIT PR    ,                 RETURN TO CALLER.
         DROP  R7                VBGMDTLS.
         SPACE
VAREAMSK DC    A(GQE_AREAMASK)   VALID GQE AREA ADDRESSING BITS.
VSIZEMSK DC    A(GQE_SIZEMASK)   VALID GQE SIZE BITS.
         SPACE
         LTORG
         DS    0H
         TITLE 'VIRTUAL STORAGE MONITOR - GET OPCODE MNEMONIC'
         USING VBDISASM,R15
VBDISASM TM    BRWSPNTR,X'80'    SHOWING TRACE TABLE?
         BOR   R14               YES, RETURN WITHOUT ACTION.
         TM    BRWSPNTR+3,X'01'  IS CURRENT ADDRESS ODD?
         BOR   R14               YES, RETURN WITHOUT ACTION.
         L     R1,BRWSPNTR
         SR    R1,R4
         LA    R6,0(R1,R3)       POINT TO INSTRUCTION.
         SLR   R5,R5
         IC    R5,1(,R6)         GET SECOND OPCODE BYTE.
         CLI   0(R6),X'9F'
         BH    NOT370IO
         CLI   0(R6),X'9C'
         BL    NOT370IO
         BH    VBNOT9C
         CLI   1(R6),X'02'
         BHR   R14
         LA    R1,V9COPCDS
         B     VBDASMOK
VBNOT9C  CLI   1(R6),X'01'
         BHR   R14
         LA    R1,V9DOPCDS
         CLI   0(R6),X'9E'
         BL    VBDASMOK
         LA    R1,V9EOPCDS
         BE    VBDASMOK
         LA    R1,V9FOPCDS
         B     VBDASMOK
NOT370IO LA    R1,VB2OPCDS
         CLI   0(R6),X'B2'
         BE    VBDASMOK
         LA    R1,VB3OPCDS-VB2OPCDS(,R1)
         CLI   0(R6),X'B3'
         BE    VBDASMOK
         LA    R1,VB9OPCDS-VB3OPCDS(,R1)
         CLI   0(R6),X'B9'
         BNE   VBNOTB9
         CLI   1(R6),X'BF'
         BHR   R14
         B     VBDASMOK
VBNOTB9  LA    R1,VE3OPCDS-VB9OPCDS(,R1)
         CLI   0(R6),X'E3'
         BNE   VBNOTE3
         CLI   5(R6),X'9F'
         BHR   R14
         IC    R5,5(,R6)         GET SECOND OPCODE BYTE.
         B     VBDASMOK
VBNOTE3  LA    R1,VEBOPCDS-VE3OPCDS(,R1)
         CLI   0(R6),X'EB'
         BNE   VBNOTEB
         CLI   5(R6),X'C7'
         BHR   R14
         IC    R5,5(,R6)         GET SECOND OPCODE BYTE.
         B     VBDASMOK
VBNOTEB  LA    R1,VECOPCDS-VEBOPCDS(,R1)
         CLI   0(R6),X'EC'
         BNE   VBNOTED
         IC    R5,5(,R6)         GET SECOND OPCODE BYTE.
         B     VBDASMOK
VBNOTEC  LA    R1,VEDOPCDS-VECOPCDS(,R1)
         CLI   0(R6),X'ED'
         BNE   VBNOTED
         CLI   5(R6),X'67'
         BHR   R14
         IC    R5,5(,R6)         GET SECOND OPCODE BYTE.
         B     VBDASMOK
VBNOTED  SLL   R5,28
         SRL   R5,28
         LA    R1,V01OPCDS
         CLI   0(R6),X'01'
         BNE   VBNOT01
         CLI   1(R6),X'FF'
         BE    VBDASMOK
         CLI   1(R6),X'0F'
         BL    VBDASMOK
         BR    R14
VBNOT01  LA    R1,VA5OPCDS
         CLI   0(R6),X'A5'
         BE    VBDASMOK
         LA    R1,VA7OPCDS
         CLI   0(R6),X'A7'
         BE    VBDASMOK
         LA    R1,VC0OPCDS
         CLI   0(R6),X'C0'
         BE    VBDASMOK
         LA    R1,VC2OPCDS
         CLI   0(R6),X'C2'
         BE    VBDASMOK
         LA    R1,VC4OPCDS
         CLI   0(R6),X'C4'
         BE    VBDASMOK
         LA    R1,VC6OPCDS
         CLI   0(R6),X'C6'
         BE    VBDASMOK
         LA    R1,VC8OPCDS
         CLI   0(R6),X'C8'
         BE    VBDASMOK
         LA    R1,VE5OPCDS
         CLI   0(R6),X'E5'
         BE    VBDASMOK
         IC    R5,0(,R6)         GET FIRST OPCODE BYTE.
         LA    R1,V1BOPCDS
VBDASMOK LR    R6,R5             COPY OPCODE TABLE ENTRY NUMBER.
         SLL   R6,2
         AR    R5,R6             MULTIPLY BY FIVE FOR INDEX.
         AR    R5,R1             POINT TO THE MNEMONIC.
VBDASMIT MVC   56(5,R2),0(R5)    COPY IT INTO DISPLAY LINE.
         BR    R14               RETURN TO CALLER.
         DROP  R15               VBDISASM.
         SPACE
V1BOPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   1-BYTE
         DC    CL40'                    SPM  BALR BCTR BCR  ' 00 - 07
         DC    CL40'SSK  ISK  SVC  BSM  BASSMBASR MVCL CLCL ' 08 - 0F
         DC    CL40'LPR  LNR  LTR  LCR  NR   CLR  OR   XR   ' 10 - 17
         DC    CL40'LR   CR   AR   SR   MR   DR   ALR  SLR  ' 18 - 1F
         DC    CL40'LPDR LNDR LTDR LCDR NDR  LDXR MXR  MXDR ' 20 - 27
         DC    CL40'LDR  CDR  ADR  SDR  MDR  DDR  AWR  SWR  ' 28 - 2F
         DC    CL40'LPER LNER LTER LCER HER  LEDR AXR  SXR  ' 30 - 37
         DC    CL40'LER  CER  AER  SER  MER  DER  AUR  SUR  ' 38 - 3F
         DC    CL40'STH  LA   STC  IC   EX   BAL  BCT  BC   ' 40 - 47
         DC    CL40'LH   CH   AH   SH   MH   BAS  CVD  CVB  ' 48 - 4F
         DC    CL40'ST   LAE            N    CL   O    X    ' 50 - 57
         DC    CL40'L    C    A    S    M    D    AL   SL   ' 58 - 5F
         DC    CL40'STD                                MXD  ' 60 - 67
         DC    CL40'LD   CD   AD   SD   MD   DD   AW   SW   ' 68 - 6F
         DC    CL40'STE  MS                                 ' 70 - 77
         DC    CL40'LE   CE   AE   SE   ME   DE   AU   SU   ' 78 - 7F
         DC    CL40'SSM       LPSW DIAG BRXH BRXLEBXH  BXLE ' 80 - 87
         DC    CL40'SRL  SLL  SRA  SLA  SRDL SLDL SRDA SLDA ' 88 - 8F
         DC    CL40'STM  TM   MVI  TS   NI   CLI  OI   XI   ' 90 - 97
         DC    CL40'LM   TRACELAM  STAM SIO  TIO  HIO  TCH  ' 98 - 9F
         DC    CL40'                                        ' A0 - A7
         DC    CL40'MVCLECLCLE          STNSMSTOSMSIGP MC   ' A8 - AF
         DC    CL40'     LRA                      STCTLLCTL ' B0 - B7
         DC    CL40'          CS   CDS       CLM  STCM ICM  ' B8 - BF
         DC    CL40'                                        ' C0 - C7
         DC    CL40'                                        ' C8 - CF
         DC    CL40'TRTR MVN  MVC  MVZ  NC   CLC  OC   XC   ' D0 - D7
         DC    CL40'     MVCK MVCP MVCS TR   TRT  ED   EDMK ' D8 - DF
         DC    CL40'     PKU  UNPKU                         ' E0 - E7
         DC    CL40'MVCINPKA  UNPKA               PLO  LMD  ' E8 - EF
         DC    CL40'SRP  MVO  PACK UNPK                     ' F0 - F7
         DC    CL40'ZAP  CP   AP   SP   MP   DP             ' F8 - FF
         SPACE
V01OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    01?
         DC    CL40'     PR   UPT       PTFF           SCKPF'  0 - 7
         DC    CL40'          PFPO TAM  SAM24SAM31SAM64TRAP2'  8 - F
         SPACE
V9COPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   9C0?
         DC    CL15'SIO  SIOF RIO  '                          00 - 02
         SPACE
V9DOPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   9D0?
         DC    CL10'TIO  CLRIO'                               00 - 01
         SPACE
V9EOPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   9E0?
         DC    CL10'HIO  HDV  '                               00 - 01
         SPACE
V9FOPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   9F0?
         DC    CL10'TCH  CLRCH'                               00 - 01
         SPACE
VA5OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    A5?
         DC    CL40'IIHH IIHL IILH IILL NIHH NIHL NILH NILL '  0 - 7
         DC    CL40'OIHH OIHL OILH OILL LLIHHLLIHLLLILHLLILL'  8 - F
         SPACE
VA7OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    A7?
         DC    CL40'TMLH TMLL TMHH TMHL BCR  BRAS BRCT BRGCT'  0 - 7
         DC    CL40'LHI  LGHI AHI  AGHI MHI  MGHI CHI  CGHI '  8 - F
         SPACE
VC0OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C0?
         DC    CL40'LARL LGFI           BRCL BRASLXIHF XILF '  0 - 7
         DC    CL40'IIHF IILF NIHF NILF OIHF OILF LLIHFLLILF'  8 - F
         SPACE
VC2OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C2?
         DC    CL40'MSGFIMSFI           SLGFISLFI           '  0 - 7
         DC    CL40'AGFI AFI  ALGFIALFI CGFI CFI  CLGFICLFI '  8 - F
         SPACE
VC4OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C4?
         DC    CL40'          LLHRL     LGHRLLHRL 2LONGSTHRL'  0 - 7
         DC    CL40'LGRL           STGRLLGFRLLRL  2LONGSTRL '  8 - F
*                                C46 = LLGHRL   C4E = LLGFRL
         SPACE
VC6OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C6?
         DC    CL40'EXRL      PFDRL     CGHRLCHRL 2LONGCLHRL'  0 - 7
         DC    CL40'CGRL      CLGRL     CGFRLCRL  2LONGCLRL '  8 - F
*                                C66 = CLGHRL   C6E = CLGFRL
         SPACE
VC8OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>    C8?
         DC    CL40'MVCOSECTG CSST                          '  0 - 7
         DC    CL40'                                        '  8 - F
         SPACE
VE5OPCDS DS    0H   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   E50?
         DC    CL40'LASP TPROTSTRAG                         ' 00 - 07
         DC    CL40'                              MVCSKMVCDK' 08 - 0F
         SPACE
         LTORG
         SPACE
VB2OPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   B2??
         DC    CL40'CONCSDISCSSTIDPSTIDCSCK  STCK SCKC STCKC' 00 - 07
         DC    CL40'SPT  STPT SPKA IPK       PTLB           ' 08 - 0F
         DC    CL40'SPX  STPX STAP RRB                      ' 10 - 17
         DC    CL40'PC   SAC  CFC                           ' 18 - 1F
         DC    CL40'     IPTE IPM  IVSK IAC  SSAR EPAR ESAR ' 20 - 27
         DC    CL40'PT   ISKE RRBE SSKE TB   DXR  PGIN PGOUT' 28 - 2F
         DC    CL40'CSCH HSCH MSCH SSCH STSCHTSCH TPI  SAL  ' 30 - 37
         DC    CL40'RSCH STCRWSTCPSRCHP SCHM                ' 38 - 3F
         DC    CL40'BAKR CKSM           SQDR SQER STURAMSTA ' 40 - 47
         DC    CL40'PALB EREG ESTA LURA TAR  CPYA SAR  EAR  ' 48 - 4F
         DC    CL40'CSP       MSR       MVPG MVST      CUSE ' 50 - 57
         DC    CL40'BSG       BSA            CLST SRST      ' 58 - 5F
         DC    CL40'               CMPSC                    ' 60 - 67
         DC    CL40'                                        ' 68 - 6F
         DC    CL40'                              XSCH RP   ' 70 - 77
         DC    CL40'STCKESACF           STCKFSTSI           ' 78 - 7F
         DC    CL40'                                        ' 80 - 87
         DC    CL40'                                        ' 88 - 8F
         DC    CL40'                                        ' 90 - 97
         DC    CL40'     SRNM           STFPCLFPC           ' 98 - 9F
         DC    CL40'                         TRE  CU21 CU12 ' A0 - A7
         DC    CL40'                                        ' A8 - AF
         DC    CL40'STFLESTFL LPSWE                         ' B0 - B7
         DC    CL40'     SRNMT               LFAS           ' B8 - BF
         DC    CL40'                                        ' C0 - C7
         DC    CL40'                                        ' C8 - CF
         DC    CL40'                                        ' D0 - D7
         DC    CL40'                                        ' D8 - DF
         DC    CL40'                                        ' E0 - E7
         DC    CL40'                                        ' E8 - EF
         DC    CL40'                                        ' F0 - F7
         DC    CL40'                                   TRAP4' F8 - FF
         SPACE
VB3OPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   B3??
         DC    CL40'LPEBRLNEBRLTEBRLCEBRLDEBRLXDBRLXEBRMXDBR' 00 - 07
         DC    CL40'KEBR CEBR AEBR SEBR MDEBRDEBR MAEBRMSEBR' 08 - 0F
         DC    CL40'LPDBRLNDBRLTDBRLCDBRSQEBRSQDBRSQXBRMEEBR' 10 - 17
         DC    CL40'KDBR CDBR ADBR SDBR MDBR DDBR MADBRMSDBR' 18 - 1F
         DC    CL40'                    LDER LXDR LXER      ' 20 - 27
         DC    CL40'                              MAER MSER ' 28 - 2F
         DC    CL40'                              SQXR MEER ' 30 - 37
         DC    CL40'MAYLRMYLR MAYR MYR  MAYHRMYHR MADR MSDR ' 38 - 3F
         DC    CL40'LPXBRLNXBRLTXBRLCXBRLEDBRLDXBRLEXBRFIXBR' 40 - 47
         DC    CL40'KXBR CXBR AXBR SXBR MXBR DXBR           ' 48 - 4F
         DC    CL40'TBEDRTBDR      DIEBR               FIEBR' 50 - 57
         DC    CL40'THDR           DIDBR               FIDBR' 58 - 5F
         DC    CL40'LPXR LNXR LTXR LCXR      LXR  LEXR FIXR ' 60 - 67
         DC    CL40'     CXR                                ' 68 - 6F
         DC    CL40'LPDFRLNDFRCPSDRLCDFRLZER LZDR LZXR FIER ' 70 - 77
         DC    CL40'                                   FIDR ' 78 - 7F
         DC    CL40'                    SFPC                ' 80 - 87
         DC    CL40'                    EFPC                ' 88 - 8F
         DC    CL40'                    CEFBRCDFBRCXFBR     ' 90 - 97
         DC    CL40'CFEBRCFDBRCFXBR                         ' 98 - 9F
         DC    CL40'                    CEGBRCDGBRCXGBR     ' A0 - A7
         DC    CL40'CGEBRCGDBRCGXBR                         ' A8 - AF
         DC    CL40'                    CEFR CDFR CXFR      ' B0 - B7
         DC    CL40'CFER CFDR CFXR                          ' B8 - BF
         DC    CL40'     LDGR           CEGR CDGR CXGR      ' C0 - C7
         DC    CL40'CGER CGDR CGXR           LGDR           ' C8 - CF
         DC    CL40'MDTR DDTR ADTR SDTR LDETRLEDTRLTDTRFIDTR' D0 - D7
         DC    CL40'MXTR DXTR AXTR SXTR LXDTRLDXTRLTXTRFIXTR' D8 - DF
         DC    CL40'KDTR CGDTRCUDTRCSDTRCDTR EEDTR     ESDTR' E0 - E7
         DC    CL40'KXTR CGXTRCUXTRCSXTRCXTR EEXTR     ESXTR' E8 - EF
         DC    CL40'     CDGTRCDUTRCDSTRCEDTRQADTRIEDTRRRDTR' F0 - F7
         DC    CL40'     CGXTRCXUTRCXSTRCEXTRQAXTRIEXTRRRXTR' F8 - FF
         SPACE
VB9OPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   B9??
         DC    CL40'LPGR LNGR LTGR LCGR LGR  LURAGLGBR LGHR ' 00 - 07
         DC    CL40'AGR  SGR  ALGR SLGR MSGR DSGR EREGGLRVGR' 08 - 0F
         DC    CL40'LPGFRLNGFRLTGFRLCGFRLGFR      LLGFRLLGTR' 10 - 17
         DC    CL40'AGFR SGFR ALGFRSLGFRMSGFRDSGFRKMAC LRVR ' 18 - 1F
         DC    CL40'CGR  CLGR                STURGLBR  LHR  ' 20 - 27
         DC    CL40'                              KM   KMC  ' 28 - 2F
         DC    CL40'CGFR CLGFR                              ' 30 - 37
         DC    CL40'                              KIMD KLMD ' 38 - 3F
         DC    CL40'                              BCTGR     ' 40 - 47
         DC    CL40'                                        ' 48 - 4F
         DC    CL40'                                        ' 50 - 57
         DC    CL40'                                        ' 58 - 5F
         DC    CL40'CGRT CLGRT                              ' 60 - 67
         DC    CL40'                                        ' 68 - 6F
         DC    CL40'          CRT  CLRT                     ' 70 - 77
         DC    CL40'                                        ' 78 - 7F
         DC    CL40'NGR  OGR  XGR  FLOGRLLGCRLLGHRMLGR DLGR ' 80 - 87
         DC    CL40'ALCGRSLBGRCSPG           EPSW IDTE      ' 88 - 8F
         DC    CL40'TRTT TRTO TROT TROO LLCR LLHR MLR  DLR  ' 90 - 97
         DC    CL40'ALCR SLBR EPAIRESAIR     ESEA PTI  SSAIR' 98 - 9F
         DC    CL40'          PTF                           ' A0 - A7
         DC    CL40'          LPTEA                    PFMF ' A8 - AF
         DC    CL40'CU14 CU24 CU41 CU42                     ' B0 - B7
         DC    CL40'                         TRTRESRSTUTRTE ' B8 - BF
         SPACE
VE3OPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   E3??
         DC    CL40'          LTG  LRAG LG        CVBY      ' 00 - 07
         DC    CL40'AG   SG   ALG  SLG  MSG  DSG  CVBG LRVG ' 08 - 0F
         DC    CL40'          LT   LRAY LGF  LGH  LLGF LLGT ' 10 - 17
         DC    CL40'AGF  SGF  ALGF SLGF MSGF DSGF LRV  LRVH ' 18 - 1F
         DC    CL40'CG   CLG            STG       CVDY      ' 20 - 27
         DC    CL40'                              CVDG STRVG' 28 - 2F
         DC    CL40'CGF  CLGF LTGF      CGH       PFD       ' 30 - 37
         DC    CL40'                              STRV STRVH' 38 - 3F
         DC    CL40'                              BCTG      ' 40 - 47
         DC    CL40'                                        ' 48 - 4F
         DC    CL40'STY  MSY            NY   CLY  OY   XY   ' 50 - 57
         DC    CL40'LY   CY   AY   SY   MFY       ALY  SLY  ' 58 - 5F
         DC    CL40'                                        ' 60 - 67
         DC    CL40'                                        ' 68 - 6F
         DC    CL40'STHY LAY  STCY ICY            LB   LGB  ' 70 - 77
         DC    CL40'LHY  CHY  AHY  SHY  MHY                 ' 78 - 7F
         DC    CL40'NG   OG   XG                  MLG  DLG  ' 80 - 87
         DC    CL40'ALCG SLBG                     STPQ LPQ  ' 88 - 8F
         DC    CL40'LLGC LLGH           LLC  LLH  ML   DL   ' 90 - 97
         DC    CL40'ALC  SLB                                ' 98 - 9F
         SPACE
VEBOPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   EB??
         DC    CL40'                    LMG                 ' 00 - 07
         DC    CL40'          SRAG SLAG SRLG SLLG      TRACG' 08 - 0F
         DC    CL40'                    CSY                 ' 10 - 17
         DC    CL40'                    RLLG RLL            ' 18 - 1F
         DC    CL40'CLMH CLMY           STMG STCTGSTMH      ' 20 - 27
         DC    CL40'                    STCMHSTCMY     LCTLG' 28 - 2F
         DC    CL40'CSG  CDSY                               ' 30 - 37
         DC    CL40'                              CDSG      ' 38 - 3F
         DC    CL40'                    BXHG BXLEG          ' 40 - 47
         DC    CL40'                    ECAG                ' 48 - 4F
         DC    CL40'     TMY  MVIY      NIY  CLIY OIY  XIY  ' 50 - 57
         DC    CL40'                                        ' 58 - 5F
         DC    CL40'                                        ' 60 - 67
         DC    CL40'          ASI                 ALSI      ' 68 - 6F
         DC    CL40'                                        ' 70 - 77
         DC    CL40'          AGSI                ALGSI     ' 78 - 7F
         DC    CL40'ICMH ICMY                               ' 80 - 87
         DC    CL40'                              MVCLUCLCLU' 88 - 8F
         DC    CL40'STMY                          LMH       ' 90 - 97
         DC    CL40'LMY       LAMY STAMY                    ' 98 - 9F
         DC    CL40'                                        ' A0 - A7
         DC    CL40'                                        ' A8 - AF
         DC    CL40'                                        ' B0 - B7
         DC    CL40'                                        ' B8 - BF
         DC    CL40'TP                                      ' C0 - C7
         SPACE
VECOPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   EC??
         DC    CL40'                                        ' 00 - 07
         DC    CL40'                                        ' 08 - 0F
         DC    CL40'                                        ' 10 - 17
         DC    CL40'                                        ' 18 - 1F
         DC    CL40'                                        ' 20 - 27
         DC    CL40'                                        ' 28 - 2F
         DC    CL40'                                        ' 30 - 37
         DC    CL40'                                        ' 38 - 3F
         DC    CL40'                    BRXHGBRXLG          ' 40 - 47
         DC    CL40'                                        ' 48 - 4F
         DC    CL40'                    RNSBGRISBGROSBGRXSBG' 50 - 57
         DC    CL40'                                        ' 58 - 5F
         DC    CL40'                    CGRJ CLGRJ          ' 60 - 67
         DC    CL40'                                        ' 68 - 6F
         DC    CL40'CGIT CLGITCIT  CLFIT          CRJ  CLRJ ' 70 - 77
         DC    CL40'                    CGIJ CLGIJCIJ  CLIJ ' 78 - 7F
         DC    CL40'                                        ' 80 - 87
         DC    CL40'                                        ' 88 - 8F
         DC    CL40'                                        ' 90 - 97
         DC    CL40'                                        ' 98 - 9F
         DC    CL40'                                        ' A0 - A7
         DC    CL40'                                        ' A8 - AF
         DC    CL40'                                        ' B0 - B7
         DC    CL40'                                        ' B8 - BF
         DC    CL40'                                        ' C0 - C7
         DC    CL40'                                        ' C8 - CF
         DC    CL40'                                        ' D0 - D7
         DC    CL40'                                        ' D8 - DF
         DC    CL40'                    CGRB CLGRB          ' E0 - E7
         DC    CL40'                                        ' E8 - EF
         DC    CL40'                              CRB  CLRB ' F0 - F7
         DC    CL40'                    CGIB CLGIBCIB  CBIB ' F8 - FF
         SPACE
VEDOPCDS DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>   ED??
         DC    CL40'                    LDEB LXDB LXEB MXDB ' 00 - 07
         DC    CL40'KEB  CEB  AEB  SEB  MDEB DEB  MAEB MSEB ' 08 - 0F
         DC    CL40'TCEB TCDB TCXB      SQEB SQDB      MEEB ' 10 - 17
         DC    CL40'KDB  CDB  ADB  SDB  MDB  DDB  MADB MSDB ' 18 - 1F
         DC    CL40'                    LDE  LXD  LXE       ' 20 - 27
         DC    CL40'                              MAE  MSE  ' 28 - 2F
         DC    CL40'                    SQE  SQD       MEE  ' 30 - 37
         DC    CL40'MAYL MYL  MAY  MY   MAYH MYH  MAD  MSD  ' 38 - 3F
         DC    CL40'SLDT SRDT                               ' 40 - 47
         DC    CL40'SLXT SRXT                               ' 48 - 4F
         DC    CL40'TDCETTDGET          TDCDTTDGDT          ' 50 - 57
         DC    CL40'TDCXTTDGXT                              ' 58 - 5F
         DC    CL40'                    LEY  LDY  STEY STDY ' 60 - 67
         DS    0D   <0/8><1/9><2/A><3/B><4/C><5/D><6/E><7/F>
         SPACE
         DROP  R11,R10,R8        VIRTSTOR.
         TITLE 'VIRTUAL STORAGE MONITOR - DAT-OFF ROUTINE'
         DROP  R12               EXAMINEC.
         USING VZDATOFF,R15
VZDATOFF DS    0D
         STM   R14,R12,12(R13)   SAVE VIRTUAL ADDRESS REGISTERS.
         LRA   R12,VZDATOFF
         LRA   R4,0(,R4)         CONVERT TARGET ADDRESS TO REAL.
         STOSM ZPSWVIRT,X'00'    REMEMBER THE CURRENT SYSTEM MASK.
         LA    R1,ZDATISON
         ST    R1,ZPSWVIRT+4     REMEMBER V=V "RETURN" ADDRESS.
         OI    ZPSWVIRT+4,X'80'  ENSURE AMODE IS 31.
         LRA   R1,ZDATAWAY
         ST    R1,ZPSWREAL+4     LOAD V=R "ENTRY" ADDRESS.
         OI    ZPSWREAL+4,X'80'  ENSURE AMODE IS 31.
         LPSW  ZPSWREAL          USE DAT-OFF TO BYPASS PAGE PROTECTION.
         DROP  R15               VZDATOFF.
         SPACE
         USING VZDATOFF,R12
ZDATAWAY CLI   VZREQ,C'A'        AND REQUESTED?
         BE    ZCHNGAND          YES.
         CLI   VZREQ,C'O'        OOR REQUESTED?
         BE    ZCHNGOOR          YES.
         CLI   VZREQ,C'R'        REP REQUESTED?
         BE    ZCHNGREP          YES.
         CLI   VZREQ,C'X'        XOR REQUESTED?
         BE    ZCHNGXOR          YES.
         DC    H'0'              LOST TRACK OF REALITY SO ABEND.
         SPACE
ZCHNGAND EX    R3,ZCHNGNC        AND DATA INTO TARGET ADDRESS.
         B     ZCHANGED
ZCHNGOOR EX    R3,ZCHNGOC        OR DATA INTO TARGET ADDRESS.
         B     ZCHANGED
ZCHNGREP EX    R3,ZCHNGMVC       MOVE DATA INTO TARGET ADDRESS.
         B     ZCHANGED
ZCHNGXOR EX    R3,ZCHNGXC        XOR DATA INTO TARGET ADDRESS.
ZCHANGED LPSW  ZPSWVIRT          TURN DAT ON.
         SPACE
ZDATISON LM    R14,R12,12(R13)   RESTORE VIRTUAL ADDRESS REGISTERS.
         BR    R14               RETURN TO CALLER.
         SPACE
ZCHNGNC  NC    0(0,R4),ZCHNGTXT                 <<< EXECUTED >>>
ZCHNGMVC MVC   0(0,R4),ZCHNGTXT                 <<< EXECUTED >>>
ZCHNGOC  OC    0(0,R4),ZCHNGTXT                 <<< EXECUTED >>>
ZCHNGXC  XC    0(0,R4),ZCHNGTXT                 <<< EXECUTED >>>
         DROP  R12               VZDATOFF.
         SPACE
VZREQ    DC    CL4' '
ZCHNGTXT DC    XL20'00'          REPLACEMENT DATA.
         DS    0D
ZPSWREAL DC    XL8'000C000000000000'
ZPSWVIRT DC    XL8'070C000000000000'
         DS    0D
VBZLEN   EQU   *-VZDATOFF        LENGTH OF DAT-OFF ROUTINE.
         SPACE 2
         USING EXAMINEC,12       RESTORE BASE FOR OTHER OPTIONS.
