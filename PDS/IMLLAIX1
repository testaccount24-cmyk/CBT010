IMLLAIX1 TITLE 'CSVLLIX1 - LLA FETCH INSTALLATION EXIT 1'
IMLLAIX1 CSECT
*/****START OF SPECIFICATIONS*****************************************
*
*01* MODULE-NAME: CSVLLIX1
*
*02*   CSECT-NAME: IMLLAIX1
*
*02*   LOAD-MODULE-NAME: CSVLLIX1
*
*01* DESCRIPTIVE-NAME: LLA FETCH INSTALLATION EXIT
*
*01*  STATUS: IMON FOR MVS/ESA
*
*01* FUNCTION:
*
*     FOR EACH MODULE WHICH IS FETCHED FROM A LIBRARY LOOKASIDE
*     (LLA) MANAGED LIBRARY, LLA FETCH CALLS CSVLLIX1. CSVLLIX1
*     BE USED TO CONTROL WHEN LLA STAGING IS TRIGGERED AND TO
*     GATHER FETCH STATISTICS. LLA STAGING USES SAMPLES OF FETCH
*     STATISTICS TO DECIDE WHICH MODULES TO STAGE INTO VIRTUAL
*     STORAGE TO AVOID PROGRAM FETCH OVERHEAD.
*
*
*
*02*   OPERATION:
*
*      . CSVLLIX1 CAN DO ANALYSIS OF THE FETCH STATISTICS PROVIDED
*        IN THE LLA FETCH INSTALLATION EXIT PARAMETERS (LLP1).
*        THIS MAY INCLUDE RECORDING THEM TO A LOG FILE.
*
*      . CSVLLIX1 CAN DETERMINE WHETHER TO CONTROL THE TRIGGERING
*        OF LLA STAGING AND SET THE RETURN CODE AND REASON
*        CODE ACCORDINGLY.
*
*02*   RECOVERY-OPERATION:
*
*        IN THE EVENT OF AN ERROR, LLA FETCH'S ESTAE RECORDS
*        DIAGNOSTIC INFORMATION IN THE SYSTEM DIAGNOSTIC WORK
*        AREA (SDWA), RECORDS THE ERROR IN SYS1.LOGREC, AND
*        TAKES AN SVC DUMP. LLA FETCH'S ESTAE ISSUES MESSAGE
*        "CSV232I LLA HAS DEACTIVATED EXIT CSVLLIX1. ABEND=SXXX
*        U=YYY, REASON=RRRRRRRR", DEACTIVATES CSVLLIX1, AND RETRIES
*        TO A POINT WITHIN LLA FETCH AFTER THE CALL TO INVOKE
*        CSVLLIX1.
*
*
*01* NOTES:
*
*     THE LLA FETCH INSTALLATION EXIT, WHEN ACTIVE, RECEIVES
*     CONTROL AFTER EVERY LLA MANAGED MODULE IS FETCHED - IN EVERY
*     ADDRESS SPACE.  INSURE THAT ANY SERVICES THAT MAY BE INVOKED
*     FROM THIS EXIT ARE AVAILABLE BEFORE INVOKING THE SERVICE.
*
*02*   DEPENDENCIES: NONE
*02*   CHARACTER-CODE-DEPENDENCIES: NONE
*02*   RESTRICTIONS:
*
*      CSVLLIX1 MUST RESIDE IN AN APF AUTHORIZED LIBRARY IN THE LNKLST.
*
*      CSVLLIX1 CANNOT (1) ISSUE OR (2) INVOKE ANY SERVICE WHICH
*      WILL IN TURN ISSUE A LINK, LOAD, XCTL OR ATTACH MACRO THAT
*      WOULD CAUSE A LLA MANGED MODULE TO BE FETCHED. THIS
*      WILL RESULT IN RECURSIVE CALLS TO THE LLA FETCH
*      INSTALLATION EXIT.
*
*02*   REGISTER-CONVENTIONS:
*03*     REGISTERS-SAVED: 0-15 VIA REGISTER 13.
*03*     REGISTERS-RESTORED: 1-14
*03*     CODE-REGISTER : REGISTER 8.
*03*     DATA-REGISTER : NONE
*
*02*   PATCH-LABEL: NONE.
*
*01* MODULE-TYPE: PROCEDURE
*
*02*   PROCESSOR: ASSEMBLER-H
*
*02*   MODULE-SIZE:  SEE ASSEMBLER EXTERNAL SYMBOL DICTIONARY.
*
*02*   ATTRIBUTES:
*03*     LOCATION:      CSA OR ECSA
*03*     KEY:           0
*03*     STATE:         SUPERVISOR
*03*     MODE:          TASK
*04*     AMODE:         31
*04*     RMODE:         ANY
*04*     TYPE:          REENTRANT
*03*     SERIALIZATION: ENABLED / UNLOCKED
*03*     ASC MODE:      PRIMARY
*03*     X-MEMORY MODE: HASID=PASID=SASID
*
*01* ENTRY-POINT: CSVLLIX1
*
*02*   PURPOSE: SEE "FUNCTION" TOPIC.
*03*     OPERATION: SEE MAIN "OPERATION" TOPIC.
*03*     ATTRIBUTES: SEE MAIN "ATTRIBUTES" TOPIC.
*
*02*   LINKAGE: BALR
*03*     CALLERS: LLA FETCH
*
*03*     ENTRY-REGISTERS:
*          REGISTER       0 - ZERO
*          REGISTER       1 - ADDRESS OF LLA FETCH INSTALLATION
*                             EXIT PARAMETERS (LLP1)
*          REGISTERS   2-12 - IRRELEVANT
*          REGISTER      13 - ADDRESS OF STANDARD 72 BYTE
*                             SAVE AREA
*          REGISTER      14 - RETURN ADDRESS
*          REGISTER      15 - ENTRY ADDRESS OF CSVLLIX1
*
*02*   INPUT:
*        THE LLP1 CONTAINS THE FOLLOWING INFORMATION:
*
*        . STATISTICAL DATA ABOUT THE FETCH WHICH JUST COMPLETED
*          INCLUDING THE PROVIDER OF THE FETCH (LLP1PROV),
*          THE DURATION (LLP1DUR), THE ENTRY POINTS' PDS
*          DIRECTORY ENTRY (LLP1PDS2) AND ITS DATA SET NAME (LLP1DSN).
*
*        . AVERAGE REAL STORAGE UNREFERENCED INTERVAL COUNT
*          (LLP1AVUI) AND EXPANDED STORAGE MIGRATION AGE (LLP1AVMG).
*
*        . A POINTER (LLP1USER) TO A 4 BYTE USER DATA AREA.
*          THE USER DATA AREA IS INITIALLY ZERO, THEN SUBSEQUENTLY
*          CONTAINS ANY VALUE STORED IN IT BY CSVLLIX1.
*
*02*   OUTPUT:
*
*        . A RETURN AND REASON CODE INDICATING IF LLA STAGING
*          SHOULD OR SHOULD NOT BE TRIGGERED.
*
*        . UPDATED USER DATA AREA (POINTED TO BY LLP1USER).
*
*02*   EXIT-NORMAL: RETURNS TO THE CALLER.
*03*     CONDITIONS: REQUESTED FUNCTION COMPLETE.
*03*     EXIT-REGISTERS:
*         REGISTER       0 - REASON CODE
*         REGISTERS   1-14 - RESTORED
*         REGISTER      15 - RETURN CODE
*
*03*     RETURN-CODES:
*
*         0 - USE THE DEFAULT THRESHOLD TO TRIGGER LLA STAGING.
*         4 - CSVLLIX1 HAS SPECIFIED WHETHER OR NOT TO TRIGGER
*             LLA STAGING. THE REASON CODE IN REGISTER 0
*             SPECIFIES THE REQUIRED ACTION.
*
*
*        REASON-CODES:
*         0 - USE DEFAULT THRESHOLD TO TRIGGER LLA STAGING.
*             (RETURN CODE 0)
*         1 - TRIGGER LLA STAGING NOW. (RETURN CODE 4)
*         2 - DO NOT TRIGGER LLA STAGING NOW. (RETURN CODE 4)
*
*         NOTE: LLA FETCH IGNORES ANY OTHER REASON CODES AND THE
*               DEFAULT THRESHOLD IS USED TO TRIGGER LLA STAGING.
*
*
*02*   EXIT-ERROR: NO EXIT ERROR CONDITIONS.
*
*
*01* EXTERNAL-REFERENCES:
*02*   ROUTINES:   NONE.
*02*   DATA-AREAS: IMLLAREA - THE REPOSITORY DATA STRUCTURE.
*02*   CONTROL-BLOCKS:
*
*    COMMON NAME/USE        MACRO ID   FULL NAME
*    ---------------        --------   ---------
*    LLP1       R,W         IHALLP1    LLA FETCH INSTALLATION
*                                      EXIT PARAMETERS.
*    ASCB       R           IHAASCB    ADDRESS SPACE CONTROL BLOCK.
*    PSA        R           IHAPSA     PREFIXED SAVE AREA.
*    PDS2       R           IHAPDS     PDS DIRECTORY ENTRY RETURNED
*                                      BY BLDL IN EXIT PARAMETERS.
*
*    (C=CREATE, R=READ, W=WRITE, D=DELETE)
*
*01* TABLES: NONE.
*
*01* MACROS-EXECUTABLE:
*      GETMAIN, FREEMAIN
*
*01* SERIALIZATION:
*      CSVLLIX1 MUST MANAGE THE SERIALIZATION OF THE FOUR BYTE
*      USER DATA AREA POINTED TO BY LLP1USER. COMPARE-AND-SWAP (CS)
*      IS A POTENTIAL SERIALIZATION METHOD.
*
*01* MESSAGES: NONE.
*      PRYL01W - ISSUED WHEN ECSA CANNOT CONTAIN DATA REPOSITORY AND
*                DATA COLLECTION CAN ONLY BE RETRIED AFTER AN IPL.
*
*01* ABEND-CODES: NONE.
*01* WAIT-STATE-CODES: NONE.
*
*01* PROGRAM TEMPLATE BY COPIED FROM SYS1.SAMPLIB(CSVLLIX1).
*
*****END OF SPECIFICATIONS******************************************/
         EJECT
***********************************************************************
*        STANDARD ENTRY TO LLA FETCH INSTALLATION EXIT.               *
***********************************************************************
IMLLAIX1 AMODE 31
IMLLAIX1 RMODE ANY
         ENTRY CSVLLIX1
CSVLLIX1 DS    0D                      ENTRY POINT.
         USING IMLLAIX1,R15
         B     IX1START                JUMP OVER EYE-CATCHER.
         DC    AL1(59)
         DC    CL20'IMON CSVLLIX1 MODULE'
         DC    CL39' - (C) COPYRIGHT PRYCROFT SIX P/L 1995 '
IMLX1PG# DC    H'64'                   PAGE COUNT OF REPOSITORY.
IX1START DS    0H
         STM   R14,R12,12(R13)         SAVE ENTRY REGISTERS.
         LR    R8,R15                  INITIALIZE CODE REGISTER.
         DROP  R15                     DROP TEMPORARY ADDRESSABILITY.
         USING IMLLAIX1,R8             ESTABLISH R8 AS CODE REGISTER.
         LR    R2,R1                   COPY PARAMETER POINTER.
         USING LLP1,R2                 ADDRESSABILITY TO LLP1.
         L     R3,LLP1USER             POINT TO REPOSITORY ADDRESS.
         ICM   R1,15,0(R3)             LOAD REPOSITORY ADDRESS.
         BM    EXIT                    DISABLE FUNCTION FLAG ON.
         BP    CUMSTGOK                REPOSITORY AREA EXISTS.
         LH    R0,IMLX1PG#             GET PAGE COUNT FOR REPOSITORY.
         LA    R4,16                   GET MINIMUM PAGE COUNT.
         CR    R0,R4                   VALID AMOUNT?
         BNL   IMLLPGOK                YES.
         LR    R0,R4                   NO, SO USE MINIMUM AMOUNT.
IMLLPGOK SLL   R0,12                   CONVERT TO BYTES.
         LR    R4,R0                   COPY THE SIZE REQUEST.
         GETMAIN RC,LV=(0),LOC=(ANY),SP=241   GET REPOSITORY AREA.
         LTR   R15,R15                 AREA SUCCESSFULLY ACQUIRED?
         BZ    AREAINIT                YES.
NULLAIX1 OI    0(R3),X'80'             NO, DISABLE PROCESSING.
         WTO   MF=(E,WTOL01W)          ISSUE STATUS NOTIFICATION.
         B     EXIT
***********************************************************************
*        INITIALIZE NEW AREA.                                         *
***********************************************************************
         USING IMLLBASE,R1
AREAINIT LA    R1,0(,R1)               ENSURE POSITIVE ADDRESS.
         LR    R5,R1                   COPY ADDRESS OF NEW STORAGE.
         SRA   R5,24                   SHIFT OUT BOTTOM 24 BITS.
         BZ    AREA2LOW                IF ZERO THEN AREA BELOW 16MB.
         MVC   IMLLID,=C'IMONLIX1'     SET AREA IDENTIFIER.
         ST    R4,IMLLSIZE             SAVE AREA SIZE.
         STCK  IMLLINIT                SET AREA CREATION TIMESTAMP.
         MVI   IMLLPGMM,C'*'           SET PGM AND JOBS MASKS TO STARS.
         MVC   IMLLPGMM+1(15),IMLLPGMM ASSUME IMLLJOBM AFTER IMLLPGMM.
         MVI   IMLLPGMX,C'_'           SET REJECTION MASKS TO USCORES.
         MVC   IMLLPGMX+1(15),IMLLPGMX ASSUME IMLLJOBX AFTER IMLLPGMX.
         LA    R5,0(R4,R1)             POINT PAST END OF AREA.
         LA    R0,IMLLBSIZ             GET SIZE OF THE BASE SECTION.
         STH   R0,IMLLVERS             SET VERSION PARTICULARS.
         LA    R0,IMLLNTSZ             GET SIZE OF A PROGRAM ENTRY.
         STH   R0,IMLLVERS+2           SET VERSION PARTICULARS.
         SLR   R5,R0                   POINT TO AN ENTRY BEFORE END.
         ST    R5,IMLLLAST             POINT TO LAST POSSIBLE ENTRY.
         LA    R5,IMLLBSIZ(,R1)        POINT PAST REPOSITORY BASE.
         ST    R5,IMLLHIGH             SAVE ADDRESS OF NEXT ENTRY.
         CS    R15,R1,0(R3)            PUT AREA ADDR IN SUPPLIED WORD.
         BZ    CUMSTGOK                NOW PROCESS THIS EVENT AS USUAL.
AREA2LOW LR    R0,R4                   COPY THE SIZE OF THIS ATTEMPT.
         FREEMAIN RU,LV=(0),A=(1),SP=241    FREE SUPERFLUOUS AREA.
         ICM   R1,15,0(R3)             POINT TO ALREADY CREATED AREA.
         BZ    NULLAIX1                NO AREA, DO NOTHING UNTIL REIPL.
         BM    EXIT                    FUNCTION ALREADY DISABLED.
***********************************************************************
*        SEARCH FOR ENTRY FOR THIS PROGRAM.                           *
***********************************************************************
         USING IMLLBASE,R1
CUMSTGOK CLC   IMLLID,=C'IMONLIX1'     FOUND CORRECT DATA REPOSITORY?
         BNE   EXIT                    NO, CANNOT ACCUMULATE DATA.
         LA    R7,IMLLBSIZ             GET SIZE OF THE BASE SECTION.
         CH    R7,IMLLVERS             RIGHT AREA VERSION?
         BNE   EXIT                    NO, CANNOT ACCUMULATE DATA.
         LA    R7,IMLLNTSZ             GET SIZE OF A PROGRAM ENTRY.
         CH    R7,IMLLVERS+2           RIGHT AREA VERSION?
         BNE   EXIT                    NO, CANNOT ACCUMULATE DATA.
         LA    R7,LLP1PDS2             POINT TO BLDL DIRECTORY ENTRY.
         USING PDS2,R7
         LA    R10,IMLLPGMM            POINT TO PROGRAM NAME MASK.
         LA    R11,PDS2NAME            POINT TO ACTUAL PROGRAM NAME.
         BAS   R14,MASKCHEK            IS THIS PROGRAM TO BE SELECTED?
         BNE   EXIT                    NO, DISCARD EVENT.
         LA    R10,IMLLPGMX            POINT TO PROGRAM NAME MASK.
         LA    R11,PDS2NAME            POINT TO ACTUAL PROGRAM NAME.
         BAS   R14,MASKCHEK            IS THIS PROGRAM TO BE EXCLUDED?
         BE    EXIT                    YES, DISCARD EVENT.
         USING PSA,0
         L     R12,PSAAOLD             POINT TO THE CURRENT ASCB.
         USING ASCB,R12
         ICM   R9,15,ASCBJBNI          POINT TO JOB NAME.
         BNZ   FJOBNMOK                FOUND A POINTER.
         ICM   R9,15,ASCBJBNS          POINT TO JOB NAME.
         BNZ   FJOBNMOK                FOUND A POINTER.
         LA    R9,=CL8'*LOGON* '       POINT TO JOB NAME.
         ICM   R6,15,ASCBTSB           CHECK FOR TSB.
         BNZ   FJOBNMOK                FOUND A POINTER.
         LA    R9,=CL8'STARTING'       POINT TO JOB NAME.
FJOBNMOK LA    R10,IMLLJOBM            POINT TO JOB NAME MASK.
         LR    R11,R9                  POINT TO ACTUAL JOB NAME.
         BAS   R14,MASKCHEK            IS THIS JOB TO BE SELECTED?
         BNE   EXIT                    NO, DISCARD EVENT.
         LA    R10,IMLLJOBX            POINT TO JOB NAME MASK.
         LR    R11,R9                  POINT TO ACTUAL JOB NAME.
         BAS   R14,MASKCHEK            IS THIS JOB TO BE EXCLUDED?
         BE    EXIT                    YES, DISCARD EVENT.
         SLR   R14,R14                 NO, FLAG FIRST TIME THROUGH.
         LA    R3,IMLLTABL             POINT TO CATCH-ALL ENTRY.
         CLI   PDS2NAME,C'A'           PROGRAM 1ST BYTE LESS THAN 'A'?
         BL    PROGLOOP                YES.
         CLI   PDS2NAME,C'Z'           PROGRAM 1ST BYTE MORE THAN 'Z'?
         BH    PROGLOOP                YES.
         SLR   R5,R5
         IC    R5,PDS2NAME             GET FIRST BYTE OF PROGRAM NAME.
         CLI   PDS2NAME,C'I'           PROGRAM NAME BEGINS WITH 'I'?
         BL    GETANCHR                NO, CALCULATE ANCHOR ENTRY SLOT.
         LA    R3,42*4(,R3)            SKIP 'I' TABLE FOR 'J' AND OVER.
         BH    GETANCHR                NO, CALCULATE ANCHOR ENTRY SLOT.
         LA    R3,IMLLTBLI             POINT TO 'I' CATCH-ALL ENTRY.
         CLI   PDS2NAME+1,C'A'         PROGRAM 2ND BYTE LESS THAN 'A'?
         BL    PROGLOOP                YES.
         CLI   PDS2NAME+1,C'Z'         PROGRAM 2ND BYTE MORE THAN 'Z'?
         BH    PROGLOOP                YES.
         IC    R5,PDS2NAME+1           GET SECOND BYTE OF PROGRAM NAME.
GETANCHR LA    R0,X'C0'                GET OFFSET OFFSET.
         SLR   R5,R0                   GET "FALSE ZERO" OFFSET.
         SLL   R5,2                    MULTIPLY BY BYTES PER WORD.
         LA    R3,0(R5,R3)             POINT TO CORRECT CHAIN ANCHOR.
         USING IMLLNTRY,R3
PROGLOOP LR    R4,R3                   COPY "PREVIOUS" ENTRY ADDRESS.
         ICM   R3,15,IMLLNEXT          POINT TO NEXT ENTRY IN CHAIN.
         BZ    NEWPRGRM                END OF CHAIN - HAVE NEW PROGRAM.
         CLC   IMLLPROG,PDS2NAME       CORRECT PROGRAM NAME?
         BL    PROGLOOP                NO, CONTINUE SCANNING CHAIN.
         BH    NEWPRGRM                NO, CREATE A NEW PROGRAM ENTRY.
         CLC   IMLLDSET,LLP1DSN        CORRECT DATA SET NAME?
         BL    PROGLOOP                NO, CONTINUE SCANNING CHAIN.
         BH    NEWPRGRM                NO, CREATE A NEW PROGRAM ENTRY.
         CLC   IMLLSTOR,PDS2STOR       CORRECT PROGRAM SIZE?
         BNE   PROGLOOP                NO.
         B     ADDSTATS                YES, ACCUMULATE STATISTICS.
NEWPRGRM LR    R0,R3                   REMEMBER NEW NEXT ENTRY ADDRESS.
         LTR   R3,R14                  GOT A NEW SLOT YET?
         BNZ   NEWCHAIN                YES, DON'T GET ANOTHER ONE.
         L     R3,IMLLHIGH             NO, POINT TO NEXT FREE SLOT.
         C     R3,IMLLLAST             IS THIS USABLE?
         BH    EVNTLOST                NO, UPDATE LOST EVENT COUNT.
         LA    R5,IMLLNTSZ(,R3)        POINT TO NEW NEXT FREE SLOT.
         CS    R3,R5,IMLLHIGH          UPDATE NEXT FREE SLOT POINTER.
         BNZ   NEWPRGRM                CHANGED - GET LATEST NEXT SLOT.
         MVC   IMLLPROG,PDS2NAME       SUPPLY PROGRAM NAME.
         MVC   IMLLDSET,LLP1DSN        SUPPLY DATA SET NAME.
         MVC   IMLLSTOR,PDS2STOR       SUPPLY PROGRAM SIZE.
NEWCHAIN ST    R0,IMLLNEXT             SUPPLY FORWARD CHAIN POINTER.
         CS    R0,R3,0(R4)             UPDATE CHAIN POINTER.
         BZ    PGMCHNOK                CHAIN UPDATED SUCCESSFULLY.
         LR    R14,R3                  REMEMBER ADDRESS OF NEW SLOT.
         LR    R3,R4                   THIS CHAIN HAS CHANGED.
         B     PROGLOOP                FIND RIGHT SPOT IN NEW CHAIN.
PGMCHNOK MVC   IMLFASID,ASCBASID       LOAD FIRST ASID.
         DROP  R12                     ASCB.
         MVC   IMLFJOBN,0(R9)          LOAD FIRST JOB NAME.
         STCK  IMLFTIME                SAVE FIRST-USE TIMESTAMP.
         MVC   IMLLATTR,PDS2ATR        COPY ATTRIBUTE FLAGS.
         MVC   IMLLTTRN(3),PDS2TTRP    COPY MEMBER START TTR.
         MVC   IMLLTTRN+3(1),PDS2INDC  COPY ALIAS FLAG AND H/W COUNT.
         MVC   IMLLCNCT,PDS2CNCT       COPY CONCATENATION COUNT.
         MVC   IMLLLOCN,PDS2LIBF       COPY LIBRARY FLAG FIELD.
         MVC   IMLLATR3,PDS2FTB2       COPY AMODE/RMODE FLAGS.
         XC    IMLLNEW0,IMLLNEW0       CLEAR RESIDUAL DATA.
         DROP  R7                      PDS2.
         L     R4,IMLLPGMS             GET CURRENT PROGRAM COUNT.
PGMSLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.
         CS    R4,R5,IMLLPGMS          SET INCREMENTED COUNT.
         BNZ   PGMSLOOP                ENSURE COUNT GETS INCREMENTED.
***********************************************************************
*        UPDATE PROGRAM ENTRY STATISTICS.                             *
***********************************************************************
ADDSTATS L     R4,PSAAOLD              POINT TO THE CURRENT ASCB.
         DROP  0                       PSA.
         USING ASCB,R4
         MVC   IMLLASID,ASCBASID       LOAD LATEST ASID.
         ICM   R5,15,ASCBJBNI          POINT TO JOB NAME.
         BNZ   LJOBNMOK                FOUND A POINTER.
         ICM   R5,15,ASCBJBNS          POINT TO JOB NAME.
         BNZ   LJOBNMOK                FOUND A POINTER.
         LA    R5,=CL8'*LOGON* '       POINT TO JOB NAME.
         ICM   R6,15,ASCBTSB           CHECK FOR TSB.
         BNZ   LJOBNMOK                FOUND A POINTER.
         LA    R5,=CL8'STARTING'       POINT TO JOB NAME.
         DROP  R4                      ASCB.
LJOBNMOK MVC   IMLLJOBN,0(R5)          LOAD LATEST JOB NAME.
         STCK  IMLLTIME                SAVE LATEST-USE TIMESTAMP.
         MVC   IMLLFECH,LLP1DUR        GET DURATION OF THIS FETCH.
         NI    IMLLFECH+7,X'FE'        ENSURE LAST BIT IS ZERO.
         CLI   LLP1PROV,C'L'           LLA USED FOR FETCH?
         BE    LLAFETCH                YES.
         L     R4,IMLLPGMF             GET TOTAL DFP FETCH COUNT.
PGMFLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.
         CS    R4,R5,IMLLPGMF          SET INCREMENTED COUNT.
         BNZ   PGMFLOOP                ENSURE COUNT GETS INCREMENTED.
         L     R4,IMLPFCNT             GET CURRENT PROGRAM FETCH COUNT.
PFCTLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.
         CS    R4,R5,IMLPFCNT          SET INCREMENTED COUNT.
         BNZ   PFCTLOOP                ENSURE COUNT GETS INCREMENTED.
PFFTLOOP LM    R4,R5,IMLPFCUM          GET CURRENT DURATION TOTAL.
         LM    R6,R7,LLP1DUR           GET DURATION OF THIS FETCH.
         ALR   R7,R5                   GET NEW TOTAL LOW-ORDER.
         BC    12,PFNOOFLW             NO OVERFLOW.
         LA    R6,1(,R6)               OVERFLOW SO ADJUST HIGH-ORDER.
PFNOOFLW ALR   R6,R4                   GET NEW TOTAL HIGH-ORDER.
         CDS   R4,R6,IMLPFCUM          SET NEW FETCH DURATION TOTAL.
         BNZ   PFFTLOOP                ENSURE TIME GET ACCULUATED.
         B     EXIT                    STATISTICS NOW UPDATED.
LLAFETCH OI    IMLLFECH+7,X'01'        FLAG THIS FETCH WAS LLA.
         L     R4,IMLLLLAF             GET TOTAL LLA FETCH COUNT.
LLAFLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.
         CS    R4,R5,IMLLLLAF          SET INCREMENTED COUNT.
         BNZ   LLAFLOOP                ENSURE COUNT GETS INCREMENTED.
         L     R4,IMLLACNT             GET CURRENT LLA FETCH COUNT.
LFCTLOOP LA    R5,1(,R4)               GET INCREMENTED COUNT.
         CS    R4,R5,IMLLACNT          SET INCREMENTED COUNT.
         BNZ   LFCTLOOP                ENSURE COUNT GETS INCREMENTED.
LFFTLOOP LM    R4,R5,IMLLACUM          GET CURRENT DURATION TOTAL.
         LM    R6,R7,LLP1DUR           GET DURATION OF THIS FETCH.
         ALR   R7,R5                   GET NEW TOTAL LOW-ORDER.
         BC    12,LFNOOFLW             NO OVERFLOW.
         LA    R6,1(,R6)               OVERFLOW SO ADJUST HIGH-ORDER.
LFNOOFLW ALR   R6,R4                   GET NEW TOTAL HIGH-ORDER.
         CDS   R4,R6,IMLLACUM          SET NEW FETCH DURATION TOTAL.
         BNZ   LFFTLOOP                ENSURE TIME GET ACCULUATED.
         B     EXIT                    STATISTICS NOW UPDATED.
***********************************************************************
*        COUNT EVENTS LOST DUE TO TABLE SIZE.                         *
***********************************************************************
EVNTLOST CLI   LLP1PROV,C'L'           LLA USED FOR FETCH?
         BE    LOSTLLAF                YES.
         L     R4,IMLLOSTP             GET DFP LOST FETCH EVENT COUNT.
LOSTPFLP LA    R5,1(,R4)               GET INCREMENTED COUNT.
         CS    R4,R5,IMLLOSTP          SET INCREMENTED COUNT.
         BNZ   LOSTPFLP                ENSURE COUNT GETS INCREMENTED.
         B     EXIT                    STATISTICS NOW UPDATED.
LOSTLLAF L     R4,IMLLOSTL             GET LLA LOST FETCH EVENT COUNT.
LOSTLFLP LA    R5,1(,R4)               GET INCREMENTED COUNT.
         CS    R4,R5,IMLLOSTL          SET INCREMENTED COUNT.
         BNZ   LOSTLFLP                ENSURE COUNT GETS INCREMENTED.
***********************************************************************
*        STANDARD EXIT LINKAGE.                                       *
***********************************************************************
EXIT     LA    R15,#RCIX1_DEFAULT      INITIALIZE RETURN CODE.
         LA    R0,#RSIX1_DEFAULT       INITIALIZE REASON CODE.
         L     R14,12(,R13)            RESTORE THE RETURN ADDRESS.
         LM    R1,R12,24(R13)          RESTORE OTHERS EXCEPT R15 AND R0
         BR    R14                     RETURN TO THE CALLER.
***********************************************************************
*        VERIFY EVENT AGAINST SELECTION MASK                          *
***********************************************************************
MASKCHEK LA    R0,8                    GET CHARACTER STRING LENGTH.
MASKLOOP CLI   0(R10),C'*'             GENERIC CHARACTER?
         BE    MASKEQAL                YES, NO MISMATCH YET.
         CLC   0(1,R10),0(R11)         NO, COMPARE A BYTE.
         BNER  R14                     MISMATCH FOUND SO EXIT.
MASKEQAL LA    R10,1(,R10)             POINT TO NEXT CHARACTER.
         LA    R11,1(,R11)             POINT TO NEXT CHARACTER.
         BCT   R0,MASKLOOP             GO CHECK NEXT CHARACTER, IF ANY.
         BR    R14                     RETURN TO CALLER.
         EJECT
***********************************************************************
*        CONSTANTS AND LITERALS                                       *
***********************************************************************
WTOL01W  WTO   'PRYL01W LLA MONITORING DISABLED UNTIL NEXT IPL - LACK O+
               F ECSA',ROUTCDE=(2),MF=L
         SPACE
         LTORG
         SPACE
         DS    0D                      END OF CSECT.
         EJECT
***********************************************************************
*        REGISTER ASSIGNMENTS                                         *
***********************************************************************
         SPACE
R0       EQU   0                       WORK REGISTER.
R1       EQU   1                       INPUT PARAMETER ADDR, AREA BASE.
R2       EQU   2                       PARAMETER ADDRESS.
R3       EQU   3                       PROGRAM ENTRY ADDRESS.
R4       EQU   4                       WORK REGISTER.
R5       EQU   5                       WORK REGISTER.
R6       EQU   6                       WORK REGISTER.
R7       EQU   7                       BLDL RESULTS, WORK REGISTER.
R8       EQU   8                       CODE REGISTER.
R9       EQU   9                       NOT USED.
R10      EQU   10                      NOT USED.
R11      EQU   11                      NOT USED.
R12      EQU   12                      NOT USED.
R13      EQU   13                      SAVE AREA ADDRESS
R14      EQU   14                      RETURN ADDRESS, UPDATE MARKER.
R15      EQU   15                      ENTRY POINT ADDRESS AT ENTRY,
*                                      RETURN CODE AT EXIT.
         EJECT
***********************************************************************
*        CONTROL BLOCKS AND DATA AREAS.                               *
***********************************************************************
         SPACE
         IHAASCB
         SPACE 2
         IHALLP1
         SPACE 2
         IHAPDS
         SPACE 2
         IHAPSA
         EJECT
         COPY  IMLLAREA
         SPACE 2
         END
