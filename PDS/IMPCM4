*        COPYRIGHT (C) 1990  PRYCROFT SIX PTY LTD
         TITLE 'SCAN AND EDIT INPUT 3270 DATA STREAM'
*
*  THIS ROUTINE EDITS THE INPUT DATA STREAM TO CONVERT ALL 2-BYTE 3270
*  BUFFER ADDRESSES INTO ROW AND COLUMN RELATIVE CO-ORDINATE BYTES.
*  ALSO, ALL INPUT TYPED TEXT IS FOLDED TO UPPER CASE.
*
         USING SCNINPUT,R15
SCNINPUT NI    MODESW,255-ALTS    RESET WIDE-SCREEN REQUEST FLAG.
         LH    R1,TGETLEN         GET THE INPUT DATA STREAM LENGTH.
         LA    R2,INBUFF          POINT TO THE INPUT DATA STREAM.
         LA    R3,STRM3270
         USING STRM3270,R3
         LA    R3,MENU3270
         DROP  R3                 STRM3270.
         USING MENU3270,R3
         CLI   STRMERAS,X'7E'     ERASE/WRITE ALTERNATE USED?
         DROP  R3                 MENU3270.
         LA    R3,COLUMNS         POINT TO STANDARD WIDTH.
         BNE   CNVBFRAD           NO.
         CLI   OLDCOLS+3,80       USING A WIDE SCREEN?
         BNH   CNVBFRAD           NO.
         LA    R3,OLDCOLS         YES, POINT TO LARGER WIDTH.
CNVBFRAD SLR   R5,R5              CLEAR FOR INSERT.
         ICM   R5,3,1(R2)         LOAD BUFFER ADDRESS.
         TM    1(R2),X'40'        12-BIT ADDRESS FORMAT?
         BZ    GOTCSRAD           NO, 14-BIT ADDRESS FORMAT ALREADY.
         SLL   R5,2               SHIFT UP LOW BYTE "PARITY" BITS.
         ICM   R5,2,1(R2)         RELOAD HIGH BYTE.
         SLL   R5,18              SHIFT OUT HIGH BYTE "PARITY" BITS.
         SRL   R5,20              CONVERT TO BINARY NUMBER.
GOTCSRAD SLR   R4,R4              CLEAR FOR DIVIDE.
         D     R4,0(,R3)          GET RELATIVE CO-ORDINATES OF ADDRESS.
         STC   R5,1(,R2)          SAVE RELATIVE LINE NUMBER.
         STC   R4,2(,R2)          SAVE RELATIVE COLUMN NUMBER.
         AHI   R1,-3              REDUCE BYTE COUNT.
         BNPR  R14                RETURN IF END OF DATA STREAM.
         LA    R2,3(,R2)          ADJUST BUFFER POINTER.
SCANINLP CLI   0(R2),X'11'        FOUND A SET-BUFFER-ADDRESS?
         BE    CNVBFRAD           YES, CONVERT IT TO CO-ORDINATES.
         OI    0(R2),X'40'        NO, FOLD IT TO UPPER CASE.
         LA    R2,1(,R2)          INCREMENT BUFFER POINTER.
         BCT   R1,SCANINLP        DECREMENT BYTES-TO-GO COUNTER.
         BR    R14                RETURN AT END OF DATA STREAM.
         SPACE
         DROP  R15                SCNINPUT.
         TITLE 'TUTORIAL/GLOSSARY PANEL MANAGER'
         USING TUTORIAL,R9
         USING SCRNIO,R8
TUTORIAL DS    0H                 PERFORM TUTORIAL PANEL NAVIGATION.
         TM    MODESW2,CLNF       ANYTHING TO CLEANUP ON OPTION EXIT?
         BNO   TBITMPOK           NO, CAN'T HAVE BITMAP ON SHOW.
         TM    MODESW,VCTR        ARE VECTOR GRAPHICS USABLE?
         BNO   TBITMPOK           NO, CAN'T HAVE BITMAP ON SHOW.
         L     R1,CRNTOPTN        POINT TO THE CURRENT OPTION VECTOR.
         CLI   0(R1),C' '         IS IT THE MAIN MENU?
         BNE   TBITMPOK           NO, BITMAP CAN'T BE ON SHOW.
         OI    MODESW,BTMP        YES, SIGNAL BITMAP NEEDS CLEARING.
         NI    MODESW2,255-CLNF   OPTION EXIT CLEANUP NOW PERFORMED.
TBITMPOK CLI   INBUFF,1           ENTRY BY PFK?
         BE    TUTBYPF1           YES.
         CLI   INCHARS,C'H'       CHECK IF HARDCOPY REQUESTED.
         BE    DOPRINTX           OUTPUT THE SCREEN IMAGE.
         CLI   INCHARS,C'Z'       CHECK IF TERMINATION REQUESTED.
         BE    EXAMRTNX           RETURN TO MAINLINE FOR TERMINATION.
         CLI   INCHARS,C'Â¢'       CLOSE IMPLOG REQUEST?  (EBCDIC K/B.)
         BE    CLOSELOG           YES, CLOSE IT.
         CLI   INCHARS,C'`'       CLOSE IMPLOG REQUEST?  (ASCII K/B.)
         BE    CLOSELOG           YES, CLOSE IT.
         CLI   INBUFF,3           END REQUESTED?
         BE    TUTOREND           YES.
         CLI   INBUFF,7           UP REQUESTED?
         BE    TUTORUP            YES.
         CLC   =C'END ',INCHARS   END REQUESTED?
         BE    TUTOREND           YES.
         CLC   =C'UP  ',INCHARS   UP REQUESTED?
         BE    TUTORUP            YES.
         BAS   R14,TUTCOLOR       CALL SET COLOUR ROUTINE.
TUTBYPF1 ICM   R0,15,IMGLSADR     GET GLOSSARY PANEL MODULE.
         BNZ   TUTEADOK           ALREADY LOADED SO PROCEED.
         LA    R0,TUTORENG        POINT TO TUTORIAL MODULE NAME.
         L     R15,ATHTBADR       POINT TO CONFIGURATION FLAGS.
         TM    255(R15),X'10'     JAPANESE DISPLAY?
         BZ    LOADTUTE           NO, USE ENGLISH TUTORIAL.
         LA    R0,TUTORJAP        POINT TO TUTORIAL MODULE NAME.
LOADTUTE LOAD  EPLOC=(0),ERRET=TUTORXIT
         ST    R0,IMGLSADR        SAVE ENTRY POINT FOR LATER.
TUTEADOK LA    R8,INCHARS         POINT TO FIRST POTENTIAL DIGIT.
         SLR   R5,R5              CLEAR WORK REGISTER.
         SLR   R1,R1              CLEAR ACCUMULATOR.
         CLI   INBUFF+4,23        INPUT FROM LINE 24?
         BE    TUTEGOT#           YES, NUMBERS NOT A PAGE REQUEST.
TUTEGET# CLI   0(R8),C'0'         NUMERIC DIGIT TO PROCESS?
         BL    TUTEGOT#           NO, NOW HAVE COMPLETE NUMBER.
         NI    0(R8),X'0F'        YES, RESET ZONE.
         IC    R5,0(,R8)          LOAD NUMBER.
         MH    R1,TEN+2           PROMOTE PREVIOUS DIGITS.
         AR    R1,5               ADD LATEST DIGIT.
         LA    R8,1(,R8)          POINT TO NEXT BYTE IN INPUT BUFFER.
         B     TUTEGET#           PROCESS NEXT POTENTIAL DIGIT.
TUTEGOT# L     R8,SCRNIOAD        RESTORE BASE REGISTER.
         ICM   R7,15,CRNTGLOS     ALREADY IN TUTORIAL?
         BNZ   TUTPGCHK           YES, GO CHECK PAGE NUMBER.
         L     R7,CRNTOPTN        POINT TO THE CURRENT OPTION VECTOR.
         IC    R5,0(,R7)          LOAD THE OPTION NAME.
TUTOROPT L     R7,IMGLSADR        POINT TO THE GLOSSARY PANEL MODULE.
         LR    R6,R7              COPY THIS ADDRESS.
         AR    R6,R5              POINT OPTION'S ENTRY NUMBER.
         IC    R5,0(,R6)          LOAD OPTION'S ENTRY NUMBER.
         SLL   R5,2               MULTIPLY BY FOUR FOR INDEX.
         L     R7,256(R5,R7)      POINT TO OPTION'S GLOSSARY VECTOR.
         ST    R7,CRNTGLOS        SAVE THE VECTOR ORIGIN ADDRESS.
TUTPGCHK CLI   INCHARS,C'"'       REQUEST FOR SUBCOMMAND LIST?
         BNE   TUTCHKPG           NO.
         LH    R1,4(,R7)          GET THE TUTORIAL SUBCOMMANDS PAGE.
TUTCHKPG LTR   R1,R1              EXPLICIT PAGE NUMBER REQUESTED?
         BZ    TUTNXTPG           NO, PROCEED WITH NORMAL SEQUENCE.
         CH    R1,2(,R7)          YES, IS IT HIGHER THAN THE MAXIMUM?
         BNH   TUTGETPG           NO, NOW HAVE TARGET PAGE NUMBER.
TUTNXTPG LH    R1,GLOSSPG#        GET THE PREVIOUSLY SHOWN PAGE NUMBER.
         CLI   INCHARS,C'\'       HIGHLIGHTING CHANGE REQUESTED?
         BE    TUTRESHO           YES, JUST RESHOW THE SAME PANEL.
         CLI   INBUFF+4,23        COLOUR CODE CHANGE REQUESTED?
         BE    TUTRESHO           YES, JUST RESHOW THE SAME PANEL.
         LA    R1,1               NO.
         AH    R1,GLOSSPG#        ADD ONE TO PREVIOUS PAGE NUMBER.
         CH    R1,2(,R7)          IS IT HIGHER THAN THE MAXIMUM?
         BNH   TUTGETPG           NO, NOW HAVE TARGET PAGE NUMBER.
         LA    R1,1               YES, LOOP AROUND TO PAGE 1.
TUTGETPG STH   R1,GLOSSPG#        SAVE THE TARGET PAGE NUMBER.
TUTRESHO SLL   R1,3               MULTIPLY PAGE NUMBER BY 8 FOR INDEX.
         ALR   R1,R7              POINT TO THE PAGE ADDRESS AND LENGTH.
         LM    R5,R6,0(R1)        LOAD THE SCREEN LENGTH AND ADDRESS.
         LTR   R5,R5              ANY SCREEN IMAGE SUPPLIED?
         BZ    SCRNEXIT           NO, OPTION MUST SUPPLY OWN PANEL.
         MVC   HOME(L'TUTORHDR),TUTORHDR
         LA    R4,HOME+L'TUTORHDR POINT PAST SCREEN SET-UP ORDERS.
         MVC   0(74,R4),6(R6)     LOAD TUTORIAL PAGE HEADING LINE.
         LH    R0,2(,R7)          GET MAXIMUM PAGE NUMBER.
         CVD   R0,WORK
         MVC   70(4,R4),ED3Z
         LA    R1,73(,R4)
         EDMK  70(4,R4),WORK+6    SHOW THE TOTAL PAGE COUNT.
         AHI   R1,-4              BACKUP FOR ' OF '.
         MVC   0(3,R1),=X'409686' LOAD ' OF'.
         AHI   R1,-4              BACKUP FOR CURRENT PAGE NUMBER.
         LH    R0,GLOSSPG#        GET THE CURRENT PAGE NUMBER.
         CVD   R0,WORK
         MVC   0(4,R1),ED3Z
         EDMK  0(4,R1),WORK+6     SHOW THE CURRENT PAGE NUMBER.
         AHI   R1,-5              BACKUP FOR 'PAGE '
         MVC   0(4,R1),=X'D7818785'     LOAD 'PAGE'.
         TR    0(74,R4),XLATETBL  TRANSLATE HEADING AS APPROPRIATE.
         MVC   74(3,R4),LOWX      TURN OFF THE UNDERSCORE.
         LA    R4,77(,R4)         POINT PAST THE DATA STREAM SO FAR.
         LA    R0,L'TUTORHDR+3-6(,R5)   GET THE FINAL TPUT LENGTH.
         AHI   R5,-80             DECREASE LENGTH SINCE HEADING DONE.
         LA    R6,80(,R6)         POINT PAST THE HEADING LINE DATA.
         LR    R7,R5              COPY THE LENGTH TO MOVE.
         MVCL  R4,R6              MOVE PAGE CONTENTS TO BUFFER.
         LA    R1,HOME            POINT TO THE DATA STREAM TO TPUT.
         B     SCRNSHOW           DISPLAY GLOSSARY SCREEN FOR THIS MON.
TUTORUP  ICM   R7,15,CRNTGLOS     POINT TO TUTORIAL VECTOR ORIGIN.
         BZ    TUTORXIT           HANDLE ZERO POINTER.
         L     R1,CRNTOPTN        POINT TO THE CURRENT OPTION ENTRY.
         CLI   0(R1),C' '         IN THE MAIN MENU?
         BE    TUTPAGE1           YES, SHOW PAGE 1.
         MVC   PREVGLOS,CRNTGLOS  SAVE THE CURRENT TUTORIAL OPTION.
         MVC   PREVGPG#,GLOSSPG#  SAVE THE CURRENT TUTORIAL PAGE.
         SLR   R1,R1              CLEAR "SPECIFIED PAGE NUMBER".
         STH   R1,GLOSSPG#        CLEAR GLOSSARY PAGE NUMBER.
         ST    R1,CRNTGLOS        CLEAR GLOSSARY VECTOR ORIGIN.
         LA    R5,C' '            PRIME FOR GENERAL INFORMATION.
         B     TUTOROPT           RESUME TUTORIAL FROM THERE.
TUTPAGE1 SLR   R0,R0              CLEAR ALL GLOSSARY STATUS DATA.
         STH   R0,GLOSSPG#        CLEAR GLOSSARY PAGE NUMBER.
         ST    R0,CRNTGLOS        CLEAR GLOSSARY VECTOR ORIGIN.
         STH   R0,PREVGPG#        CLEAR PREVIOUS GLOSSARY PAGE NUMBER.
         ST    R0,PREVGLOS        CLEAR PREVIOUS GLOSSARY VECTR ORIGIN.
         B     TUTBYPF1           SHOW PAGE ONE OF GENERAL INFORMATION.
TUTOREND ICM   R7,15,CRNTGLOS     POINT TO TUTORIAL VECTOR ORIGIN.
         BZ    TUTORXIT           HANDLE ZERO POINTER.
         L     R1,CRNTOPTN        POINT TO THE CURRENT OPTION ENTRY.
         CLC   0(1,R1),0(R7)      IN TUTORIAL OF CURRENT OPTION?
         BE    TUTORXIT           YES, SO TERMINATE THE TUTORIAL.
         ICM   R0,15,PREVGLOS     NO, GET THE PREVIOUS TUTORIAL.
         BZ    TUTORXIT           NONE SO TERMINATE THE TUTORIAL.
         ST    R0,CRNTGLOS        NO, RETURN TO THE CURRENT OPTION.
         MVC   GLOSSPG#,PREVGPG#  RETURN TO THE APPROPRIATE PAGE.
         SLR   R0,R0
         STH   R0,PREVGPG#        CLEAR PREVIOUS GLOSSARY PAGE NUMBER.
         ST    R0,PREVGLOS        CLEAR PREVIOUS GLOSSARY VECTR ORIGIN.
         LH    R1,GLOSSPG#        GET RESTORED PAGE NUMBER.
         B     TUTEGOT#           RESUME TUTORIAL FROM THIS PAGE.
TUTORXIT SLR   R0,R0
         STH   R0,GLOSSPG#        CLEAR GLOSSARY PAGE NUMBER.
         ST    R0,CRNTGLOS        CLEAR GLOSSARY VECTOR ORIGIN.
         STH   R0,PREVGPG#        CLEAR PREVIOUS GLOSSARY PAGE NUMBER.
         ST    R0,PREVGLOS        CLEAR PREVIOUS GLOSSARY VECTR ORIGIN.
         MVI   INBUFF,13          RESET AID TO ENTER.
         MVC   INBUFF+1(2),ONE    FORCE AS IF PRIMARY INPUT.
         L     R1,INITADDR        GET ADDRESSABILITY TO SCRNHDR.
         USING INITIAL,R1         RESTORE EXPECTED HEADING FORMAT.
         MVC   HOME(HDRLEN),SCRNHDR
         DROP  R1                 INITIAL.
         MVC   INCHARS,BLANKS     REQUEST DISPLAY CONTINUE.
         B     SCRNEXIT           RETURN TO LOCAL OPTION CONTROL.
         DROP  R8                 SCRNIO.
TUTCOLOR LH    R1,TGETLEN         GET THE INPUT DATA STREAM LENGTH.
         BCTR  R1,0
         LTR   R1,R1              ANY DATA?
         BNPR  R14                NO, RETURN.
         LA    R15,INBUFF(R1)     POINT TO LAST INPUT BYTE.
TUTSBALP CLI   0(R15),X'11'       FOUND THE LAST SBA ORDER?
         BE    TUTSBAOK           YES.
         BCTR  R15,0              NO, POINT TO THE PREVIOUS BYTE.
         BCT   R1,TUTSBALP
         BR    R14                NO SBA FOUND SO RETURN.
TUTSBAOK CLI   1(R15),23          INPUT FROM LINE 24?
         BNER  R14                NO, RETURN.
         LA    R0,7               YES, GET MAXIMUM COLOUR CODE COUNT.
         LA    R1,3(,R15)         POINT TO FIRST POSSIBLE CODE.
         L     R15,ATHTBADR       POINT TO CUSTOMIZABLE TABLE.
         LA    R15,C'1'(,R15)     POINT TO FIRST TARGET CODE.
TUTCLRLP CLI   0(R1),C'1'         VALID CODE?
         BLR   R14                NO, RETURN.
         CLI   0(R1),C'7'         VALID CODE?
         BHR   R14                NO, RETURN.
         MVC   0(1,R15),0(R1)     YES, UPDATE OPERATIONAL CODE TABLE.
         LA    R1,1(,R1)          POINT TO NEXT POSSIBLE SOURCE CODE.
         LA    R15,1(,R15)        POINT TO NEXT POSSIBLE TARGET CODE.
         BCT   R0,TUTCLRLP        PROCESS POSSIBLE NEXT CODE.
         BR    R14                RETURN.
         DROP  R9                 TUTORIAL.
         SPACE
PREVGLOS DC    A(0)               PREVIOUS GLOSSARY VECTOR ORIGIN.
PREVGPG# DC    H'0'               PREVIOUS GLOSSARY PAGE NUMBER.
         AIF   (&MVSMON).MVSTUTE
TUTORENG DC    CL8'IMPENGLS'
TUTORJAP DC    CL8'IMPEXGLS'
         AGO   .TUTRNMD
.MVSTUTE ANOP
TUTORENG DC    CL8'IMPXAGLS'
TUTORJAP DC    CL8'IMPXAGLS'
.TUTRNMD ANOP
TUTORHDR DC    X'C11140401B404E132841F42842F4000000001BF8C62842F7'
         LTORG
         SPACE
         DS    0H
         TITLE 'CONVERT JULIAN DATE TO YY-MM-DD'
*              INPUT - PACKED DECIMAL JULIAN DATE IN REGISTER 1
*              OUTPUT- C'YY-MM-DD' IN WORK
         SPACE
         USING DATECONV,R7
DATECONV DS    0H                       (FROM TAPESCAN DATE SUBROUTINE)
         LR    R15,R9                      SAVE WORK REGISTER.
         ST    R1,CONVWORK+4               STORE INPUT DATE FOR TESTING
         ST    R1,CONVWORK+8                 AND CONVERSION.
         UNPK  CONVWORK+12(3),CONVWORK+5(2)  FORMAT YEAR.
         XC    CONVWORK(6),CONVWORK        GET JULIAN DAY IN DECIMAL.
         CVB   R1,CONVWORK                 GET JULIAN DAY IN BINARY.
         LA    R9,MNTHTBL-4                ADJUST FOR FIRST INCREMENT.
         TM    CONVWORK+9,X'01'            IF ODD THEN
         BO    NOTLEAP                                 NOT LEAP YEAR.
         TM    CONVWORK+9,X'12'            TEST FOR LEAP (OK TILL 2099)
         BNM   NEXTMNTH                         IF MIXED NOT LEAP YEAR.
NOTLEAP  CHI   R1,60                       DDD AFTER 28TH FEBRUARY?
         BL    NEXTMNTH                    NO, LEAP YEAR IRRELEVANT.
         LA    R1,1(,R1)                   YES, FUDGE DDD ACCORDINGLY.
NEXTMNTH LA    R9,4(,R9)                   INCREMENT THRU MONTH TABLE.
         SH    R1,0(,R9)                   DECREASE NUMBER OF DAYS.
         BP    NEXTMNTH                    NOT YET, TRY NEXT MONTH.
         AH    R1,0(,R9)                   FOUND THE MONTH.
         CVD   R1,CONVWORK                 GET DAY OF MONTH.
         OI    CONVWORK+7,X'0F'            MAKE UNPK RESULT PRINTABLE.
         UNPK  CONVWORK+18(2),CONVWORK+6(2) FORMAT DAY OF MONTH.
         MVI   CONVWORK+14,C'-'            INSERT THE DASH.
         MVC   CONVWORK+15(2),2(R9)        MOVE IN MONTH NUMBER.
         MVI   CONVWORK+17,C'-'            INSERT THE DASH.
         MVC   WORK,CONVWORK+12            RETURN THE ANSWER.
         LR    R9,R15                      RESTORE WORK REGISTER.
         BR    R14                         RETURN.
         SPACE
         DROP  R7                          DATECONV.
         SPACE
MNTHTBL  DC    H'31'                       JAN
         DC    C'01'
         DC    H'29'                       FEB
         DC    C'02'
         DC    H'31'                       MAR
         DC    C'03'
         DC    H'30'                       APR
         DC    C'04'
         DC    H'31'                       MAY
         DC    C'05'
         DC    H'30'                       JUN
         DC    C'06'
         DC    H'31'                       JUL
         DC    C'07'
         DC    H'31'                       AUG
         DC    C'08'
         DC    H'30'                       SEP
         DC    C'09'
         DC    H'31'                       OCT
         DC    C'10'
         DC    H'30'                       NOV
         DC    C'11'
         DC    H'255'                      DEC (ALLOW FOR STUPID DDD)
         DC    C'12'
         SPACE
         DS    0D
CONVWORK DC    CL20' '                     WORK AREA FOR THIS ROUTINE.
         SPACE
         LTORG
         DS    0H
         TITLE 'PREFIX CHECKING SUBROUTINE'
         USING PREFCHEK,R7
PREFCHEK STM   R14,R12,SAVE+12   SAVE ALL GENERAL REGISTER VALUES.
         LM    R8,R10,WORK+4     LOAD PARAMETERS AND COMPARE LENGTH.
PREFLOOP CLI   0(R8),C'*'        GENERIC CHARACTER?
         BE    PRFCHREQ          YES, NO MISMATCH YET.
         CLC   0(1,R8),0(R9)     NO, COMPARE A BYTE.
         BNE   PREFCHKD          MISMATCH FOUND SO EXIT.
PRFCHREQ LA    R8,1(,R8)         POINT TO NEXT CHARACTER.
         LA    R9,1(,R9)         POINT TO NEXT CHARACTER.
         BCT   R10,PREFLOOP      GO CHECK NEXT CHARACTER, IF ANY.
PREFCHKD LM    R14,R12,SAVE+12   RESTORE REGISTERS.
         BR    R1                RETURN TO CALLER.
         DROP  R7                PREFCHEK.
         TITLE 'EXCP DISPLAY FILE HANDLER'
         USING EXCP3270,R11
EXCP3270 DS    0H
         CLI   EXCPQSAM,C'Q'     USING EXCP?
         BE    QSAM3270          NO, QSAM.
         L     R15,EXCPADTB(R15) GET ROUTINE ADDRESS.
         BSM   0,R15             BRANCH TO APPROPRIATE AMODE24 ROUTINE.
         SPACE
EXCPOPEN DS    0H                OPEN EXCP DCB IF APPROPRIATE.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVI   C'S'-C' '(R15),X'F0' SET CUSTOMIZABLE BYTE.
         SPACE
         DEVTYPE DCBDDNAM-IHADCB+EXCPDCB,$DEVTYPE
         LTR   R15,R15           DOES THE DDNAME EXIST?
         BNZ   EXCPSCRN          NO, TRY IT AND ISSUE WTO.
         CLI   $DEVTYPE+2,X'10'  GRAPHIC DEVICE CLASS?
         BE    EXCPSCRN          YES, USE EXCP TO 3270 TERMINAL.
         MVI   EXCPQSAM,C'Q'     NO, USE QSAM FILES INTEAD OF TERMINAL.
         SLR   R15,R15           SET ENTRY CODE FOR OPEN.
         B     QSAM3270          USE FILE I/O INSTEAD OF TERMINAL 1/O.
         SPACE
EXCPSCRN OI    COPYATR1,X'D0'    GIVE STARTED TASK OPER/JCL/MOUNT.
         EXTRACT MF=(E,EXTRCOMM) GET ADDRESS OF COMMUNICATION LIST.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    TRANOKAY          NO, CAN'T GET NON-SWAPPABLE.
         MODESET MF=(E,MDSTSUP0) GET AUTHORIZED FOR SYSEVENT.
         LA    R1,EXCPECB        YES, POINT TO AN ECB.
*        SYSEVENT TRANSWAP       BECOME NON-SWAPPABLE.
         LA    R0,X'0E'          LOAD TRANSWAP SYSEVENT CODE.
         SVC   95                ISSUE SYSEVENT SVC.
         LTR   R15,R15           WAS ANYTHING TO BE DONE?
         BNZ   TRANDONE          NO, ALREADY NON-SWAPPABLE.
         WAIT  ECB=EXCPECB       YES, WAIT TILL TRANSWAP COMPLETE.
TRANDONE DS    0H
         MODESET MF=(E,MDSTPROB) BACK TO PROBLEM STATE AND KEY.
TRANOKAY DS    0H
         OPEN  MF=(E,EXOPNCLS)   OPEN THE FILE.
         LA    R1,EXCPDCB        POINT TO THE DCB.
         USING IHADCB,R1
*        TM    DCBOFLGS,DCBOFOPN DID THE OPEN WORK?
         TM    DCBOFLGS,X'10'    DID THE OPEN WORK?
         BZ    BADEXOPN          NO.
         OI    MODESW3,XCPO+AID  YES, REMEMBER THIS.
         L     R1,DCBDEBAD       POINT TO THE DEB.
         DROP  R1                IHADCB.
         L     R1,32(,R1)        POINT TO THE UCB.
         UNPK  INITUNIT(5),4(3,R1)
         TR    INITUNIT,HEX-C'0' SHOW THE UNIT NAME.
         MVI   INITUNIT+4,C')'
         MVC   TERMUNIT,INITUNIT COPY THE UCB NAME.
         MVC   BADUNIT,INITUNIT
         SLR   R0,R0
         ST    R0,EXCPECB        RESET THE ECB.
         EXCP  EXCPIOB           ISSUE ERASE/WRITE AND INITIAL MESSAGE.
         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.
         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?
         BNE   BADEXCP           NO, ISSUE MESSAGE AND TERMINATE.
         SLR   R0,R0             YES.
         ST    R0,EXCPECB        RESET THE ECB.
         LA    R1,QUERYCCW       POINT TO THE CHANNEL PROGRAM.
         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.
         EXCP  EXCPIOB           ISSUE THE I/O.
         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.
         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?
         BNE   EXCPXIT0          NO, SKIP QUERY STUFF, PRETEND A-OKAY.
         SLR   R0,R0             YES.
         ST    R0,EXCPECB        RESET THE ECB.
         LA    R1,BUFFER         YES, GET WORKING INPUT BUFFER ADDRESS.
         STCM  R1,7,QRYRDCCW+1   PUT THIS ADDRESS IN CCW.
         LA    R1,QRYRDCCW       POINT TO THE CHANNEL PROGRAM.
         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.
         EXCP  EXCPIOB           ISSUE THE I/O.
         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.
         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?
         BNE   BADEXCP           NO, ISSUE MESSAGE AND TERMINATE.
         LA    R1,1024           YES, GET REQUESTED LENGTH.
         SH    R1,I0BCSW+5       LESS RESIDUAL COUNT FOR ACTUAL LENGTH.
         LA    R0,1
         SLL   R0,31             GET AMODE BIT READY.
         L     R10,INITADDR      POINT TO THE INITIALIZATION ROUTINE.
         USING INITIAL,R10
         LA    R14,QUERYGOT      GET TARGET OF BRANCH.
         DROP  R10
         OR    R14,R0            SET AMODE BIT.
EXCPXIT0 SLR   R15,R15           SET RETURN CODE OF ZERO.
         BSM   0,R14             RETURN TO CALLER.
         SPACE
BADEXOPN WTO   'PRY671I IMON - OPEN FAILURE - TASK TERMINATING',       +
               ROUTCDE=(2,11)
         LA    R15,20            SET COMPLETION CODE.
         SVC   3                 TERMINATE THE CURRENT REQUEST BLOCK.
         SPACE
BADEXCP  UNPK  BADIOCC(3),EXCPECB(2)
         TR    BADIOCC,HEX-C'0'  SHOW I/O COMPLETION CODE.
         MVI   BADIOCC+2,C' '    ERASE GARBAGE.
         LA    R0,16             GET UNIT/CHANNEL STATUS BIT COUNT.
         LA    R15,IOSTATTB      POINT TO STATUS LABEL TABLE.
         ICM   R1,X'C',I0BCSW+3  LOAD UNIT AND CHANNEL STATUS BYTES.
BADSTALP LTR   R1,R1             IS THE HIGH BIT ON?
         BM    BADSTAOK          YES.
         SLL   R1,1              NO, PROMOTE NEXT BIT.
         LA    R15,16(,R15)      POINT TO NEXT LABEL.
         BCT   R0,BADSTALP       TRY IT.
         LA    R15,BLANKS        ALL BITS ARE ZERO.
BADSTAOK MVC   BADSTAT,0(R15)    LOAD I/O STATUS LABEL.
         LA    R0,8              GET SENSE BYTE BIT COUNT.
         LA    R15,IOSENSTB      POINT TO SENSE LABEL TABLE.
         ICM   R1,8,I0BSENS0     LOAD FIRST SENSE BYTE.
BADSENLP LTR   R1,R1             IS THE HIGH BIT ON?
         BM    BADSENOK          YES.
         SLL   R1,1              NO, PROMOTE NEXT BIT.
         LA    R15,16(,R15)      POINT TO NEXT LABEL.
         BCT   R0,BADSENLP       TRY IT.
         LA    R15,BLANKS        ALL BITS ARE ZERO.
BADSENOK MVC   BADSENS,0(R15)    LOAD I/O SENSE LABEL.
         WTO   MF=(E,BADIOWTO)   ISSUE I/O FAILURE MESSAGE.
         CLOSE MF=(E,EXOPNCLS)   CLOSE THE FILE.
         LA    R15,20            SET COMPLETION CODE.
         SVC   3                 TERMINATE THE CURRENT REQUEST BLOCK.
         SPACE
EXCPWRIT DS    0H                ISSUE WRITE TO SCREEN.
         STCM  R1,7,WRITECCW+1   PUT DATA STREAM ADDRESS IN CCW.
         STH   R0,WRITECCW+6     PUT DATA STREAM LENGTH IN CCW.
         NI    0(R1),X'04'       RESET WCC EXCEPT FOR BELL.
         TM    MODESW3,AID       IS AN AID ALREADY SET?
         BZ    XFIXWCC           NO.
         OI    0(R1),X'03'       YES, RESET AID/MDT AND UNLOCK K/B.
         NI    MODESW3,255-AID   RESET AID-SET FLAG.
XFIXWCC  TR    0(1,R1),TABLE     SET WCC "PARITY" BITS.
         MVI   WRITECCW,X'01'    LOAD WRITE OP-CODE.
         TM    MODESW3,EWA       ERASE/WRITE ALTERNATE REQUIRED?
         BZ    EXCPOPOK          NO, OP-CODE IS NOW CORRECT.
         MVI   WRITECCW,X'0D'    LOAD ERASE/WRITE ALTERNATE OP-CODE.
         NI    MODESW3,255-EWA   FLAG NO LONGER REQUIRED.
EXCPOPOK SLR   R0,R0
         ST    R0,EXCPECB        RESET THE ECB.
         LA    R1,WRITECCW       POINT TO THE CHANNEL PROGRAM.
         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.
         EXCP  EXCPIOB           ISSUE THE I/O.
         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.
         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?
         BNE   BADEXCP           NO, ISSUE MESSAGE AND TERMINATE.
         SLR   R15,R15           SET RETURN CODE OF ZERO.
         BSM   0,R14             RETURN TO CALLER.
         SPACE
EXCPREAD DS    0H                ISSUE READ-MODIFIED TO SCREEN.
         L     R1,COMMADDR       POINT TO MODIFY/STOP ECB ADDRESS.
         L     R1,0(,R1)         POINT TO MODIFY/STOP ECB.
         TM    0(R1),X'40'       HAS THE ECB BEEN POSTED?
         BO    EODAD             YES, OPERATOR ISSUED STOP COMMAND.
         SLR   R0,R0
         ST    R0,EXCPECB        RESET THE ECB.
         LA    R1,READCCW        POINT TO THE CHANNEL PROGRAM.
         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.
         EXCP  EXCPIOB           ISSUE THE I/O.
         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.
         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?
         BNE   BADEXCP           NO, ISSUE MESSAGE AND TERMINATE.
         CLI   INBUFF,X'60'      ANY AID SET?
         BE    EXCPNULL          NO.
         CLI   INBUFF,X'6D'      CLEAR BUTTON HIT?
         BNE   EXCPAID           NO.
         CLI   CLR+1,X'7E'       USING ALTERNATE SCREEN SIZE?
         BNE   EXCPAID           NO.
         OI    MODESW3,EWA       YES, NEED AN ERASE/WRITE ALTERNATE.
EXCPAID  OI    MODESW3,AID       FLAG AID RETURNED FROM SCREEN.
         LA    R1,INBUFLEN       GET REQUESTED LENGTH.
         SH    R1,I0BCSW+5       LESS RESIDUAL COUNT FOR ACTUAL LENGTH.
         SLR   R15,R15           SET RETURN CODE OF ZERO.
EXCPRRTN BSM   0,R14             RETURN TO CALLER.
EXCPNULL LA    R15,4             SET RETURN CODE OF FOUR.
         AIF   (&MSPMON).XF4WTCK
         CLI   TGETFLG,TGETFLGN  NOWAIT CURRENTLY IN EFFECT?
         BE    EXCPRRTN          YES, RETURN TO CALLER.
         AGO   .XWTCKOK
.XF4WTCK ANOP
         TM    MODESW3,NOWT      NOWAIT CURRENTLY IN EFFECT?
         BO    EXCPRRTN          YES, RETURN TO CALLER.
.XWTCKOK ANOP
         STIMER WAIT,BINTVL=EXCPWAIT  NO, WAIT A BIT.
         B     EXCPREAD          NOW REDRIVE THE READ.
         SPACE
EXCPCLOS DS    0H                CLOSE EXCP DCB IF IT IS OPEN.
         TM    MODESW3,XCPO      WAS THE EXCP FILE OPENED?
         BZ    EXCPCLSD          NO, RETURN TO CALLER.
         TIME  DEC               YES, GET THE TIME.
         STCM  R0,4,TERMMSG+6    SHOW IT IN THE TERMINATION MESSAGE.
         OI    TERMMSG+6,X'F0'
         STCM  R0,8,TERMMSG+3
         OI    TERMMSG+3,X'F0'
         SRL   R0,4
         STCM  R0,4,TERMMSG+5
         OI    TERMMSG+5,X'F0'
         STCM  R0,8,TERMMSG+2
         OI    TERMMSG+2,X'F0'
         LA    R1,TERMMSG        POINT TO THE TERMINATION MESSAGE.
         STCM  R1,7,INITCCW+1    PUT DATA STREAM ADDRESS IN CCW.
         LA    R0,TRMSTPLN
         L     R1,COMMADDR       POINT TO MODIFY/STOP ECB ADDRESS.
         L     R1,0(,R1)         POINT TO MODIFY/STOP ECB.
         TM    0(R1),X'40'       HAS THE ECB BEEN POSTED?
         BO    TRMLENOK          YES, OPERATOR ISSUED STOP COMMAND.
         LA    R0,L'TERMMSG      NO, TERMINAL USER SAID TO EXIT.
TRMLENOK STH   R0,INITCCW+6      PUT DATA STREAM LENGTH IN CCW.
         LA    R1,INITCCW        POINT TO THE CHANNEL PROGRAM.
         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.
         EXCP  EXCPIOB           ISSUE THE I/O.
         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.
         CLOSE MF=(E,EXOPNCLS)   CLOSE THE FILE.
         NI    MODESW3,255-XCPO  THE EXCP FILE IS NOW CLOSED.
         SLR   R15,R15           SET RETURN CODE OF ZERO.
EXCPCLSD BSM   0,R14             RETURN TO CALLER.
         SPACE
EXCPLOGO DS    0H                LOAD PROGRAMMABLE SYMBOL SET.
         SLR   R0,R0
         ST    R0,EXCPECB        RESET THE ECB.
         LA    R1,KANGACCW       POINT TO THE CHANNEL PROGRAM.
         ST    R1,I0BSTART       SAVE ITS ADDRESS IN THE IOB.
         EXCP  EXCPIOB           ISSUE THE I/O.
         WAIT  ECB=EXCPECB       WAIT FOR I/O COMPLETION.
         LA    R15,8             PREPARE BAD RETURN CODE.
         CLI   EXCPECB,X'7F'     NORMAL COMPLETION?
         BNE   LOGOEXIT          NO, RETURN WITH NON-ZERO RETURN CODE.
         SLR   R15,R15           YES, SET RETURN CODE OF ZERO.
LOGOEXIT BSM   0,R14             RETURN TO CALLER.
         SPACE
         DROP  R11               EXCP3270.
         TITLE 'EXCP DISPLAY FILE HANDLER - CONSTANTS AND VARIABLES'
$DEVTYPE DC    2F'0'             DEVTYPE RESULTS AREA.
EXCPADTB DS    0F                ROUTINE ENTRY POINT VECTOR.
         DC    A(EXCPOPEN)       ENTRY CODE 00 - OPEN FILE AND QUERY.
         DC    A(EXCPWRIT)       ENTRY CODE 04 - WRITE DATA STREAM.
         DC    A(EXCPREAD)       ENTRY CODE 08 - READ MODIFIED.
         DC    A(EXCPCLOS)       ENTRY CODE 0C - CLOSE FILE.
         DC    A(EXCPLOGO)       ENTRY CODE 10 - LOAD PROGRAM SYMBOLS.
EXCPWAIT DC    F'100'            WAIT ONE SECOND.
EXTRCOMM EXTRACT COMMADDR,'S',FIELDS=(COMM),MF=L
COMMADDR DC    A(0)              ADDRESS OF COMMUNICATION LIST.
EXOPNCLS DC    AL1(128),AL3(EXCPDCB)
EXCPECB  DC    F'0'              EXCP EVENT CONTROL BLOCK.
         PRINT NOGEN
         AIF   (&MVSMON).EXCPIEF
EXCPDCB  DCB   DSORG=PS,MACRF=E,DDNAME=KDJRDER,BUFL=4096,RECFM=U,      +
               IOBAD=EXCPIOB
         AGO   .EXCPDDD
.EXCPIEF ANOP
EXCPDCB  DCB   DSORG=PS,MACRF=E,DDNAME=IEFRDER,BUFL=4096,RECFM=U,      +
               IOBAD=EXCPIOB
.EXCPDDD ANOP
         PRINT GEN
EXCPIOB  DS    0F
I0BFLAG1 DC    X'02'
I0BFLAG2 DC    X'00'
I0BSENS0 DC    X'00'
I0BSENS1 DC    X'00'
I0BECBCC EQU   *,1
I0BECBPT DC    A(EXCPECB)               ECB
I0BFLAG3 DC    X'00'
I0BCSW   DC    XL7'00000000000000'
I0BSIOCC EQU   *,1
I0BSTART DC    A(INITCCW)               CH PGM
I0BFLAG4 EQU   *,1
I0BDCBPT DC    A(EXCPDCB)               DCB ADD
I0BRESTR DC    X'00000000'
I0BINCAM DC    H'0'
I0BERRCT DC    H'0'
         DC    XL8'0000000000000000'    UCB INDEX
INITCCW  CCW   X'05',INITMSG,X'20',L'INITMSG          ERASE/WRITE.
EWALTCCW CCW   X'0D',BLANKS,X'20',1                   ERASE/WRITE ALT.
QUERYCCW CCW   X'11',QUERY+1,X'20',L'QUERY-1          WSF.
KANGACCW CCW   X'11',SYMFIELD,X'20',ADDSYMLN          WSF.
QRYRDCCW CCW   X'06',0,X'20',1024                     READ-MODIFIED.
WRITECCW CCW   X'01',0,X'20',0                        WRITE.
READCCW  CCW   X'06',INBUFF,X'20',INBUFLEN            READ-MODIFIED.
IOSTATTB DS    0F
         DC    CL16'ATTENTION       '
         DC    CL16'STATUS MODIFIER '
         DC    CL16'CONTROL UNIT END'
         DC    CL16'BUSY            '
         DC    CL16'CHANNEL END     '
         DC    CL16'DEVICE END      '
         DC    CL16'UNIT CHECK      '
         DC    CL16'UNIT EXCEPTION  '
         DC    CL16'PGM CNTL INTERPT'
         DC    CL16'INCORRECT LENGTH'
         DC    CL16'PROGRAM CHECK   '
         DC    CL16'PROTECTION CHECK'
         DC    CL16'CHANNEL DATA CHK'
         DC    CL16'CHANNEL CNTL CHK'
         DC    CL16'INTRFACE CTL CHK'
         DC    CL16'CHAINING CHECK  '
IOSENSTB DS    0F
         DC    CL16'COMMAND REJECT  '
         DC    CL16'INTERVENTION REQ'
         DC    CL16'BUS-OUT CHECK   '
         DC    CL16'EQUIPMENT CHECK '
         DC    CL16'DATA CHECK      '
         DC    CL16'OVERRUN         '
         DC    CL16'CONTROL CHECK   '
         DC    CL16'OPERATION CHECK '
INITMSG  DC    C'G I-MON (????) INITIALIZING - PLEASE WAIT'
INITUNIT EQU   INITMSG+9,4
TERMMSG  DC    C'G HH:MM  -  I-MON (????) ENDED'
TERMUNIT EQU   TERMMSG+19,4
         DC    C' DUE TO OPERATOR STOP COMMAND'
TRMSTPLN EQU   *-TERMMSG
EXCPQSAM DC    C'E'              EXCP OR QSAM FLAG.
BADIOWTO WTO   'PRY672W IMON (????) - I/O FAILURE - CC=?? - 0123456789A+
               BCDEF - 0123456789ABCDEF',ROUTCDE=(2,11),MF=L
BADUNIT  EQU   BADIOWTO+18,4
BADIOCC  EQU   BADIOWTO+43,2
BADSTAT  EQU   BADIOWTO+58,16
BADSENS  EQU   BADIOWTO+67,16
         SPACE
         DS    0H
         TITLE 'QSAM DISPLAY FILE HANDLER'
         USING EXCP3270,R11
QSAM3270 DS    0H
         LA    R11,QSAM3270      SET LOCAL BASE.
         DROP  R11               EXCP3270.
         USING QSAM3270,R11
         ST    R14,QSRETURN      SAVE RETURN ADDRESS.
         L     R15,QSAMADTB(R15) GET ROUTINE ADDRESS.
         BR    R15               BRANCH TO APPROPRIATE ROUTINE.
         SPACE
QSAMOPEN DS    0H                OPEN QSAM DCB.
         OPEN  MF=(E,QSOPNCLS)   OPEN THE FILE.
         OI    MODESW3,XCPO      REMEMBER THIS.
         L     R14,QSRETURN      RESTORE RETURN ADDRESS.
         BR    R14               RETURN TO CALLER.
         SPACE
QSAMWRIT SLR   R1,R1             PRINT SCREEN IMAGE.
         ST    R9,QSSAVER9       SAVE R9 VALUE.
         L     R9,PRNTADDR       LOAD SUBROUTINE ENTRY POINT ADDRESS.
         BASR  R14,R9            CALL HARDCOPY SUBROUTINE.
         L     R9,QSSAVER9       RESTORE R9 VALUE.
         L     R14,QSRETURN      RESTORE RETURN ADDRESS.
         SLR   R15,R15           HOPE IT ALL WORKED.
         BR    R14               RETURN TO CALLER.
         SPACE
QSAMREAD MVC   INBUFF,QSAMINHD   SET READ HEADER.
         MVI   INCHARS,C'Z'      PREPARE FOR END-OF-FILE.
         ST    R13,PRNTSAVE+4    SAVE DYNAMIC AREA BASE REGISTER.
         LA    R13,SAVEREGS      GET SAVE AREA ADDRESS.
         STM   R14,R12,PRNTSAVE+12   SAVE OTHER REGISTERS.
         GET   QSAMDCB,INCHARS   READ AN INPUT RECORD.
QSAMEND  LM    R14,R12,PRNTSAVE+12    RESTORE OTHER REGISTERS.
         L     R13,PRNTSAVE+4    RESTORE REGISTER 13.
         OI    MODESW3,AID       FLAG AID RETURNED FROM SCREEN.
         LA    R1,INBUFLEN       GET REQUESTED LENGTH.
         L     R14,QSRETURN      RESTORE RETURN ADDRESS.
         SLR   R15,R15           HOPE IT ALL WORKED.
QSAMLOGO BR    R14               RETURN TO CALLER.
         SPACE
QSAMCLOS DS    0H                CLOSE EXCP DCB IF IT IS OPEN.
         TM    MODESW3,XCPO      WAS THE EXCP FILE OPENED?
         BZ    QSAMCLSD          NO, RETURN TO CALLER.
         CLOSE MF=(E,QSOPNCLS)   CLOSE THE FILE.
         NI    MODESW3,255-XCPO  THE EXCP FILE IS NOW CLOSED.
         L     R14,QSRETURN      RESTORE RETURN ADDRESS.
         SLR   R15,R15           SET RETURN CODE OF ZERO.
QSAMCLSD BR    R14               RETURN TO CALLER.
         SPACE
         DROP  R11               QSAM3270.
         TITLE 'QSAM DISPLAY FILE HANDLER - CONSTANTS AND VARIABLES'
QSAMADTB DS    0F                ROUTINE ENTRY POINT VECTOR.
         DC    A(QSAMOPEN)       ENTRY CODE 00 - OPEN FILE AND QUERY.
         DC    A(QSAMWRIT)       ENTRY CODE 04 - WRITE DATA STREAM.
         DC    A(QSAMREAD)       ENTRY CODE 08 - READ MODIFIED.
         DC    A(QSAMCLOS)       ENTRY CODE 0C - CLOSE FILE.
         DC    A(QSAMLOGO)       ENTRY CODE 10 - LOAD PROGRAM SYMBOLS.
QSRETURN DC    F'0'
QSSAVER9 DC    F'0'
QSOPNCLS DC    AL1(128),AL3(QSAMDCB)
         PRINT NOGEN
         AIF   (&MVSMON).QSAMIEF
QSAMDCB  DCB   DSORG=PS,MACRF=GM,DDNAME=KDJRDER,                       +
               RECFM=FB,LRECL=80,EODAD=QSAMEND
         AGO   .QSAMDDD
.QSAMIEF ANOP
QSAMDCB  DCB   DSORG=PS,MACRF=GM,DDNAME=IEFRDER,                       +
               RECFM=FB,LRECL=80,EODAD=QSAMEND
.QSAMDDD ANOP
         PRINT GEN
QSAMINHD DC    X'7D4040114040'
         DS    0H
         TITLE 'SCREEN PRINT SUBROUTINE - EXECUTES IN 24 BIT AMODE'
         USING SCRNPRNT,R9
SCRNPRNT ST    R13,PRNTSAVE+4    SAVE DYNAMIC AREA BASE REGISTER.
         LA    R13,SAVEREGS      GET SAVE AREA ADDRESS.
         STM   R14,R12,PRNTSAVE+12   SAVE OTHER REGISTERS.
         LTR   R1,R1             HAVE WE COME TO CLOSE IMPLOG?
         BNM   SUPPRTST          NO, TO PRINT A SCREEN IMAGE.
         MVI   LCMSG,X'C5'       SOUND ALARM FOR CLOSE FAILURE.
         MVI   LCMSG+5,X'F8'     HIGH INTENSITY FOR CLOSE FAILURE.
         MVI   LCMSG+9,X'F2'     RED MESSAGE FOR CLOSE FAILURE. (I3279)
         TM    MODESW,OPNF       IS IMPLOG OPEN?
         BZ    CLOSEXIT          NO, RETURN TO CALLER.
         CLOSE IMPLOG            YES, END OF HARDCOPY LOG FILE.
         NI    MODESW,255-OPNF   TURN OFF OPEN FLAG.
         MVC   LCMSGCLS,S99SYSOC ECHO SYSOUT CLASS.
         CLI   S99SYSOC,C' '     WAS IMPLOG DYNAMICALLY ALLOCATED?
         BE    CLOSEDOK          NO.
         LA    R1,F99PTR         YES, DYNAMICALLY FREE IT.
         DYNALLOC
         LTR   R15,R15           SUCCESSFUL?
         BNZ   PRNTEXIT          NO, DON'T TURN OFF FLAG.
CLOSEDOK MVI   LCMSG,X'C1'       DON'T SOUND ALARM FOR CLOSE SUCCESS.
         MVI   LCMSG+5,X'F0'     LOW INTENSITY FOR CLOSE SUCCESS.
         MVI   LCMSG+9,X'F4'     GREEN MESSAGE FOR CLOSE OK.    (I3279)
         MVI   S99SYSOC,C' '     TURN OFF DYNAMICALLY ALLOCATED FLAG.
CLOSEXIT LA    R1,LCMSG          POINT TO "LOG CLOSED" MESSAGE.
         LA    R0,LCMSGLEN       GET "LOG CLOSED" MESSAGE LENGTH.
PRNTEXIT L     R13,PRNTSAVE+4    RESTORE REGISTER 13.
         STM   R0,R1,PRNTSAVE+20 SAVE TPUT PARAMETERS FOR RESTORE.
         LM    R14,R12,PRNTSAVE+12    RESTORE OTHER REGISTERS.
         BR    R14               RETURN TO CALLER.
         DROP  R13               GOTAREA.
         USING GOTAREA,R10       LET'S FIND THE SCREEN IMAGE.
SUPPRTST L     R10,PRNTSAVE+4    GET OLD REGISTER 13 VALUE.
         LA    R1,HOME           POINT TO TO SCREEN BUFFER.
         C     R1,SCRNPA3A+4     SCREEN IMAGE PRINT SUPPORTED?
         BE    OPENTEST          YES, FUNCTION ALLOWED FOR THIS OPTION.
         LA    R1,NPMSG          NO, POINT TO "NO PRINT" MESSAGE.
         LA    R0,NPMSGLEN       GET "NO PRINT" MESSAGE LENGTH.
         B     PRNTEXIT          RETURN TO MAINLINE.
OPENTEST TM    MODESW,OPNF       IMPLOG ALREADY OPEN?
         BO    PRNTSCRN          YES, PRINT THE SCREEN.
         SLR   R5,R5             PREPARE FOR IC.
         L     R4,SMCAADDR       GET SMCA ADDRESS.
         MVC   HDGSMFID,16(R4)   SMF SYSTEM ID.
         L     R4,PSATOLD        GET POINTER TO CURRENT TCB.
         L     R4,12(0,R4)       POINT TO TIOT.
         MVC   IMPUSRID,0(R4)    GET USERID.
         LA    R4,24(0,R4)       POINT TO TIOELNGH.
CHKDDNAM CLC   4(8,R4),=C'IMPLOG  '
         BE    OPENFILE          FILE EXISTS SO GO AND OPEN IT.
         IC    R5,0(0,R4)        GET TIOT ENTRY LENGTH.
         AR    R4,R5             POINT TO NEXT TIOT ENTRY.
         CLI   0(R4),0           ZERO LENGTH ENTRY?
         BNE   CHKDDNAM          NO, CHECK OUT THIS ENTRY.
         LA    R1,S99RB          YES, NOT THERE SO ALLOCATE IMPLOG.
         CLI   INBUFF,4          PRINT REQUESTED BY PF4/16?
         BE    CHKCLASS          YES, CLASS IS FIRST INPUT CHARACTER.
         MVC   INCHARS(L'INCHARS-1),INCHARS+1
CHKCLASS CLI   INCHARS,C'A'      IS IT A VALID SYSOUT CLASS?
         BL    GETCLASS          NO.
         MVC   GETCLASS+1(1),INCHARS YES, GET NEW TEMPORARY LOG CLASS.
GETCLASS MVI   S99SYSOC,C'0'     SUPPLY SYSOUT CLASS.
         LA    R1,S99RBPTR       ADDR OF PARAMETER LIST FOR DYNALLOC.
         DYNALLOC
         LTR   R15,R15           CHECK RETURN CODE.
         BZ    OPENFILE          SUCCESS SO OPEN FILE AND PRINT.
         CVD   R15,WORK          FAILURE, SO REPORT RETURN CODE.
         OI    WORK+7,15
         UNPK  NFMSGRC,WORK+6(2)
         LA    R1,NFMSG          POINT TO "NO FILE" MESSAGE.
         LA    R0,NFMSGLEN       GET "NO FILE" MESSAGE LENGTH.
         B     PRNTEXIT          EXIT SUBROUTINE.
         USING IHADCB,R1
OPENEXIT CLC   DCBBLKSI,HWZERO   ZERO BLOCK LENGTH?
         BNER  R14               NO, MAKE NO CHANGE.
         MVC   DCBBLKSI,HW3120   YES, SUPPLY BLKSIZE=3120.
         BR    R14               RETURN TO OPEN.
         DROP  R1                IHADCB.
OPENFILE OPEN  (IMPLOG,OUTPUT)
         OI    MODESW,OPNF       TURN ON LOG-OPENED FLAG.
         OI    HEDGTEST+1,X'F0'  HEADING REQUIRED AFTER AN OPEN.
         MVC   PAGE#,FFFF        RESET PAGE COUNT AFTER AN OPEN.
PRNTSCRN CLI   LINES+3,24        MORE THAN 24 LINES ON SCREEN?
         BH    EOHDGFIX          YES, ONLY ONE SCREEN IMAGE PER PAGE.
         XI    HEDGTEST+1,X'F0'  ALLOW TWO SCREEN IMAGES
HEDGTEST B     NOHEADNG                PER PAPER PAGE.
EOHDGFIX DS    0H
         TIME  DEC
         L     R7,DTCONVAD       LOAD DATE CONVERSION ROUTINE ADDRESS.
         LR    R13,R10           GET ADDRESSABILITY TO GOTAREA.
         BASR  R14,R7            INVOKE IT.
         LA    R13,SAVEREGS      RESTORE SAVE AREA ADDRESS.
         MVC   PRNTDATE,WORK     LOAD THE CURRENT DATE.
         IC    R0,HEX            PUT X'F0' IN LOW ORDER BYTE.
         SRL   R0,4              MAKE VALID PACKED DECIMAL.
         ST    R0,WORK           0HHMMSSF.
         MVC   HHMMSS,=X'402120207A20207A2020'
         ED    HHMMSS,WORK
         LH    R1,PAGE#
         LA    R1,1(,R1)         GET NEW PAGE NUMBER.
         STH   R1,PAGE#          SAVE IT.
         CVD   R1,WORK
         OI    WORK+7,X'0F'
         UNPK  PAGENUM,WORK+6(2) PRINT PAGE NUMBER.
         PUT   IMPLOG,LOGPGHDG   WRITE HEADING FOR NEW PAGE.
NOHEADNG LM    R3,R4,SCRNPA3A    GET SCREEN DATA STREAM DETAILS.
         LA    R3,0(R3,R4)       POINT PAST END OF DATA STREAM.
         LA    R4,4(,R4)         JUMP OVER WCC,SBA(1,1) ORDERS.
         MVC   CARD,BLANKS       BLANK THE OUTPUT RECORD.
         MVI   CARD,C'-'         SPACE A BIT FOR NEW SCREEN IMAGE.
PRTLINLP SLR   R5,R5             ZERO BYTE COUNT OF THIS PRINT LINE.
         LA    R6,CARD           POINT TO THE OUTPUT RECORD.
PRNTCHAR CLI   0(R4),X'28'       SA?
         BE    PRINTSA           YES.
         CLI   0(R4),X'0E'       SA (F668X)?
         BE    PRINTSA           YES.
         CLI   0(R4),X'1D'       SF?
         BE    PRINTSF           YES.
         CLI   0(R4),X'1B'       SFE (F9526)?
         BE    PRINTSFF          YES.
         CLI   0(R4),X'13'       IC?
         BE    PRINTIC           YES.
         CLI   0(R4),X'08'       GE?
         BE    PRINTGE           YES.
         CLI   0(R4),X'11'       SBA?
         BE    LASTLINE          YES.
         CLI   0(R4),X'3C'       RA?
         BE    LASTLINE          YES.
         MVC   0(1,R6),0(R4)     COPY BYTE TO OUTPUT LINE.
PRTSFRTN LA    R6,1(,R6)         INCREMENT OUTPUT ADDRESS.
         LA    R5,1(,R5)         INCREMENT BYTE COUNT.
PRINTIC  LA    R4,1(,R4)         INCREMENT INPUT ADDRESS.
PRTORDER CLR   R4,R3             REACHED END OF BUFFER?
         BNL   LASTLINE          YES, WIND UP THE PRINT.
         C     R5,COLUMNS        DONE A WHOLE LINE YET?
         BL    PRNTCHAR          NO, PROCESS NEXT BYTE.
         TR    CARD,PRTXLATE     YES, GET RID OF UNPRINTABLES.
         PUT   IMPLOG,CARD       OUTPUT THE RECORD.
         MVC   CARD,BLANKS       SINGLE SPACING FOR DETAIL LINES.
         B     PRTLINLP          GO MAKE THE NEXT PRINT LINE.
PRINTSA  LA    R4,3(,R4)         JUMP OVER SA ORDER.
         B     PRTORDER          RESUME PRINT OF SCREEN IMAGE.
PRINTSFF LA    R4,1(,R4)         JUMP OVER SFE ORDER.
PRINTSF  LA    R4,1(,R4)         JUMP OVER SF ORDER.
         B     PRTSFRTN          RESUME PRINT OF SCREEN IMAGE.
PRINTGE  LA    R4,1(,R4)         JUMP OVER GE CODE.
         MVC   0(1,R6),0(R4)     COPY BYTE TO OUTPUT LINE.
         LA    R1,STRM3270       GET TRANSLATE TABLE ADDRESSABILITY.
         USING STRM3270,R1       TRANSLATE TO BEST FIT EBCDIC.
         TR    0(1,R6),GRAFTABL-C' '
         DROP  R1                STRM3270.
         B     PRTSFRTN          RESUME PRINT OF SCREEN IMAGE.
LASTLINE LTR   R5,R5             ANY BYTES NOT YET OUTPUT?
         BZ    PUTPRMSG          NO, TERMINATE.
         TR    CARD,PRTXLATE     YES, GET RID OF UNPRINTABLES.
         PUT   IMPLOG,CARD       OUTPUT LAST LINE.
PUTPRMSG MVC   PRMSGCLS,S99SYSOC ECHO SYSOUT CLASS.
         LA    R1,PRMSG          POINT TO "PRINTED" MESSAGE.
         LA    R0,PRMSGLEN       GET "PRINTED" MESSAGE LENGTH.
         B     PRNTEXIT          PRINTED WHOLE SCREEN, SO LEAVE.
         DROP  R9,R10            SCRNPRNT, GOTAREA.
         TITLE 'SCREEN PRINT - DYNALLOC REQUEST PARAMETER BLOCKS'
*        REQUEST BLOCK FOR IMPLOG SYSOUT ALLOCATION
*                TO BE USED IF IMPLOG WAS NOT PRE-ALLOCATED.
         SPACE 2
         DS    0F
S99RBPTR DC    X'80',AL3(S99RB)           SVC 99 REQUEST BLOCK POINTER.
         SPACE
S99RB    DS    0F                         SVC 99 REQUEST BLOCK.
S99RBLN  DC    AL1(20)                    LENGTH=20 BYTES.
S99VERB  DC    X'01'                      VERB CODE=01 (DSNAME ALLOC).
S99FLAG1 DC    X'1000'                    DON'T USE EXISTING ALLOC.
S99ERROR DC    AL2(0)                     ERROR CODE.
S99INFO  DC    AL2(0)                     INFO  CODE.
S99TXTPP DC    A(S99TUPL)                 POINTER TO TEXT UNIT POINTERS
S99RSVD1 DC    A(0)                       RESERVED.
S99FLAG2 DC    A(0)                       FLAGS 2.
S99TUPL  DC    A(S99TUKY1)                TEXT UNIT POINTERS.
S99EPARM DC    X'80',AL3(S99TUKY2)        LAST PARM ADDRESS.
S99TUNIT DS    0F
S99TUKY1 DC    X'0001',X'0001',X'0008',C'IMPLOG  ' DDNAME.
S99TUKY2 DC    X'0018',X'0001',X'0001'    SYSOUT CLASS.
S99SYSOC DC    C' '             USE AS DYNALLOC-PERFORMED FLAG.
         DS    0D
S99LENG  EQU   *-S99RBPTR
         SPACE 3
*        DYNAMIC ALLOCATION REQUEST BLOCK TO FREE DDNAME IMPLOG
*                TO BE USED IF IMPLOG WAS DYNAMICALLY-ALLOCATED.
         SPACE 2
         DS    0F                 GET FULLWORD BOUNDARY.
F99PTR   DC    X'80',AL3(F99RB)   THE POINTER TO THE MESS....
         SPACE
F99RB    DC    FL1'20'            LENGTH OF RB IN BYTES = 20
         DC    XL1'02'            VERB CODE=X'02' - FREE BY DDNAME.
         DC    AL2(0)             FLAGS1 - NO OPTIONS.
F99RC    DC    XL2'0000'          ERROR CODE.
F99INFO  DC    XL2'0000'          INFO CODE.
         DC    AL4(F99TXPT)       ADDRESS OF TEXT UNITS.
         DC    XL4'00'            RESERVED.
         DC    XL4'00'            FLAGS2.
F99TXPT  DC    AL4(F99TU1)        ADDR OF DDN TEXT UNIT.
         DC    X'80',AL3(F99TU2)  ADDR OF LAST UNALLOC TEXT UNIT.
F99TU1   DC    X'0001',X'0001',FL2'8',C'IMPLOG  ' DDNAME.
F99TU2   DC    X'0007',X'0000'    UNALLOC EVEN IF PERM ALLOC.
F99LEN   EQU   *-F99PTR           LENGTH OF FIELDS.
         TITLE 'SCREEN PRINT - VARIABLES, CONSTANTS AND DCB'
         DS    0D
LOGPGHDG DC    CL29'1 I-MON  HARDCOPY LOG    SID='
HDGSMFID DC    CL4' '
         DC    CL9'    USER='
IMPUSRID DC    CL8' '
         DC    CL1' '
PRNTDATE DC    CL8'YY-MM-DD'
         DC    CL1' '
HHMMSS   DC    CL10'  HH.MM.SS'
         DC    CL7'  PAGE '
PAGENUM  DC    CL3'000'
CARD     DC    CL80' '
PRNTSAVE DC    2F'0'             FUDGE UP SOME SAVE AREAS.
         DC    A(SAVEREGS)
         DC    15F'0'
SAVEREGS DC    F'0'
         DC    A(PRNTSAVE)
         DC    16F'0'
PAGE#    DC    H'0'
         SPACE
         LTORG
         SPACE
         DS    0F
LOGEXLST DC    AL1(X'80'+X'05'),AL3(OPENEXIT)
HWZERO   DC    H'0'
HW3120   DC    H'3120'
         SPACE
         PRINT NOGEN
         SPACE
IMPLOG   DCB   DSORG=PS,MACRF=PM,DDNAME=IMPLOG,RECFM=FBA,LRECL=80,     +
               EXLST=LOGEXLST,BUFNO=1
         SPACE
         PRINT GEN
         SPACE
*                   % $ # & * @
PRTXLATE DC    X'406C5B7B505C7C4A4B4B4B4B4B4B4B4B'  IMPLOG PRINTABLE
         DC    X'4B4B4B6D4B4B4B4B4B4B4B4B5C4B5E4B'         CHARACTERS.
         DC    X'4B404040404040404B4B4B4B4B4B4B4B'
         DC    X'F0F1F2F3F4F5F6F7F8F9604F4B4B4B4B'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'
         TITLE 'MAIN MENU DISPLAY SUBROUTINE'
         USING GOTAREA,R13
         USING MAINMENU,R11
MAINMENU DS    0H
         L     R3,SMCAADDR       POINT TO SMCA.
         MVC   MENUSID,16(R3)    SUPPLY SYSTEM ID IN MAIN MENU.
         L     R1,PSAPCCAV       POINT TO PCCA.
         MVC   MENUSER,6(R1)     SHOW CPU SERIAL NUMBER.
         MVC   MENUTYP,12(R1)    SHOW CPU MODEL NUMBER.
         AIF   (&MSPMON).MSPMENU
         L     R1,340(,R3)       LOAD THE IPL DATE.
         ST    R1,WORK+4
         AP    WORK+4(4),=P'1900000'
         UNPK  MENUIPL(5),WORK+4(3)
*        MVI   MENUIPL+4,C'.'
         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.
         BASR  R14,R7
         MVC   MENUIPL+4(6),WORK+2
*        MVI   MENUIPL+7,C'.'
         L     R3,PSAAOLD        POINT TO THE CURRENT ASCB.
         L     R3,108(,R3)       POINT TO THE CURRENT ASXB.
         MVC   MENUUID,192(R3)   SHOW THE USERID (ASXBUSR8).
         LARL  R3,TRMNETID       POINT TO DATA RETURN AREA.
         USING TRMNETID,R3
         MVC   MENUTRM,GTTRMID   SHOW THE TERMINAL NAME
         MVC   MENUNET,GTNETID        AND NETWORK NAME.
         DROP  R3                TRMNETID.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R1,CVTDATE
         ST    R1,WORK+4
         AP    WORK+4(4),=P'1900000'
         UNPK  MENUNOW(5),WORK+4(3)
*        MVI   MENUNOW+4,C'.'
         L     R7,DTCONVAD       GET DATE CONVERSION ENTRY POINT.
         BASR  R14,R7
         MVC   MENUNOW+4(6),WORK+2
*        MVI   MENUNOW+7,C'.'
         MVC   MENUSNM,CVTSNAME  SHOW SYSTEM NAME.
         TM    OSLEVEL,X'08'     SP4 OR LATER?
         BNO   MSPMENU           NO.
         L     R4,CVTECVT        YES, POINT TO THE ECVT.
         USING ECVT,R4
         MVC   MENUSPX,ECVTSPLX  SHOW SYSPLEX NAME.
         TM    OSLEVEL+1,X'80'   SP4.3 OR LATER?
         BNO   MSPMENU           NO.
         L     R1,CVTHID         POINT TO THE HID.
         TM    22(R1),255-X'40'  VALID NODE DESCRIPTOR?
         BZ    SKIPHID           NO, DO NOT PROCESS HID.
         MVC   MENUSER,46(R1)    SHOW CPU SEQUENCE NUMBER.
         MVC   MENUTYP,28(R1)    SHOW CPU TYPE.
         MVI   MENUDSH,C'-'
         MVC   MENUMDL,32(R1)    SHOW CPU MODEL.
SKIPHID  TM    OSLEVEL+1,X'20'   SP5 OR LATER?
         BNO   MSPMENU           NO.
         MVC   MENUCLN,ECVTCLON  YES, SHOW CLONE NAME.
         TM    OSLEVEL+1,X'10'   SP5.2 OR LATER?
         BNO   MSPMENU           NO.
         MVC   MENULPR,ECVTLPNM  SHOW LPAR NAME.
         MVC   MENUVMG,ECVTVMNM  SHOW VM GUEST USERID.
         MVC   MENUHDW,ECVTHDNM  SHOW HARDWARE NAME.
         DROP  R3,R4             CVT, ECVT.
MSPMENU  DS    0H
.MSPMENU ANOP
         CLI   INCHARS,C'?'      REQUEST FOR GENERAL INFORMATION?
         BE    GIVEHELP          YES, PREPARE REQUEST FOR SCREENIO.
         CLI   INCHARS,C'\'      COLOUR MODE CHANGE AS PARAMETER?
         BNE   REDOMENU          NO, JUST DISPLAY PRIMARY OPTIONS.
         XI    MODESW2,COL2      YES, TOGGLE BY DEFAULT.
         CLI   INCHARS+1,C'0'    NUMBER OF COLOURS SPECIFIED?
         BL    REDOMENU          NO.
         CLI   INCHARS+1,C'4'    YES, FOUR-COLOUR MODE?
         BL    SOMECOLR          NO, 0, 1, 2 OR 3 (F9526 MODE).
         BH    FULLCOLR          NO, 5, 6, 7, 8 OR 9 (FAT CHANCE).
         OI    MODESW2,COL4      YES, TURN ON 4-COLOUR MODE.
         NI    MODESW2,255-COL2  TURN OFF MONOCHROME.
         B     REDOMENU          4-COLOUR MODE NOW ENABLED.
SOMECOLR OI    MODESW2,COL2      TURN ON DUAL INTENSITY MODE.
         NI    MODESW2,255-COL4  TURN OFF 4-COLOUR MODE.
         B     REDOMENU
FULLCOLR TM    GRAFLAGS,DIDQRY+HLIT
         BM    REDOMENU          AVOID DATA STREAM ERROR CERTAINTY.
         NI    MODESW2,255-COL2-COL4
         SPACE
REDOMENU LA    R0,1024
         SLL   R0,2              GET GETMAIN REQUIREMENTS (4K).
         LR    R6,R0             COPY STORAGE SIZE.
         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(BELOW,ANY)
         LA    R1,0(,R1)         ENSURE ADDRESS FORMAT.
         ST    R6,0(,R1)         SAVE STORAGE SIZE.
         ST    R1,4(,R1)         SAVE STORAGE ADDRESS.
         LR    R4,R1             POINT TO GETMAINED AREA.
         LA    R5,14(,R4)        POINT TO DATA STREAM AREA.
         LA    R3,STRM3270
         USING STRM3270,R3
         LA    R3,MENU3270
         DROP  R3                STRM3270.
         USING MENU3270,R3
         CLI   OLDCOLS+3,80      USING A WIDE SCREEN?
         BH    BITMAPOK          YES.
         TM    MODESW,VCTR       NATIVE 3270 VECTOR GRAPHICS AVAILABLE?
         BNO   BITMAPOK          NO.
         TM    MODESW,TRIP       TRIPLE-PLANE SYMBOLS AVAILABLE?
         BO    BITMAPOK          YES, DON'T NEED BITMAP FOR COLOUR.
         TM    MODESW3,TSU       TIME SHARING USER?
         BNO   BITMAPOK          NO.
         L     R15,ATHTBADR      POINT TO CONFIGURATION FLAGS.
         CLI   C'X'-C' '(R15),C'0'
         BE    BITMAPOK          BITMAP DISPLAY SUPPRESSED.
         SLR   R1,R1
         IC    R1,CHARSIZE       GET CHARACTER CELL PEL WIDTH.
         MHI   R1,29             29 COLUMNS RIGHT OF CENTRE.
         STCM  R1,3,SEGXPOS      SAVE GLOBE X CO-ORDINATE.
         SLR   R1,R1
         IC    R1,CHARSIZE+1     GET CHARACTER CELL PEL DEPTH.
         CLI   C'X'-C' '(R15),C'X'
         L     R15,LINES
         BNE   *+8
         LA    R15,24
         SRL   R15,1
         BCTR  R15,0
         BCTR  R15,0             GET ROWS ABOVE CENTRE.
         MR    R0,R15
         STCM  R1,3,SEGYPOS      SAVE GLOBE Y CO-ORDINATE.
         CLI   CLR+1,X'7E'       NEED ALTERNATE SCREEN SIZE?
         BNE   *+8               NO.
         MVI   GLBCLRSZ,X'80'    YES.
         TPUT  GLBVECTR,GLBVECLN,NOEDIT
         NI    MODESW,255-VCTR   SUPPRESS IN FUTURE IF FAILURE.
         LTR   R15,R15           SUCCESS?
         BNZ   BITMAPOK          NO.
         OI    MODESW,VCTR       YES, USE VECTOR FOR MENU THIS SESSION.
         OI    MODESW2,CLNF      FLAG CLEAN-UP REQUIRED UPON EXIT.
         MVC   STRMERAS,CLR+1    FLAG SCREEN SIZE SET CORRECTLY.
         NI    GRAFLAGS,255-LOGO SUPPRESS SYMBOL USAGE THIS SESSION.
         NI    MODESW,255-BTMP   NO NEED TO CLEAR BITMAP YET.
BITMAPOK MVC   OPTNPOSI,INITPOSI INITIALIZE OPTION ENTRY LINE LOCATION.
         MVC   0(256,R5),MENU    LOAD FIRST 256 BYTES OF MENU, AND THEN
         MVC   256(OPT$-MENU-256,R5),MENU+256   REST OF FIXED SECTION.
         LA    R5,OPT$-MENU(,R5) POINT PAST GENERATED MENU SO FAR.
         XC    WORK(3),WORK      CLEAR TOP THREE BYTES OF A FULLWORD.
         L     R15,OPLKUPAD      POINT TO PRIMARY OPTION LOOKUP TABLE.
         SPACE
NEXTOPTN LA    R15,OPTBLEN(,R15) POINT TO NEXT TABLE ENTRY.
         CLI   0(R15),255        END OF TABLE REACHED?
         BE    MENUTRLR          YES, GO TACK ON MENU TRAILER SECTION.
         MVC   OPTNATR,COPYATR1  NO, GET PSCBATR1 IN WORK AREA.
         OC    OPTNATR,1(R15)    PROCESS AGAINST OPTION FLAG BYTE.
         TM    OPTNATR,X'FA'     SUFFICIENT AUTHORITY FOR THIS OPTION?
         BNO   NEXTOPTN          NO, SUPPRESS ITS DISPLAY IN MENU.
         MVC   WORK+3(1),0(R15)  COPY THE OPTION CHARACTER.
         TR    WORK+3(1),OPTXLATE-C' '    CONVERT TO AN OPTION NUMBER.
         CLI   WORK+3,0          DOES IT RATE A LINE IN THE MENU?
         BE    NEXTOPTN          NO, SO SKIP IT.
         L     R1,WORK           YES, LOAD OPTION ENTRY NUMBER.
         SLL   R1,3              CONVERT IT TO OPTTABLE INDEX.
         LA    R1,OPTTABLE-8(R1) POINT TO OPTION MENU ENTRY.
         LM    R1,R2,0(R1)       LOAD MENU ENTRY ADDRESS AND SIZE.
         BCTR  R2,0              LESS ONE FOR EXECUTE.
         EX    R2,MENUOPLD       LOAD THE ENTRY.
         LH    R1,OPTNPOSI       GET SCREEN POSITION OF THIS ENTRY.
         LR    R0,R1             COPY IT.
         A     R0,COLUMNS        ADD A ROW FOR NEXT TIME.
         STH   R0,OPTNPOSI       SAVE IT FOR NEXT TIME.
         STC   R1,2(,R5)         STORE LOW-ORDER ADDRESS BYTE.
         NI    2(R5),X'3F'       CLEAN IT UP.
         SRL   R1,6
         STC   R1,1(,R5)         STORE HIGH-ORDER ADDRESS BYTE.
         TR    1(2,R5),TABLE     CONVERT TO 3270 BUFFER ADDRESS.
         LA    R5,1(R2,R5)       UPDATE MENU GENERATION POINTER.
         B     NEXTOPTN          GO PROCESS NEXT PRIMARY OPTION.
         SPACE
MENUOPLD MVC   0(0,R5),0(R1)                    <<< EXECUTED >>>
         SPACE
         AIF   (&MSPMON).MSPTRLR
MENUTRLR LM    R0,R1,LINES       GET SCREEN DIMENSIONS.
         BCTR  R0,0              WANT START OF LAST LINE.
         MR    R0,R0
         LA    R1,5(,R1)         POINT TO MESSAGE LOCATION.
         STCM  R1,3,USAGEADR     STORE 14-BIT ADDRESS.
         CHI   R1,4095           14-BIT ADDRESS REQUIRED?
         BH    USGADROK          YES, DO NOT DERIVE 12-BIT ADDRESS.
         STC   R1,USAGEADR+1     STORE LOW-ORDER ADDRESS BYTE.
         NI    USAGEADR+1,X'3F'  CLEAN IT UP.
         SRL   R1,6
         STC   R1,USAGEADR       STORE HIGH-ORDER ADDRESS BYTE.
         TR    USAGEADR,TABLE    CONVERT TO 3270 BUFFER ADDRESS.
.MSPTRLR ANOP
USGADROK LA    R0,OPTX           SOURCE ADDRESS.
         LA    R1,MENUEND-OPTX   SOURCE LENGTH.
         LR    R14,R5            TARGET ADDRESS.
         LR    R15,R1            TARGET LENGTH.
         MVCL  R14,R0            COPY MENU TRAILER.
         LH    R1,OPTNPOSI       GET SCREEN POSITION OF THIS ENTRY.
         STC   R1,2(,R5)         STORE LOW-ORDER ADDRESS BYTE.
         NI    2(R5),X'3F'       CLEAN IT UP.
         SRL   R1,6
         STC   R1,1(,R5)         STORE HIGH-ORDER ADDRESS BYTE.
         TR    1(2,R5),TABLE     CONVERT TO 3270 BUFFER ADDRESS.
         LR    R5,R14            UPDATE MENU GENERATION POINTER.
         TM    GRAFLAGS,LOGO     EXTENDED CHARACTERS LOADED?
         BZ    MENUDONE          NO, SO DON'T TRY TO USE THEM.
         TM    MODESW,TRIP       USING MULTI-COLOUR SYMBOLS?
         BO    COLRLOGO          YES.
         CLI   CHARSIZE+1,12     YES, 12-ROW CHARACTER MATRIX?
         BNH   COPYXTRA          YES, CORRECT DATA STREAM IN PLACE.
         MVC   ROOROW2,=X'4647404849'
         MVI   ROOROW3,C' '      NO, SUPPLY 16-ROW MATRIX OVERRIDES.
COPYXTRA MVC   0(MENULENX,R5),MENUEND  COPY EXTRA GRAPHIC TRAILER.
         LA    R5,MENULENX(,R5)  UPDATE MENU GENERATION POINTER.
         B     MENUDONE
COLRLOGO MVC   0(GLOBELEN,R5),GLOBE    COPY EXTRA GRAPHIC TRAILER.
         LA    R5,GLOBELEN(,R5)  UPDATE MENU GENERATION POINTER.
         SPACE
MENUDONE LR    R11,R5            GET END ADDRESS OF ORIGINAL OUTPUT.
         LA    R9,14(,R4)        POINT TO START OF DATA STREAM.
         LA    R3,STRM3270
         USING STRM3270,R3
         LA    R3,MENU3270
         DROP  R3                STRM3270.
         BASR  R2,R3             CALL MAIN MENU E.P. OF STRM3270.
         L     R11,OPLKUPAD
         L     R11,4(,R11)       RESTORE MAINMENU BASE REGISTER.
         SLR   R0,R0             REGISTER 0 IS ZERO FOR INPUT ONLY.
PUTSCRN  XC    SCRNPA2A(16),SCRNPA2A  FORGET PREVIOUS DETAIL SCREENS.
         BAS   R14,SCREENIO      CALL SCREEN I/O HANDLER.
         TM    MODESW2,XFLG      SUBROUTINE EXIT REQUIRED?
         BZ    NOTEXIT           NO, PROCESS SUBCOMMAND.
         OI    MODESW,BTMP       SIGNAL BITMAP NEEDS CLEARING.
         BR    R9                RETURN TO MAINLINE VIA SCREENIO.
NOTEXIT  CLI   INCHARS,C' '      ANY INPUT YET?
         BE    REDOMENU          NO, ASK FOR SOME AGAIN.
         TM    MODESW2,CLNF      WAS BITMAP SHOWN?
         BNO   EXAMINEC          NO, RETURN TO MAINLINE.
         OI    MODESW,BTMP       YES, SIGNAL BITMAP NEEDS CLEARING.
         NI    MODESW2,255-CLNF  CLEANUP NOW PERFORMED.
         B     EXAMINEC          RETURN TO MAINLINE.
GIVEHELP MVC   INBUFF,BLANKS     SIMULATE PRIMARY INPUT AREA COMMAND.
         MVI   INBUFF,X'7D'      SUPPLY AID FOR ENTER.
         MVI   INBUFF+3,X'11'    SUPPLY SBA FOR INPUT FIELD.
         MVI   TGETLEN+1,10      SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            REGISTER 0 IS NEGATIVE FOR PARSE ONLY.
         B     PUTSCRN
         SPACE
         DROP  R11,R13           MAINMENU, GOTAREA.
         TITLE 'MAIN MENU DISPLAY - VARIABLES AND CONSTANTS'
OPTNPOSI DC    H'0'              SCREEN BUFFER ADDRESS OF NEXT ENTRY.
INITPOSI DC    AL2(2*80+4)       SCREEN ADDRESS OF FIRST MENU ENTRY.
OPTXLATE DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'40'-X'4F'.
         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0)       X'50'-X'5F'.
         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'60'-X'6F'.
         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0)       X'70'-X'7F'.
         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'80'-X'8F'.
         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'90'-X'9F'.
         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'A0'-X'AF'.
         DC    AL1(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)        X'B0'-X'BF'.
         DC    AL1(0,1,2,3,4,5,6,7,0,0,0,0,0,0,0,0)        _ABCDEFG__
         DC    AL1(0,8,9,10,11,12,13,14,0,15,0,0,0,0,0,0)  _JKLMNOP_R
         DC    AL1(0,0,16,17,18,19,0,0,0,0)                __STUV____
         DS    0F
OPTTABLE DC    A(OPTA),A(OPTB-OPTA)
         DC    A(OPTB),A(OPTC-OPTB)
         DC    A(OPTC),A(OPTD-OPTC)
         DC    A(OPTD),A(OPTE-OPTD)
         DC    A(OPTE),A(OPTF-OPTE)
         DC    A(OPTF),A(OPTG-OPTF)
         DC    A(OPTG),A(OPTJ-OPTG)
         DC    A(OPTJ),A(OPTK-OPTJ)
         DC    A(OPTK),A(OPTL-OPTK)
         DC    A(OPTL),A(OPTM-OPTL)
         DC    A(OPTM),A(OPTN-OPTM)
         DC    A(OPTN),A(OPTO-OPTN)
         DC    A(OPTO),A(OPTP-OPTO)
         DC    A(OPTP),A(OPTR-OPTP)
         DC    A(OPTR),A(OPTS-OPTR)
         DC    A(OPTS),A(OPTT-OPTS)
         DC    A(OPTT),A(OPTU-OPTT)
         DC    A(OPTU),A(OPTV-OPTU)
         DC    A(OPTV),A(OPTX-OPTV)
         DC    A(OPT$),A(OPT@-OPT$)
         DC    A(OPT@),A(OPTA-OPT@)
         LTORG
