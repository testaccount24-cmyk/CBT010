Greg:

The following attachment contains the swap code module.  It is in object
module format, so perform the following steps and it should work fine.
1. FTP upload the file to MVS in binary format into an FB, LRECL 80 object
library.
2. Link edit the object module and assign the resultant load module the
    following attributes: AC(1), RENT, REUS.
If you want to test before invoking from IMON, you can put the load mod in
an authorized library and run it as a batch job.  That is how I tested it.
Also, IMSWAP returns control to the caller with the psw restored to the
original state, meaning that things like amode, program state, psw key and
registers are restored to what they were when my code was entered.  I
accomplish this by using the BAKR intsruction and the linkage stack, so I
guess that means this code would not work on an MVS released before V3 or
something like that.


The following text documents the input parm list format etc.

Upon entry to the IMSWAP module (or whatever you call it), R1 must point to
the address of a parmlist formatted as follows:
PARMLIST DS   0CL14
PARM1      DS   CL1 ("S"=SWAP, "D"=DONTSWAP)
PARM2      DS   CL1 ("J"=JOBNAME, "A"=ASID)
PARM3      DS   CL8 (jobname)
PARM4      DS   CL4 (asid)

PARM1 must be either "S" or "D" and specifies the request type.
PARM2 must be either "J" or "A" and specifies whether a jobname
or asid is being used to identify the address space that is to be
made swappable or non-swappable.
PARM3 must contain a jobname if PARM2 specified "J".  The jobname must be
left-justified and blank padded on the right.

PARM4 must contain a hexadecimal asid if PARM2 specified "A".  The asid
must
must be right-justified and padded with zeros on the left.

A typical sequence of instructions from the calling module would be:

                    LA       R1,PARMADDR             Set  parm list address
pointer
                    L         R15,=V(IMSWAP)          Set swap module entry
point
                    BALR  R14,R15                        Branch to swap
module
                    LTR     R15,R15                        Test return code
                    BNZ     ERROR                         Error if rc not
zero

PARMADDR  DC    A(PARMLIST)

PARMLIST    DS    0CL14

PARM1         DC    CL1'D'          Make address space non-swappable

PARM2         DC    CL1'J'           Identify address space by jobname

PARM3         DC    CL8'CB7485'  Jobname of CB7485 (my TSO userid)

PARM4         DC    CL4'      '      PARM4 not used in this case

or another example:
PARMADDR  DC    A(PARMLIST)

PARMLIST    DS    0CL14

PARM1         DC    CL1'S'          Make address space swappable

PARM2         DC    CL1'A'           Identify address space by asid

PARM3         DC    CL8'            '  PARM3 not used in this case

PARM4         DC    CL4'01CE'      Asid of 1CE

Regarding the return code, the IMSWAP module returns an rc of 0 if
everything worked ok.  If the requested fucntion could not be successfully
completed, the caller gets a return code of 12.  Since you will verify the
asid before calling my code, there should not be that many error
situations.  However, if it would be desirable for you to receive more
detailed information about an error, I could return and document different
return codes for various error situations.  That way, you could issue a
more descriptive message to the IMON user.  Just let me know.

Please let me know how it works when you get the chance to test.  Or if you
have questions or problems, just holler (electronically, of course).
Enjoy!

Regards,
Bob

bbreak@swbell.net
