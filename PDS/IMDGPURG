IMDGPURG TITLE 'IMP DATA GATHERER - PURGE OLDEST ENTRIES'
*        COPYRIGHT (C) 1998  PRYCROFT SIX PTY LTD
*
*        DGBASE ADDRESS IN R1 UPON ENTRY.
*        DGPURGDT UPDATED UPON EXIT.
*
         SPACE 2
************************************************************
*                                                          *
*         ENTRY AND INITIALIZATION                         *
*                                                          *
************************************************************
         SPACE
IMDGPURG CSECT
IMDGPURG AMODE 31
IMDGPURG RMODE 24
         USING IMDGPURG,R15
         B     PRGSTART           BRANCH AROUND HEADER.
         DC    AL1(47)
         DC    CL47'IMDGPURG COPYRIGHT (C) 1998 PRYCROFT SIX P/L   '
PURGSAVE DC    16F'0'
PRGSTART STM   R0,R15,PURGSAVE    SAVE REGISTERS.
         LR    R12,R15            COPY BASE REGISTER.
         LA    R11,2048(,R12)
         LA    R11,2048(,R11)     LOAD SECOND BASE REGISTER.
         DROP  R15                IMDGPURG.
         USING IMDGPURG,R12,R11
         LR    R2,R1              POINT TO BASE ENTRY.
         USING DGBASE,R2
         SPACE 2
************************************************************
*                                                          *
*         DETERMINE NEW PURGE DATE                         *
*                                                          *
************************************************************
         SPACE
         OI    DGPURGDT,X'90'     SET PURGE DATE HIGH.
         L     R3,DGFSTSYS        POINT TO FIRST SYSTEM.
         USING DGSYSTEM,R3
PGSYSLP1 LTR   R3,R3              END OF SYSTEM CHAIN?
         BZ    PGSYSOK1           YES.
         ICM   R4,15,DGFSTINT     POINT TO FIRST INTERVAL ENTRY.
         BZ    PGINTOK1           SYSTEM HAS NO INTERVAL ENTRIES.
         USING DGRMFINT,R4
         CLC   DGPURGDT,DGINTDAT  NEW LOW DATE?
         BNH   PGINTOK1           NO.
         MVC   DGPURGDT,DGINTDAT  YES.
         DROP  R4                 DGRMFINT.
PGINTOK1 L     R3,DGSYSNXT        POINT TO NEXT SYSTEM ENTRY.
         B     PGSYSLP1
         DROP  R3                 DGSYSTEM.
PGSYSOK1 ICM   R3,15,DGFSTDSE     POINT TO FIRST DATA SET EVENT.
         BZ    PGDSEOK1           THERE ARE NO DATA SET EVENTS.
         USING DGDSEVNT,R3
         CLC   DGPURGDT,DGDSEDAT  NEW LOW DATE?
         BNH   PGDSEOK1           NO.
         MVC   DGPURGDT,DGDSEDAT  YES.
         DROP  R3                 DGDSEVNT.
PGDSEOK1 ICM   R3,15,DGFSTJSE     POINT TO FIRST JOB STEP EVENT.
         BZ    PGJSEOK1           THERE ARE NO JOB STEP EVENTS.
         USING DGJSEVNT,R3
         CLC   DGPURGDT,DGJSEDAT  NEW LOW DATE?
         BNH   PGJSEOK1           NO.
         MVC   DGPURGDT,DGJSEDAT  YES.
         DROP  R3                 DGJSEVNT.
         SPACE 2
************************************************************
*                                                          *
*         PURGE OLDEST PERFORMANCE DATA                    *
*                                                          *
************************************************************
         SPACE
PGJSEOK1 L     R3,DGFSTSYS        POINT TO FIRST SYSTEM.
         USING DGSYSTEM,R3
PGSYSLP2 LTR   R3,R3              END OF SYSTEM CHAIN?
         BZ    PGSYSOK2           YES.
         L     R4,DGFSTINT        POINT TO FIRST INTERVAL ENTRY.
         USING DGRMFINT,R4
PGINTLP2 LTR   R4,R4              ANY INTERVAL HERE?
         BZ    PURGESYS           NO, DELETE SYSTEM ENTRY.
         CLC   DGPURGDT,DGINTDAT  PURGE THIS INTERVAL?
         BL    PGINTOK2           NO.
         L     R5,DGFSTPGN        POINT TO FIRST ENTRY ADDRESS.
         USING DGPRFGRP,R5
PGNXTPRF LTR   R1,R5              GET ADDRESS OF THIS ENTRY.
         BZ    PGPRFGON           ALL ENTRIES GONE.
         LA    R15,DGPERLEN       GET LENGTH OF PERIOD SECTION.
         M     R14,DGPRFPER       GET LENGTH OF ALL PERIOD SECTIONS.
         LA    R0,DGPRFLEN(,R15)  GET LENGTH OF P.G. ENTRY.
         L     R5,DGPRFNXT        POINT TO NEXT ENTRY.
         FREEMAIN RU,LV=(0),A=(1),SP=23
         B     PGNXTPRF           GO PURGE THE NEXT ONE.
         DROP  R5                 DGPRFGRP.
PGPRFGON ST    R5,DGFSTPGN        NO FIRST ENTRY.
         ST    R5,DGLSTPGN        NO LAST ENTRY.
         L     R5,DGFSTCHN        POINT TO FIRST ENTRY ADDRESS.
         USING DGCHPID,R5
PGNXTCHN LTR   R1,R5              GET ADDRESS OF THIS ENTRY.
         BZ    PGCHNGON           ALL ENTRIES GONE.
         LA    R15,DGCHPLEN       GET LENGTH OF CHPID SECTION.
         M     R14,DGCHNNUM       GET LENGTH OF ALL CHPID SECTIONS.
         LA    R0,DGCHNLEN(,R15)  GET LENGTH OF CHANNEL ENTRY.
         L     R5,DGCHNNXT        POINT TO NEXT ENTRY.
         FREEMAIN RU,LV=(0),A=(1),SP=23
         B     PGNXTCHN           GO PURGE THE NEXT ONE.
         DROP  R5                 DGCHPID.
PGCHNGON ST    R5,DGFSTCHN        NO FIRST ENTRY.
         ST    R5,DGLSTCHN        NO LAST ENTRY.
         L     R5,DGFSTDEV        POINT TO FIRST ENTRY ADDRESS.
         USING DGDEVICE,R5
PGNXTDEV LTR   R1,R5              GET ADDRESS OF THIS ENTRY.
         BZ    PGDEVGON           ALL ENTRIES GONE.
         LA    R0,DGDEVLEN        GET LENGTH OF DEVICE ENTRY.
         L     R5,DGDEVNXT        POINT TO NEXT ENTRY.
         FREEMAIN RU,LV=(0),A=(1),SP=23
         B     PGNXTDEV           GO PURGE THE NEXT ONE.
         DROP  R5                 DGDEVICE.
PGDEVGON ST    R5,DGFSTDEV        NO FIRST ENTRY.
         ST    R5,DGLSTDEV        NO LAST ENTRY.
         L     R5,DGFSTPAG        POINT TO FIRST ENTRY ADDRESS.
         USING DGPAGEDS,R5
PGNXTPAG LTR   R1,R5              GET ADDRESS OF THIS ENTRY.
         BZ    PGPAGGON           ALL ENTRIES GONE.
         LA    R0,DGPAGLEN        GET LENGTH OF PAGE DATA SET ENTRY.
         L     R5,DGPAGNXT        POINT TO NEXT ENTRY.
         FREEMAIN RU,LV=(0),A=(1),SP=23
         B     PGNXTPAG           GO PURGE THE NEXT ONE.
         DROP  R5                 DGPAGEDS.
PGPAGGON ST    R5,DGFSTPAG        NO FIRST ENTRY.
         ST    R5,DGLSTPAG        NO LAST ENTRY.
         LA    R6,DGFSTINT        POINT TO RMF INTERVAL ANCHORS.
         LA    R7,DGINTLEN        GET RMF INTERVAL ENTRY LENGTH.
         BAS   R8,PURGITEM        PURGE THIS INTERVAL ENTRY.
         B     PGINTLP2           PROCESS NEXT INTERVAL.
         DROP  R4                 DGRMFINT.
         SPACE
PURGESYS L     R5,DGFSTPG#        POINT TO FIRST ENTRY ADDRESS.
         USING DGPG#ENT,R5
PGNXTPG# LTR   R1,R5              GET ADDRESS OF THIS ENTRY.
         BZ    PGPG#GON           ALL ENTRIES GONE.
         LA    R0,DGPG#LEN        GET LENGTH OF THE ENTRY.
         L     R5,DGPG#NXT        POINT TO NEXT ENTRY.
         FREEMAIN RU,LV=(0),A=(1),SP=23
         B     PGNXTPG#           GO PURGE THE NEXT ONE.
         DROP  R5                 DGPG#ENT.
PGPG#GON ST    R5,DGFSTPG#        NO FIRST ENTRY.
         ST    R5,DGLSTPG#        NO LAST ENTRY.
         L     R5,DGFSTCH#        POINT TO FIRST ENTRY ADDRESS.
         USING DGCH#ENT,R5
PGNXTCH# LTR   R1,R5              GET ADDRESS OF THIS ENTRY.
         BZ    PGCH#GON           ALL ENTRIES GONE.
         LA    R0,DGCH#LEN        GET LENGTH OF THE ENTRY.
         L     R5,DGCH#NXT        POINT TO NEXT ENTRY.
         FREEMAIN RU,LV=(0),A=(1),SP=23
         B     PGNXTCH#           GO PURGE THE NEXT ONE.
         DROP  R5                 DGCH#ENT.
PGCH#GON ST    R5,DGFSTCH#        NO FIRST ENTRY.
         ST    R5,DGLSTCH#        NO LAST ENTRY.
         L     R5,DGFSTDV#        POINT TO FIRST ENTRY ADDRESS.
         USING DGDV#ENT,R5
PGNXTDV# LTR   R1,R5              GET ADDRESS OF THIS ENTRY.
         BZ    PGDV#GON           ALL ENTRIES GONE.
         LA    R0,DGDV#LEN        GET LENGTH OF THE ENTRY.
         L     R5,DGDV#NXT        POINT TO NEXT ENTRY.
         FREEMAIN RU,LV=(0),A=(1),SP=23
         B     PGNXTDV#           GO PURGE THE NEXT ONE.
         DROP  R5                 DGDV#ENT.
PGDV#GON ST    R5,DGFSTDV#        NO FIRST ENTRY.
         ST    R5,DGLSTDV#        NO LAST ENTRY.
         L     R5,DGFSTPDN        POINT TO FIRST ENTRY ADDRESS.
         USING DGPDNENT,R5
PGNXTPDN LTR   R1,R5              GET ADDRESS OF THIS ENTRY.
         BZ    PGPDNGON           ALL ENTRIES GONE.
         LA    R0,DGPDNLEN        GET LENGTH OF THE ENTRY.
         L     R5,DGPDNNXT        POINT TO NEXT ENTRY.
         FREEMAIN RU,LV=(0),A=(1),SP=23
         B     PGNXTPDN           GO PURGE THE NEXT ONE.
         DROP  R5                 DGPDNENT.
PGPDNGON ST    R5,DGFSTPDN        NO FIRST ENTRY.
         ST    R5,DGLSTPDN        NO LAST ENTRY.
         LR    R4,R3              POINT TO SYSTEM ENTRY TO PURGE.
         LA    R6,DGFSTSYS        POINT TO SYSTEM ENTRY ANCHORS.
         LA    R7,DGSYSLEN        GET SYSTEM ENTRY LENGTH.
         BAS   R8,PURGITEM        PURGE THIS SYSTEM ENTRY.
         LR    R3,R4              POINT TO NEXT SYSTEM ENTRY.
         B     PGSYSLP2           PROCESS IT.
PGINTOK2 L     R3,DGSYSNXT        POINT TO THE NEXT SYSTEM ENTRY.
         B     PGSYSLP2           PROCESS IT.
         DROP  R3                 DGSYSTEM.
         SPACE 2
************************************************************
*                                                          *
*         PURGE DATA SET EVENT DATA                        *
*                                                          *
************************************************************
         SPACE
PGSYSOK2 L     R3,DGFSTDSE        POINT TO FIRST DATA SET EVENT.
         USING DGDSEVNT,R3
PGDSELP2 LTR   R3,R3              END OF DSE CHAIN?
         BZ    PGDSEOK2           YES.
         CLC   DGPURGDT,DGDSEDAT  PURGE THIS EVENT?
         BL    PGDSEOK2           NO.
         L     R6,DGDSENAM        YES, POINT TO OWNING DATA SET ENTRY.
         USING DGDATAST,R6
         SLR   R0,R0              GET ZERO.
         ICM   R5,15,DGDSEDSN     POINT TO THE NEXT ENTRY.
         BZ    PURGEDSN           PURGING THE LAST ENTRY.
         DROP  R3                 DGDSEVNT.
         USING DGDSEVNT,R5
         ST    R0,DGDSEDSP        ZERO NEW FIRST'S BACK POINTER.
         ST    R5,DGDSNDSF        UPDATE POINTER TO FIRST ENTRY.
         DROP  R5                 DGDSEVNT.
         ICM   R0,15,DGDSNDS#     GET ENTRY COUNTER AFTER ANCHORS.
         BNP   PGDSDSOK           AVOID GOING NEGATIVE.
         BCTR  R0,0               DECREMENT.
         ST    R0,DGDSNDS#        SAVE THE UPDATED COUNTER.
         B     PGDSDSOK           DO NOT PURGE DATA SET NAME ENTRY.
PURGEDSN ST    R0,DGDSNDSF        NO FIRST ENTRY.
         ST    R0,DGDSNDSL        NO LAST ENTRY.
         ST    R0,DGDSNDS#        NO ENTRIES.
         DROP  R6                 DGDATAST.
         LR    R4,R6              POINT TO ENTRY TO PURGE.
         LA    R6,DGFSTDSN        POINT TO ENTRY ANCHORS.
         LA    R7,DGDSNLEN        GET ENTRY LENGTH.
         BAS   R8,PURGITEM        PURGE THIS DATA SET ENTRY.
         USING DGDSEVNT,R3
PGDSDSOK LR    R4,R3              POINT TO EVENT ENTRY TO PURGE.
         LA    R6,DGFSTDSE        POINT TO EVENT ENTRY ANCHORS.
         LA    R7,DGDSEL14        GET EVENT ENTRY LENGTH.
         CLI   DGDSETYP,14        GOT THE RIGHT LENGTH?
         BE    PGTHEDSE           YES.
         CLI   DGDSETYP,15        GOT THE RIGHT LENGTH?
         BE    PGTHEDSE           YES.
         CLI   DGDSETYP,127       GOT THE RIGHT LENGTH?
         BH    PGTHEDSE           YES.
         LA    R7,DGDSEL64        GET EVENT ENTRY LENGTH.
         CLI   DGDSETYP,64        GOT THE RIGHT LENGTH?
         BE    PGTHEDSE           YES.
         LA    R7,DGDSEL17        GET EVENT ENTRY LENGTH.
PGTHEDSE BAS   R8,PURGITEM        PURGE THIS DATA SET EVENT ENTRY.
         LR    R3,R4              POINT TO NEXT EVENT ENTRY.
         B     PGDSELP2           PROCESS IT.
         DROP  R3                 DGDSEVNT.
         SPACE 2
************************************************************
*                                                          *
*         PURGE JOB STEP EVENT DATA                        *
*                                                          *
************************************************************
         SPACE
PGDSEOK2 L     R3,DGFSTJSE        POINT TO FIRST JOB STEP EVENT.
         USING DGJSEVNT,R3
PGJSELP2 LTR   R3,R3              END OF JSE CHAIN?
         BZ    PGJSEOK2           YES.
         CLC   DGPURGDT,DGJSEDAT  PURGE THIS EVENT?
         BL    PGJSEOK2           NO.
         L     R6,DGJSEPGA        YES, POINT TO OWNING PROGRAM ENTRY.
         USING DGPROGRM,R6
         SLR   R0,R0              GET ZERO.
         ICM   R5,15,DGJSEPRN     POINT TO THE NEXT ENTRY.
         BZ    PURGEPGM           PURGING THE LAST ENTRY.
         DROP  R3                 DGJSEVNT.
         USING DGJSEVNT,R5
         ST    R0,DGJSEPRP        ZERO NEW FIRST'S BACK POINTER.
         ST    R5,DGPGMJSF        UPDATE POINTER TO FIRST ENTRY.
         DROP  R5                 DGJSEVNT.
         ICM   R0,15,DGPGMJS#     GET ENTRY COUNTER AFTER ANCHORS.
         BNP   PGJSPROK           AVOID GOING NEGATIVE.
         BCTR  R0,0               DECREMENT.
         ST    R0,DGPGMJS#        SAVE THE UPDATED COUNTER.
         B     PGJSPROK           DO NOT PURGE PROGRAM ENTRY.
PURGEPGM ST    R0,DGPGMJSF        NO FIRST ENTRY.
         ST    R0,DGPGMJSL        NO LAST ENTRY.
         ST    R0,DGPGMJS#        NO ENTRIES.
         DROP  R6                 DGPROGRM.
         LR    R4,R6              POINT TO ENTRY TO PURGE.
         LA    R6,DGFSTPGM        POINT TO ENTRY ANCHORS.
         LA    R7,DGPGMLEN        GET ENTRY LENGTH.
         BAS   R8,PURGITEM        PURGE THIS PROGRAM ENTRY.
         USING DGJSEVNT,R3
PGJSPROK L     R6,DGJSEJBA        POINT TO OWNING JOB ENTRY.
         USING DGJOB,R6
         SLR   R0,R0              GET ZERO.
         ICM   R5,15,DGJSEJBN     POINT TO THE NEXT ENTRY.
         BZ    PURGEJOB           PURGING THE LAST ENTRY.
         DROP  R3                 DGJSEVNT.
         USING DGJSEVNT,R5
         ST    R0,DGJSEJBP        ZERO NEW FIRST'S BACK POINTER.
         ST    R5,DGJOBJSF        UPDATE POINTER TO FIRST ENTRY.
         DROP  R5                 DGJSEVNT.
         ICM   R0,15,DGJOBJS#     GET ENTRY COUNTER AFTER ANCHORS.
         BNP   PGJSJBOK           AVOID GOING NEGATIVE.
         BCTR  R0,0               DECREMENT.
         ST    R0,DGJOBJS#        SAVE THE UPDATED COUNTER.
         B     PGJSJBOK           DO NOT PURGE JOB ENTRY.
PURGEJOB ST    R0,DGJOBJSF        NO FIRST ENTRY.
         ST    R0,DGJOBJSL        NO LAST ENTRY.
         ST    R0,DGJOBJS#        NO ENTRIES.
         DROP  R6                 DGJOB.
         LR    R4,R6              POINT TO ENTRY TO PURGE.
         LA    R6,DGFSTJOB        POINT TO ENTRY ANCHORS.
         LA    R7,DGJOBLEN        GET ENTRY LENGTH.
         BAS   R8,PURGITEM        PURGE THIS JOB ENTRY.
PGJSJBOK LR    R4,R3              POINT TO EVENT ENTRY TO PURGE.
         LA    R6,DGFSTJSE        POINT TO EVENT ENTRY ANCHORS.
         LA    R7,DGJSELEN        GET EVENT ENTRY LENGTH.
         BAS   R8,PURGITEM        PURGE THIS JOB STEP EVENT ENTRY.
         LR    R3,R4              POINT TO NEXT EVENT ENTRY.
         B     PGJSELP2           PROCESS IT.
         SPACE 2
************************************************************
*                                                          *
*         TERMINATION AND EXIT                             *
*                                                          *
************************************************************
         SPACE
PGJSEOK2 LM    R0,R15,PURGSAVE    RESTORE REGISTERS.
         BR    R14                RETURN TO CALLER.
         DROP  R2                 DGBASE.
         SPACE 2
************************************************************
*                                                          *
*         PURGE AN ENTRY ON A CHAIN                        *
*                                                          *
************************************************************
*                                                          *
*        R4 = ADDRESS OF ENTRY TO PURGE.                   *
*        R5 = ADDRESS OF NEXT/PREVIOUS ENTRIES (WORK).     *
*        R6 = ENTRY CHAIN ANCHORS (FIRST/LAST/COUNT).      *
*        R7 = LENGTH OF ENTRY TO PURGE.                    *
*        R8 = RETURN ADDRESS.                              *
*                                                          *
*  ASSUMPTION:  NEXT/PREVIOUS POINTERS AT START OF ENTRY.  *
*                                                          *
************************************************************
         SPACE
PURGITEM ICM   R5,15,4(R4)        POINT TO THE PREVIOUS ENTRY.
         BZ    PGDELFST           PURGING THE FIRST ENTRY.
         MVC   0(4,R5),0(R4)      COPY NEXT POINTER TO PREVIOUS.
         B     PGDELPRV           PREVIOUS ENTRY NOW UPDATED.
PGDELFST MVC   0(4,R6),0(R4)      COPY NEXT POINTER TO FIRST POINTER.
PGDELPRV ICM   R5,15,0(R4)        POINT TO THE NEXT ENTRY.
         BZ    PGDELLST           PURGING THE LAST ENTRY.
         MVC   4(4,R5),4(R4)      COPY PREVIOUS POINTER TO NEXT.
         B     PGDELNXT           NEXT ENTRY NOW UPDATED.
PGDELLST MVC   4(4,R6),4(R4)      COPY PREV POINTER TO LAST POINTER.
PGDELNXT ICM   R0,15,8(R6)        GET ENTRY COUNTER AFTER ANCHORS.
         BNP   PGDELCNT           AVOID GOING NEGATIVE.
         BCTR  R0,0               DECREMENT.
         ST    R0,8(,R6)          SAVE THE UPDATED COUNTER.
PGDELCNT FREEMAIN RU,LV=(R7),A=(R4),SP=23
         LR    R4,R5              POINT TO THE NEXT ENTRY.
         BR    R8                 RETURN TO CALLER.
         SPACE 2
************************************************************
*                                                          *
*         CONSTANTS AND VARIABLES                          *
*                                                          *
************************************************************
         SPACE
         LTORG
         SPACE 2
************************************************************
*                                                          *
*         DSECTS AND EQUATES                               *
*                                                          *
************************************************************
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         COPY  IMGATDAT
         SPACE 2
         END   IMDGPURG
