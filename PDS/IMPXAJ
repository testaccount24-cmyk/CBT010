*        COPYRIGHT (C) 1986,1994,2012,2016  PRYCROFT SIX PTY LTD
         TITLE 'JOB STATUS MONITOR DISPLAY LINE MAPPING'
JOBDTLS  DSECT
JOBCOLOR DS    CL9
JOBNAME  DS    CL8
         DS    CL1
JOBASID  DS    CL4
         DS    CL2
PRTY     DS    CL4
         DS    CL1
TCBTIME  DS    CL13
         DS    CL1
SRBTIME  DS    CL13
         DS    CL1
REALMEM  DS    CL6
         DS    CL2
FRAMESCT DS    CL6
         DS    CL1
SLOTS    DS    CL6
         DS    CL1
IOCTIME  DS    CL9
         SPACE
ASCDTLS  DSECT
ASCCOLOR DS    CL9
ASCSYNC  DS    CL10
ASCCPUS  DS    CL6
         DS    CL2
ASCAFFN  DS    CL4
         DS    CL2
ASCNDSP  DS    CL4
ASCSRBS  DS    CL6
ASCSSRB  DS    CL6
         DS    CL2
ASCLOCK  DS    CL8
         DS    CL2
ASCLOCI  DS    CL8
ASCCMLC  DS    CL6
         DS    CL2
ASCSMCT  DS    CL4
         DS    CL3
ASCIODP  DS    CL2
         SPACE
ASSDTLS  DSECT
ASSCOLOR DS    CL9
ASSREUS  DS    CL3
ASSNSTNC DS    CL12
         DS    CL2
ASSLASID DS    CL4
         DS    CL1
ASSLADDR DS    CL8
ASRMEMLM DS    CL12
ASRMSCL1 DS    CL1
ASRMSCL2 DS    CL1
         DS    CL1
ASRMLSRC DS    CL4
         DS    CL22
ASRPGMNM DS    CL8
         SPACE
RAXDTLS  DSECT
RAXCOLOR DS    CL9
ESTORMEM DS    CL6
         DS    CL2
ESTORECT DS    CL6
         DS    CL2
EHIPRMEM DS    CL6
         DS    CL1
EHIPERCT DS    CL6
ISOQOMEM DS    CL8
ISOQOSCL DS    CL1
ISOQOTCT DS    CL6
         DS    CL1
DATSPMEM DS    CL6
         DS    CL1
DATSPCCT DS    CL6
         DS    CL1
EDSHWMEM DS    CL6
         DS    CL1
EDSHWMCT DS    CL6
         DS    CL2
ESTORSWP DS    CL5
         SPACE
SRVDTLS  DSECT
SRVCOLOR DS    CL9
VIOXPMEM DS    CL6
VIOXPSCL DS    CL1
VIOXPCNT DS    CL6
         DS    CL2
SRVSBSYS DS    CL4
SRVCPU   DS    CL12
SRVIOC   DS    CL12
SRVMSO   DS    CL12
SRVSRB   DS    CL12
SRVTOTAL DS    CL12
         SPACE
OUCBDTLS DSECT
OUCCOLOR DS    CL9
OUCBLINE DS    CL1
RDYTASKS DS    CL6
WRKGSTSZ DS    CL6
         DS    CL2
TRANNAME DS    CL8
         DS    CL1
TRANCLAS DS    CL8
PERFPERD DS    CL1
         DS    CL1
SRVCCLAS EQU   *+1,8
PERFGRPN DS    CL4
         DS    CL1
DMNUMBER DS    CL4
         DS    CL4
NEWDISPR DS    CL2
         DS    CL4
CPULIMIT DS    CL8
         DS    CL2
SWAPCODE DS    CL16
         SPACE
DSPCDTLS DSECT
DSPCOLOR DS    CL9
DSPCNAME DS    CL8
         DS    CL2
DSPCSTKN DS    CL16
         DS    CL1
DSPCSCOP DS    CL6
         DS    CL2
DSPCKEY  DS    CL1
         DS    CL2
DSPCPROT DS    CL3
         DS    CL2
DSPCOTCB DS    CL6
         DS    CL2
DSPCRANG DS    CL8
         DS    CL2
DSPCORIG DS    CL4
         DS    CL4
DSPCMXPG DS    CL8
         DS    CL2
         SPACE
TCBDTLS  DSECT
TCBCOLOR DS    CL9
CRNTFLG  DS    CL2
JSLBL    DS    CL2
TCBLBL   DS    CL3
         DS    CL1
TCBADDR  DS    CL6
         DS    CL2
CMPLBL   DS    CL3
         DS    CL1
TCBCOMP  DS    CL8
         DS    CL2
KEYLBL   DS    CL3
         DS    CL1
TCBKEY   DS    CL1
         DS    CL2
PRTYLBL  DS    CL4
         DS    CL1
TCBPRTY  DS    CL4
         DS    CL2
OTCLBL   DS    CL3
         DS    CL1
OTCADDR  DS    CL6
         DS    CL2
TCBSTAT  DS    CL5
         DS    CL1
JTCBCPU  DS    CL13
         SPACE
TCBDTLS2 DSECT
TCBCOLR2 DS    CL9
TCBLIN2  DS    CL7
TCBIDNT  DS    CL7
         DS    CL2
TCBTEST  DS    CL8
         DS    CL1
TCBTACT  DS    CL6
         DS    CL3
JTCBSVCS DS    CL13
         DS    CL2
TCBRUN   DS    CL14
TCBPROC  DS    CL1
         DS    CL2
SMCSTAT  DS    CL3
         DS    CL2
JTCBTERM DS    CL5
         DS    CL3
         SPACE
RBDTLS   DSECT
RBCOLOR  DS    CL9
RBDTL    DS    CL4
RBLBL    DS    CL4
         DS    CL1
RBADDR   DS    CL6
         DS    CL2
RBPSWLBL DS    CL3
         DS    CL2
RBPSW1   DS    CL8
         DS    CL1
RBPSW2   DS    CL8
         DS    CL2
RBWTLBL  DS    CL4
         DS    CL1
RBWAITCT DS    CL1
         DS    CL2
RBFLGSLB DS    CL4
         DS    CL1
RBFLGS   DS    CL2
         DS    CL2
RBLICLBL DS    CL3
         DS    CL1
RBILC    DS    CL1
         DS    CL1
RBINTC   DS    CL4
         DS    CL3
MODULE   DS    CL8
         SPACE
STEPDTLS DSECT
STPCOLOR DS    CL9
STEPNJOB DS    CL8
         DS    CL2
STEPSTEP DS    CL8
         DS    CL2
STEPPROC DS    CL8
         DS    CL1
STEPNMBR DS    CL4
         DS    CL2
STEPAPF  DS    CL3
         DS    CL2
STEPPASS DS    CL3
XCPTOTAL DS    CL12
         DS    CL1
REGNSIZE DS    CL8
REGIONK  DS    CL1
         DS    CL1
STPTPUTS DS    CL6
         DS    CL1
STPTGETS DS    CL6
         SPACE
TIOTDTLS DSECT
TIOCOLOR DS    CL9
TIODDNAM DS    CL8
*  BEFORE FINAL FORMAT
TIOFFSET DS    CL2
TIOUCBS4 DS    CL4
TIOUCBS3 EQU   *-3,3
*  AFTER FINAL FORMAT
         ORG   TIOFFSET
TIOFILL1 DS    CL1
TIOUCBNM DS    CL4
TIOFILL2 DS    CL1
*
TIOVOLUM DS    CL6
         ORG   *-1
TIOEXCPS DS    CL8
TIOBLKSZ DS    CL6
TIOODTLS DS    CL1
TIODSN   DS    CL52
         ORG   TIOODTLS
TIOLRECL DS    CL6
         DS    CL1
TIOACCES DS    CL5
         DS    CL1
TIODSORG DS    CL3
TIOBUFNO DS    CL4
         DS    CL1
TIOMBCHR DS    CL16
         DS    CL1
TIOTTRN  DS    CL8
         ORG
         SPACE
         IEFZB505 LOCEPAX=YES    SWAREQ EXTERNAL PARAMETER AREA
         SPACE
DYNSWA   DSECT
SVSWAREQ DS    18F
SWEPAPTR DS    F
RL4SWA   DS    F
EPA      DS    XL28
SWAPARMS SWAREQ MF=L
         DS    0D
DYNSWALN EQU   *-DYNSWA
         TITLE 'IMDSPACE SUBROUTINE RETURNED AREAS'
         COPY  IMDSDATA
         TITLE 'JOB STATUS MONITOR SUBROUTINE'
IMPXA    CSECT
         USING JOBSTATS,R11,R10,R9
JOBSTATS DS    0H
         LA    R10,2048(,R11)    SET UP SECOND
         LA    R10,2048(,R10)                  BASE REGISTER.
         LA    R9,2048(,R10)     SET UP THIRD
         LA    R9,2048(,R9)                   BASE REGISTER.
**       TM    OSLEVEL,CVTH4410  SP4 OR LATER?
**       BNO   JOK1440           NO.
**       MVI   TIME1440+3,X'DE'  YES, ADD ONE TO 1440.
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   JOK1440           NO, FINAL FINISH.
*                                YES, SET TCT I/O COUNT ENTRY LENGTH.
         MVI   JTIOELEN+1,TCTDDLEN
JOK1440  CLI   STATSELF,C'?'     ALREADY INITIALIZED FOR THIS OPTION?
         BNE   JOBINITD          YES, DON'T DO IT AGAIN.
         L     R1,PSAAOLD        NO, POINT TO THE CURRENT ASCB.
         USING ASCB,R1
         UNPK  STATSELF(5),ASCBASID(3)
         TR    STATSELF,HEX-C'0' SHOW WHICH ASID '=' WILL GET.
         MVI   STATSELF+4,X'28'  TIDY UP.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    JOBINITD          NO, CAN'T GO SPYING.
         MODESET MF=(E,MDSET0)   CHECK THINGS OUT IN KEY ZERO.
         L     R1,PSAAOLD        POINT TO THE CURRENT ASCB.
         ICM   R3,15,ASCBTSB     POINT TO THE TSB.
         BZ    JNOTSB            THERE IS NONE SO SKIP THIS.
         USING TSB,R3
         L     R3,TSBEXTNT       POINT TO THE TSB EXTENSION.
         DROP  R3                TSB.
         USING TSBX,R3
         L     R3,TSBXTVWA       POINT TO THE TSO/VTAM WORK AREA.
         DROP  R3                TSBX.
         USING TVWA,R3
         L     R3,TVWACHOP       POINT TO 3270 OUTPUT DATA
*                                MANAGER'S OUTPUT CHARACTERS.
         DROP  R3                TVWA.
         BCTR  R3,0              POINT TO THE WRITE CONTROL CHARACTER.
         BCTR  R3,0              POINT TO THE VTAM WRITE COMMAND.
         ST    R3,TPUTADDR       ASSUME CONSTANT ACROSS TSU ASIDS.
         L     R1,ASCBLDA        POINT TO THE VSM LOCAL DATA AREA.
         DROP  R1                ASCB.
         USING LDA,R1
         L     R3,LDASTRTA       POINT TO ADDRESS SPACE REGION START.
         A     R3,LDASIZA        POINT TO AFTER REGION END.
         S     R3,TPTLNADR       POINT BACK INTO LSQA.
         ST    R3,TPTLNADR       SAVE TSO/VTAM USER TPUT LENGTH ADDR.
         DROP  R1                LDA.
JNOTSB   MODESET MF=(E,MDSETN0)  BACK TO USER KEY.
JOBINITD MVC   INCHARS(L'INCHARS-1),INCHARS+1
         MVI   INCHARS+L'INCHARS-1,C' '  ADJUST ANY COMMAND INPUT.
         B     CMDSCANJ          PROCESS IT.
         SPACE
REDOJOBS NI    JOBFLAGS,255-FOILED  RESET CROSS MEMORY FOILED FLAG.
         CLI   STATSJOB,C' '     ALREADY HAVE COMPLETE JOB NAME?
         BNH   LOCJOBNM          NO, GO PROMPT FOR COMPLETE JOB NAME.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.
         SLR   R0,R0
         ST    R0,WINLINES       RESET LINE COUNTER.
         DROP  R15               WNDWMNGR.
         XC    SAVETCB(72),SAVETCB  CLEAR TCB PLACE MARKER AND STACK.
         MVC   0(LL-79,R2),LOWX
         MVC   LL-79(8,R2),STATSJOB  LOAD IN THE TARGET NAME.
         MVI   LL-71(R2),C' '    BLANK THE REST OF THE DISPLAY LINE.
         MVC   LL-70(70,R2),LL-71(R2)
         L     R7,ASVTADDR       POINT TO ADDRESS SPACE VECTOR TABLE.
         USING ASVT,R7
         L     R8,ASVTMAXU       GET MAXUSER.
         LA    R7,ASVTENTY-4     POINT TO FIRST ASVT ENTRY - 4.
         CLC   STATSJOB(4),STARS REQUESTED NAME STARTS WITH ****?
         BNE   LOCASVTE          NO, ASSUME JOB NAME SPECIFIED.
         MVC   WORK,STATSJOB     YES, COPY THIS JOB "NAME".
         LA    R0,4              NAMED ASID MUST HAVE 4 HEX DIGITS.
         LA    R1,WORK+4         POINT TO FIRST HEX DIGIT.
         SLR   R15,R15           CLEAR A WORK REGISTER.
GETJASID CLI   0(R1),C'A'        VALID HEX DIGIT?
         BL    LOCASVTE          NO, TRY FOR FUNNY JOB NAME.
         CLI   0(R1),C'9'        VALID HEX DIGIT?
         BH    LOCASVTE          NO, TRY FOR FUNNY JOB NAME.  (???)
         CLI   0(R1),C'0'        NUMERIC HEX DIGIT?
         BNL   NXTASIDC          YES, VALID HEX DIGIT.
         CLI   0(R1),C'F'        ALPHABETIC HEX DIGIT?
         BH    LOCASVTE          NO, TRY FOR FUNNY JOB NAME.
         IC    R15,0(,R1)        YES, GET IT.
         LA    R15,X'FA'-C'A'(,R15)   CONVERT IT.
         STC   R15,0(,R1)        REPLACE IT.
NXTASIDC LA    R1,1(,R1)         POINT TO NEXT ASID DIGIT.
         BCT   R0,GETJASID       PROCESS IT.
         MVC   LL-79(4,R2),=C'ASID' INDICATE ASID REQUEST RECOGNITION.
         PACK  WORK(3),WORK+4(5) PACK INTO A HALFWORD.
         ICM   R15,B'0011',WORK  GET THE ASID.
         BZ    NOTJASID          ASID 0 IS INVALID.
         CR    R15,R8            LARGER THAN MAXUSER?
         BH    NOTJASID          YES, INVALID.
         SLL   R15,2             GET INDEX INTO ASVT.
         ALR   R7,R15            POINT TO SPECIFIED ASVT ENTRY.
         ICM   R3,15,0(R7)       POINT TO ASCB.
         BM    NOTJASID          ASID NOT ASSIGNED.
         B     LOCDASCB          HAVE NOW LOCATED THE REQUIRED ASCB.
LOCASVTE LA    R7,4(,R7)         POINT TO NEXT ENTRY.
         ICM   R3,15,0(R7)       POINT TO ASCB.
         BM    NXTASVTE          ASID NOT ASSIGNED.
         USING ASCB,R3
         ICM   R15,15,ASCBJBNI   GET JOBNAME POINTER.
         BNZ   LOCJNAME          BATCH JOB.
         ICM   R15,15,ASCBJBNS   GET JOBNAME POINTER.
         BNZ   LOCJNAME          HAVE POINTER.
         LA    R15,STARTING      NO POINTER, SO STARTING.
LOCJNAME CLC   STATSJOB,0(R15)   RIGHT JOB?
         BE    LOCDASCB          YES, LOCATED REQUESTED JOB.
NXTASVTE BCT   R8,LOCASVTE       GET NEXT ASVT ENTRY.
         DROP  R7                ASVT.
NOTJASID MVC   LL-70(30,R2),=CL30'IS NOT A CURRENT ADDRESS SPACE'
         TM    JOBFLAGS,SPY+WAIT SPY OR WAIT REQUEST ACTIVE?
         BZ    NOTSPY1           NO.
         MVC   LL-39(24,R2),=CL24'- WAIT REQUEST CANCELLED'
         TM    JOBFLAGS,SPY      WAIT REQUEST ACTIVE?
         BZ    NOTSPY1           NO.
SPYTERM1 MVC   LL-39(24,R2),=CL24'- SPY REQUEST TERMINATED'
SPYTERM2 NI    JOBFLAGS,255-SPY-WAIT   YES, DEACTIVATE IT.
NOTSPY1  BAS   R1,JADDLINE       LINE NOW COMPLETE.
         B     JOBSTEND
LOCDASCB TM    JOBFLAGS,SPY      SPY REQUEST ACTIVE?
         BZ    NOTSPY2           NO.
         ICM   R5,15,ASCBTSB     IS THIS A TSO USER?  (GOT A TSB?)
         BNZ   CHECK4ME          YES, GET SPYING.
         MVC   LL-70(17,R2),=CL17'IS NOT A TSO USER'
         MVC   LL-52(24,R2),=CL24'- SPY REQUEST TERMINATED'
         B     SPYTERM2          DISPLAY THIS MESSAGE.
CHECK4ME C     R3,PSAAOLD        SPYING ON SELF?
         BNE   DOSPYING          NO, GET SPYING.
         MVC   LL-70(30,R2),=CL30'SELF-CONTEMPLATION NOT ALLOWED'
         B     SPYTERM1          DISPLAY THIS MESSAGE.
DOSPYING MODESET MF=(E,MDSET0)   PREPARE TO LOOK AT TSB.
         L     R1,PSAAOLD        POINT TO THE CURRENT ASCB,
         L     R1,ASCBTSB-ASCB(,R1)    TO THIS USER'S TSB,
         L     R1,TSBEXTNT-TSB(,R1)    TO THIS USER'S TSBX,
         L     R5,TSBEXTNT-TSB(,R5)    TO THAT USER'S TSBX.
*                                GET THE SMALLER BUFFER SIZE.
         CLC   TSBXTMBF-TSBX(2,R1),TSBXTMBF-TSBX(R5)
         BNH   SPYSIZOK
         LR    R1,R5
SPYSIZOK LH    R1,TSBXTMBF-TSBX(,R1)
         CH    R1,SPYSCRN        ALTERNATE SCREEN REQUIRED?
         BNH   SPYSIZED          NO.
         ICM   R0,15,OLDLINES    YES, DO WE KNOW THE ALTERNATE SIZE?
         BZ    SPYSIZED          NO.
         STH   R1,SPYSCRN        YES.
         STSIZE SIZELOC=OLDCOLS,LINELOC=OLDLINES
         MVI   CLR+1,X'7E'       REPLACE ERASE/WRITE WITH E/W ALT.
         LA    R1,CLR            PREPARE FOR THE
         LA    R0,L'CLR             FULL SCREEN
         ICM   R1,B'1000',TPUTFLG      TPUT TO
         TPUT  (1),(0),R                  CLEAR THE SCREEN.
SPYSIZED MODESET MF=(E,MDSETN0)  TSB DATA NOW PROCESSED.
         MVI   SPYDELAY+3,5      WAIT 1/20TH SEC IF PHYSICALLY OUT.
         L     R1,ASCBRSME       GET RAX POINTER.
         USING RAX,R1
         L     R1,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.
         DROP  R1                RAX.
         LTR   R1,R1             ZERO FRAMES FOR THIS ADDRESS SPACE?
         BZ    SPYWAIT           YES, GO WAIT A LITTLE WHILE.
         MVI   SPYDELAY+3,1      WAIT 1/100TH SEC IF PHYSICALLY IN.
         TM    ASCBRCTF,ASCBOUT  IS THIS ADDRESS SPACE SWAPPED OUT?
         BO    SPYWAIT           YES, GO WAIT A LITTLE WHILE.
*        MVI   SPYDELAY+3,1      WAIT 1/100TH OF A SEC IF SWAPPED IN.
         B     GOSPYING          NO, TRY TO SET SECONDARY A. S.
NOTSPY2  L     R5,=A(JASDTLS)    GET ADDRESS OF ASID HEADER ROUTINE.
         BR    R5                FORMAT GENERAL ADDRESS SPACE DETAILS.
         USING TCBDTLS,R2
GOSPYING DS    0H
         MODESET MF=(E,MDSTSUP0)
         ESTAE MF=(E,ESTAEONJ)
         SLR   R14,R14           USE KEY ZERO IN SASID.
         C     R3,PSAAOLD        LOOKING AT SELF?
         BE    SSAROKAY          YES.
         TM    JOBFLAGS,SPY      NEED TO LOOK AT FILES?
         BNZ   JCSAOK1           NO.
         TM    JOBFLAG2,NODD     NEED TO LOOK AT FILES?
         BNZ   JCSAOK1           NO.
         GETMAIN RU,LV=DYNSWALN,SP=241,LOC=(31,64)
         LARL  R14,SWAGLBL@      POINT TO ADDRESS SAVE AREA.
         ST    R1,0(R14)         SAVE THE GLOBAL AREA ADDRESS.
JCSAOK1  EQU   *
         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.
         STATUS SET,MC,STEP      STOP ALL OTHER TASKS.
         LA    R1,1              ADDRESS ALL AX NUMBER.
         AXSET AX=(1)            SET AX = 1.
         ST    R0,AXVALUE        SAVE ORIGINAL AX VALUE.
         TM    ASCBRCTF,ASCBOUT  IS THIS ADDRESS SPACE SWAPPED OUT?
         BZ    GETSASID          NO, GET THE SECONDARY ASID.
         OI    JOBFLAGS,FOILED   INDICATE FOILED AT THE LAST.
         B     XMFOILED          UNDO THE CROSS MEMORY STUFF.
GETSASID LH    R4,ASCBASID       GET TARGET ASID.
         TM    ASCBFLG3,ASCBREUS REUSABLE ADDRESS SPACE?
         BO    JUSEINST          YES, NEED TO GET INSTANCE NUMBER.
         SSAR  R4                MAKE TARGET JOB THE SECONDARY ASID.
         B     JSASOKAY
JUSEINST L     R14,ASCBASSB      POINT TO THE ASSB.
         USING ASSB,R14
         ICMH  R4,15,ASSBISQN    LOAD THE INSTANCE NUMBER.
         DROP  R14               ASSB.
         SSAIR R4                MAKE TARGET JOB THE SECONDARY ASID.
         SGR   R4,R4             CLEAR REGISTER HIGH HALF.
JSASOKAY SLR   R14,R14           USE KEY ZERO IN SASID.
         TM    JOBFLAGS,SPY      ARE WE ON A SPYING MISSION?
         BZ    SSAROKAY          NO, GO FORMAT SOME CONTROL BLOCKS.
***      L     R5,ASCBTSB        POINT TO THE TERMINAL STATUS BLOCK.
         USING TSB,R5
         TM    TSBFLG5,TSBSPF    IS SPF ACTIVE FOR THIS TERMINAL?
         BZ    DONEISPF          NO, ISPF IS NOT ACTIVE.
         DROP  R5                TSB.
         L     R4,ASCBASXB       GET TARGET ASXB ADDRESS.
         LA    R5,4              FOUR BYTES TO BE FETCHED.
*                                FETCH LAST TCB POINTER.
         MVCP  SECPNTR(R5),ASXBLTCB-ASXB(R4),R14
         L     R4,SECPNTR        POINT TO ISPF MAIN TASK CONTROL BLOCK.
*                                FETCH TCB LIMIT DP AND DP.
         MVCP  WORK(R5),TCBLMP-TCB-2(R4),R14
         CLI   WORK+3,X'FD'      EXPECTED DISPATCHING PRIORITY?
         BNE   DONEISPF          NO, ASSUME NOT ISPF MAIN TASK.
*                                FETCH LAST SUB-TASK TCB POINTER.
         MVCP  SECPNTR(R5),TCBLTC-TCB(R4),R14
         ICM   R4,15,SECPNTR     POINT TO ISPF SUB-TASK CONTROL BLOCK.
         BZ    DONEISPF          NO SUB-TASKS, PROBABLY NOT ISPF.
*                                FETCH CURRENT RB POINTER.
         MVCP  SECPNTR(R5),TCBRBP-TCB(R4),R14
         L     R4,SECPNTR        POINT TO CURRENT REQUEST BLOCK.
         MVCP  SECPNTR(R5),68(R4),R14 FETCH SAVED REGISTER 9 VALUE.
         ICM   R4,15,SECPNTR     LOAD REGISTER 9 VALUE.
         BNP   DONEISPF          EXPECT A POSITIVE ADDRESS.
         MVCP  SECPNTR(R5),0(R4),R14
         CLC   SECPNTR(3),=C'TLD'   TERMINAL LOGICAL DISPLAY AREA 1/2?
         BNE   DONEISPF          NO, FORGET ISPF SCREEN IMAGE FETCH.
         MVCP  SECPNTR(R5),32(R4),R14
         L     R4,SECPNTR        LOAD ISPTABLS ADDRESS.
         MVCP  SECPNTR(R5),336(R4),R14
         L     R4,SECPNTR        ASSUME ISPF VERSION 2.
         MVCP  SECPNTR(R5),32(R4),R14
         L     R4,SECPNTR        POINT TO ISPF LOGICAL SCREEN IMAGE.
         L     R5,WINMANAD       POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R5
         L     R2,WINBUFF        POINT TO DISPLAY AREA.
         DROP  R5                WNDWMNGR.
         LA    R5,3840           GET A NUMBER.
         SLL   R5,1              DOUBLE IT.
         LA    R2,3845(R5,R2)    PUT TO ISPF SCREEN TPUT BUFFER.
         LH    R5,SPYSCRN        GET TARGET SCREEN SIZE.
         SRL   R5,R4             DIVIDE BY SIXTEEN.
         LA    R0,16             LOAD NUMBER OF MOVES REQUIRED.
SPFFETCH MVCP  0(R5,R2),0(R4),R14     FETCH 240 BYTES FROM ISPF BUFFER.
         ALR   R2,R5             POINT TO NEXT TARGET AREA.
         ALR   R4,R5             POINT TO NEXT SOURCE AREA.
         BCT   R0,SPFFETCH       GO MOVE NEXT SIXTEENTH OF TLD.
         OI    JOBFLAG2,ISPF     REMEMBER ISPF BUFFER FETCH.
DONEISPF L     R5,WINMANAD       POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R5
         L     R2,WINBUFF        POINT TO DISPLAY AREA.
         DROP  R5                WNDWMNGR.
         LA    R0,15             15 X 256 = 3840 BYTES TO BE FETCHED.
         LA    R5,256            AMOUNT OF DATA TO BE FETCHED PER MOVE.
         L     R4,TPUTADDR       POINT TO TSO/VTAM WRITE BUFFER ORIGIN.
*        L     R1,0(,R2)         ENSURE TARGET IS PAGED IN.
*        L     R1,SECWORKA       ENSURE TARGET IS PAGED IN.
*        STNSM ENABINTS+1,X'04'  DISABLE I/O AND EXTERNAL INTERRUPTS.
SPYFETCH MVCP  0(R5,R2),0(R4),R14  FETCH 256 BYTES FROM TPUT BUFFER.
         ALR   R2,R5             POINT TO NEXT TARGET AREA.
         ALR   R4,R5             POINT TO NEXT SOURCE AREA.
         BCT   R0,SPYFETCH       GO GET NEXT 256 BYTES.
         LA    R5,4              ONLY FETCH FOUR BYTES NOW.
         L     R15,TPTLNADR      POINT TO TSO/VTAM SEND DATA LENGTH.
         MVCP  TPUTSIZE(R5),0(R15),R14  FETCH IT.
         L     R1,ASCBTSB        POINT TO THE TSB.
         L     R1,96(,R1)        POINT TO THE TSB EXTENSION.
         L     R1,36(,R1)        POINT TO THE TSO/VTAM WORK AREA.
         MVCP  SECPNTR(R5),76(R1),R14   GET INPUT MANAGER FRR WA ADDR.
         L     R1,SECPNTR        POINT TO INPUT MANAGER FRR WORK AREA.
         MVCP  TGETSIZE(R5),40(R1),R14  GET TSO/VTAM READ DATA LENGTH.
         MVCP  SECWORKA(R5),36(R1),R14  GET TSO/VTAM READ BUFFER ADDR.
         L     R15,SECWORKA      POINT TO TSO/VTAM READ BUFFER ORIGIN.
         LA    R5,256            FETCH 256 BYTES NOW.
         MVCP  SECWORKA(R5),0(R15),R14 GET FIRST 256 BYTES OF TGET BFR.
*NABINTS STOSM ENABINTS+1,X'07 ' ENABLE I/O AND EXTERNAL INTERRUPTS.
         B     UNSSAR            GET OUT OF CROSS-MEMORY MODE.
SSAROKAY TM    OSLEVEL,CVTJ4422  EARLIER THAN MVS/SP4.2.2?
         BNO   JNTPDONE          YES, NO NAME/TOKEN PAIRS.
         L     R6,ASCBASSB       NO, LOAD POINTER TO ASSB.
         USING ASSB,R6
         ICM   R6,15,ASSBNTTP    POINT TO NTT HEADER.
         BZ    JNTPDONE          NO NAME/TOKEN PAIRS.
         DROP  R6                ASSB.
         SLR   R4,R4             INDICATE ADDRESS-SPACE-LEVEL.
         BAS   R7,JNTTSHOW       SHOW NAME/TOKEN PAIRS.
         LR    R5,R2             POINT TO CURRENT DISPLAY LINE.
         AHI   R5,-LL            POINT TO PREVIOUS DISPLAY LINE.
         MVI   2(R5),X'F4'       UNDERSCORE.                    (I3279)
         MVI   5(R5),X'C4'       UNDERLINE.                     (F9526)
JNTPDONE L     R4,ASCBASXB       POINT TO ASXB.
         USING ASXB,R4
         LA    R5,4
         MVCP  TCBQUEUE(R5),ASXBFTCB,R14  COPY RCT ADDRESS.
         MVCP  PTR2IHSA(R5),ASXBIHSA,R14  COPY IHSA ADDRESS.
         DROP  R4                ASXB.
         L     R4,TCBQUEUE       POINT TO TCB QUEUE HEAD (RCT TCB).
         NI    JOBFLAG3,255-TSOJ RESET STEP TYPE FLAG.
MSTRTASK LA    R5,256            GET FIRST 256 BYTES OF TCB.
         MVCP  SECWORKA(R5),0(R4),R14
         USING TCB,SECWORKA
         ICM   R5,15,TCBOTC      IS THIS REALLY RCT TCB?
         BZ    FIRSTTCB          YES, NOT JUST HIGHEST PRIORITY TCB.
         LR    R4,R5             NO, POINT TO ORIGINATING TCB.
         B     MSTRTASK          SEE IF ORIGINAL TCB HAS BEEN REACHED.
STCBLOOP LA    R5,256            PROCESS NEXT SUB-TASK.
*                                GET FIRST 256 BYTES OF TCB.
         MVCP  SECWORKA(R5),0(R4),R14
FIRSTTCB ST    R4,SAVETCB        SAVE FOR LATER USE.
         NI    JOBFLAG3,255-LTCB RESET LOCKED TCB FLAG.
         TM    TCBXSCT1,TCBLLREQ LOCAL LOCK REQUESTED?
         BZ    LLOCKOK1          NO.
         TM    TCBXSCT2,TCBLLNEW IHSA USED?
         BO    LLOCKOK1          NO.
         L     R6,PTR2IHSA       MAYBE, POINT TO THE IHSA.
         USING IHSA,R6
         LA    R5,4
         MVCP  SECTIOWA(R5),IHSAOTCB,R14
         C     R4,SECTIOWA       STATUS SAVED FOR THIS TASK?
         BNE   LLOCKOK1          NO.
         OI    JOBFLAG3,LTCB     YES, FLAG IT.
         LA    R5,64             FORGET ABOUT THE F.P. REGISTERS.
         MVCP  TCBGRS(R5),IHSAGPRS,R14   COPY THE G.P. REGISTERS.
         LA    R5,8              ALSO COPY THE PSW.
         MVCP  SAVELPSW(R5),IHSACPSW,R14
         DROP  R6                IHSA.
LLOCKOK1 DC    0H
         LA    R5,4              COPY TCBUKYSP.
         MVCP  SECTIOWA(R5),TCBUKYSP-TCB(R4),R14
*                                        ANYTHING INTERESTING TO DO?
         TM    JOBFLAGS,REGS+PRBS+LLES+CDES+JVSM
         BZ    DONERBS                   NO, SO SUPPRESS TCB DISPLAY.
         MVC   TCBCOLOR,HIGHX            SUPPLY ATTRIBUTE BYTES.
         MVI   TCBCOLOR+8,X'F7'          WHITE.                 (I3279)
         MVI   CRNTFLG,C' '
         MVC   CRNTFLG+1(78),CRNTFLG     BLANK OUT NEW DETAIL LINE.
         C     R4,28(,R3)  WAS ASCBTNEW  IS THIS THE FIRST READY TASK?
         BNE   DONECRNT                  NO.
         MVC   CRNTFLG,=C'=>'            YES, DENOTE SAME.
DONECRNT C     R4,TCBJSTCB               IS THIS A JOB STEP TCB?
         BNE   NOTJSTCB                  NO.
         MVC   JSLBL,=C'JS'              YES.
NOTJSTCB MVC   TCBLBL,=C'TCB'
         UNPK  TCBADDR(7),SAVETCB+1(4)
         TR    TCBADDR,HEX-C'0'
         MVI   TCBADDR+6,C' '            SHOW TCB ADDRESS.
         MVC   CMPLBL,=C'CMP'
         UNPK  TCBCOMP(9),TCBCMP(5)
         TR    TCBCOMP,HEX-C'0'
         MVI   TCBCOMP+8,C' '    SHOW TCB COMPLETION CODE.
         SLR   R5,R5             CLEAR FOR SHIFT.
         IC    R5,TCBPKF         GET STORAGE PROTECTION KEY.
         SRL   R5,4              SHIFT KEY INTO LOW-ORDER NYBBLE.
         MVC   KEYLBL,=C'KEY'
         STC   R5,TCBKEY
         TR    TCBKEY,HEX        MAKE EBCDIC PRINTABLE HEX CHARACTER.
         MVC   PRTYLBL,=C'PRTY'
         UNPK  TCBPRTY(5),TCBLMP(3)
         TR    TCBPRTY,HEX-C'0'
         MVI   TCBPRTY+4,C' '    SHOW LIMIT & CURRENT TASK PRIORITIES.
         ICM   R5,3,TCBFLGS4     IS THIS TASK DISPATCHABLE?
         BZ    DISPOKAY          YES.
         MVC   TCBSTAT,=C'ENDED'
         TM    TCBFLGS5,TCBFC    HAS THE TASK TERMINATED?
         BO    DISPOKAY          YES.
         MVC   TCBSTAT,=C'ABWT '
         TM    TCBFLGS5,TCBABWF  IS THE TASK IN AN ABNORMAL WAIT?
         BO    DISPOKAY          YES.
         MVC   TCBSTAT(4),=C'PGXS'
         TM    TCBFLGS5,TCBPAGE  IS THE TASK PAGING EXCESSIVELY?
         BO    DISPOKAY          YES.
         MVC   TCBSTAT(4),=C'REGN'
         TM    TCBFLGS5,TCBFCD1  IS THE INITIATOR WAITING FOR REGION?
         BO    DISPOKAY          YES.
         MVC   TCBSTAT(4),=C'WAIT'
         TM    TCBFLGS4,TCBRBWF  IS THE TOP RB IN A WAIT STATE?
         BO    DISPOKAY          YES.
         MVC   TCBSTAT(4),=C'NDSP'
         CLI   TCBFLGS5,TCBPNDSP IS THERE A SECONDARY REASON?
         BZ    DISPOKAY          NO.
*                                REPORTABLE REASON?
         TM    TCBNDSP2,TCBNDTS+TCBIWAIT+TCBOWAIT
         BZ    DISPOKAY          NO.
         MVC   TCBSTAT,=C'IWAIT'
         TM    TCBNDSP2,TCBIWAIT INPUT WAIT?
         BO    DISPOKAY          YES.
         MVI   TCBSTAT,C'O'
         TM    TCBNDSP2,TCBOWAIT OUTPUT WAIT?
         BO    DISPOKAY          YES.
         MVC   TCBSTAT,=C'SWPOT' NO, TASK IS BEING SWAPPED OUT.
DISPOKAY LA    R5,8
*                                GET TCB'S CPU TIME.
         MVCP  WORK(R5),TCBTTIME-TCB(R4),R14
         LM    R6,R7,WORK        GET TCB TIME.
         LA    R4,JTCBCPU        POINT TO DISPLAY AREA.
         ST    R14,SAVE+12       SAVE CROSS-MEMORY KEY.
         BAS   R14,CPUTIMEX
         L     R14,SAVE+12       RESTORE CROSS-MEMORY KEY.
         L     R4,SAVETCB        RESTORE TCB POINTER.
         MVC   OTCLBL,=C'OTC'
         UNPK  OTCADDR(7),TCBOTC+1(4)
         TR    OTCADDR,HEX-C'0'
         MVI   OTCADDR+6,C' '    SHOW ORIGINATING TCB'S ADDRESS.
         TR    LL-79(79,R2),XLATETBL
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELD.
         MVI   TCBADDR-1,X'24'   MAKE TCB ADDRESS TAB SELECTABLE.
         MVI   TCBADDR+6,X'27'
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         DROP  R2                TCBDTLS.
         USING TCBDTLS2,R2
         MVC   TCBCOLR2,HIGHX    SUPPLY ATTRIBUTE BYTES.
         MVI   TCBCOLR2+8,X'F7'  WHITE.                         (I3279)
         MVI   TCBLIN2,C' '      BLANK OUT NEW DETAIL LINE.
         MVC   TCBLIN2+1(78),TCBLIN2
         ICM   R5,1,TCBTID       ANY TASK ID PRESENT?
         BZ    TCBTIDOK          NO.
         CVD   R5,WORK
         MVC   TCBIDNT(2),=C'ID'
         MVC   TCBIDNT+2(4),ED3
         ED    TCBIDNT+2(4),WORK+6
         AHI   R5,-248           IS THE ID IN THE KNOWN RANGE?
         BM    TCBTIDOK          NO, JUST SHOW THE NUMBER.
         SLL   R5,3              YES, MULTIPLY BY 8 FOR INDEX.
         LA    R1,TCBROLES(R5)   POINT TO "MEANINGFUL" LITERAL.
         MVC   TCBIDNT,1(R1)     LOAD IT INTO DISPLAY LINE.
*                                IS THE TASK TERMINATING?
TCBTIDOK TM    TCBFLGS1,TCBFA+TCBFE
         BZ    STATOKAY          NO.
         MVC   JTCBTERM(4),=C'TERM'
         TM    TCBFLGS1,TCBFA    IS THE TASK ABNORMALLY TERMINATING?
         BZ    STATOKAY          NO, NORMAL TERMINATION IN PROGRESS.
         MVC   JTCBTERM,=C'ABTRM'
*                                SYSTEM OR STEP MUST COMPLETE?
STATOKAY TM    TCBFLGS2,TCBFSMC+TCBFJMC
         BZ    NOTMCTCB          NO.
         MVC   SMCSTAT,=C'SMC'   YES.
         TM    TCBFLGS2,TCBFSMC  SYSTEM MUST COMPLETE?
         BO    NOTMCTCB          YES, BUT SHOULD NEVER CAPTURE THIS.
         MVI   SMCSTAT,C'J'      NO, JOB STEP MUST COMPLETE.
NOTMCTCB ICM   R0,7,TCBTRNB      TESTRAN CORE TABLE PRESENT?
         BZ    JTSKTSTD          NO.
         MVC   TCBTEST,=C'TSO TEST'
         TM    TCBABF,TCBTCP     TESTRAN ACTIVE?
         BZ    JTSKTSTD          NO.
         MVC   TCBTACT,=C'ACTIVE'
JTSKTSTD TM    TCBFLGS7,TCBSVCS  SVC SCREENING ACTIVE?
         BZ    JTSKSVCD          NO.
         MVC   JTCBSVCS,=C'SVC SCREENING'
JTSKSVCD TM    TCBXSCT1,TCBACTIV CURRENTLY BEING DISPATCHED?
         BZ    JTSKCPUD          NO.
         MVC   TCBRUN,=C'RUNNING ON CP-'
         MVC   TCBPROC,TCBCCPVI+1
         OI    TCBPROC,X'F0'
         TR    TCBPROC,HEX-C'0'
JTSKCPUD CLC   TCBLIN2(79),BLANKS ANY DATA ON THIS LINE?
         BE    JTLIN2OK          NO, DO NOT SHOW IT.
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         DROP  R2                TCBDTLS2.
JTLIN2OK TM    TCBFLGS5,TCBFC    HAS THE TASK TERMINATED?
         BO    TASKNTOK          YES.
         LA    R6,4              POINTER LENGTH.
         MVCP  SECPNTR(R6),TCBSENV-TCB(R4),R14
         ICM   R1,15,SECPNTR     CHECK TCBSENV FOR TASK ACEE POINTER.
         BZ    TASKACOK          SKIP IT IF POINTER IS NULL.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LA    R15,72            LENGTH OF ACEE TO FETCH.
*                                GET SOME ACEE DATA.
         MVCP  SECRB(R15),0(R1),R14
*                                GET PROGRAMMER NAME ADDRESS.
         MVCP  SECPNTR(R6),ACEEUNAM-ACEE(R1),R14
         LA    R6,21             LENGTH OF PROGRAMMER NAME.
         ICM   R15,15,SECPNTR    POINT TO PROGRAMMER NAME IN SASID.
         BZ    TASKACOK          SKIP IT IF POINTER IS NULL.
         MVCP  LL-21(R6,R2),0(R15),R14  LOAD PROGRAMMER NAME.
         SLR   R1,R1
         IC    R1,LL-21(,R2)     GET THE PROGRAMMER NAME LENGTH.
         MVI   LL-21(R2),C' '    BLANK OUT LENGTH INDICATOR.
         LA    R1,LL-21(R1,R2)   POINT PAST PROGRAMMER NAME.
         MVC   0(20,R1),BLANKS   BLANK OUT TRAILING GARBAGE (ACF2).
         MVC   LL-25(5,R2),=C'NAME='
         MVC   LL-79(10,R2),=C'RACF-USER='
         MVC   LL-69(8,R2),SECRB+21   DISPLAY AND LABEL RACF DETAILS.
         MVC   LL-60(6,R2),=C'GROUP='
         MVC   LL-54(8,R2),SECRB+30
         MVC   LL-45(9,R2),=C'TERMINAL='
         MVC   LL-36(8,R2),SECRB+64
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
TASKACOK TM    OSLEVEL,CVTJ4422  EARLIER THAN MVS/SP4.2.2?
         BNO   TASKNTOK          YES, NO NAME/TOKEN PAIRS.
         LA    R5,4              GET LENGTH TO FETCH.
         MVCP  SECPNTR(R5),TCBSTCB-TCB(R4),R14
         ICM   R6,15,SECPNTR     POINT TO STCB.
         BZ    TASKNTOK
         MVCP  SECRB(R5),STCBOTCB-STCB(R6),R14
         ICM   R6,15,SECRB       POINT TO OTCB.
         BZ    TASKOTOK
         LA    R5,192            GET LENGTH TO FETCH.
         MVCP  SECRB(R5),0(R6),R14
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F7'   WHITE.                         (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-71(12,R2),=C'THREAD-ID=X'''
         UNPK  LL-59(9,R2),SECRB+20(5)
         UNPK  LL-50(9,R2),SECRB+24(5)
         TR    LL-59(17,R2),HEX-C'0'
         MVI   LL-51(R2),C'_'
         MVI   LL-42(R2),C''''
         ICM   R6,15,SECRB+168   POINT TO THREAD'S USERID.
         BZ    TASKOTDN          HANDLE NO USERID.
         LA    R5,4              GET LENGTH TO FETCH.
         MVCP  SECRB(R5),0(R6),R14
         ICM   R5,15,SECRB       GET LENGTH OF USERID.
         BNP   TASKOTDN          HANDLE NO USERID.
         MVC   LL-71(12,R2),=C'THREAD-ID=X'''
         MVCP  LL-27(R5,R2),4(R6),R14
         MVC   LL-32(5,R2),=C'USER='
TASKOTDN BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
TASKOTOK L     R6,SECPNTR        POINT TO STCB.
         LA    R5,4              GET LENGTH TO FETCH.
         MVCP  SECPNTR(R5),STCBNTTP-STCB(R6),R14
         ICM   R6,15,SECPNTR     POINT TO NTT HEADER.
         BZ    TASKNTOK          NO TASK-LEVEL NAME/TOKEN PAIRS.
         BAS   R7,JNTTSHOW       SHOW NAME/TOKEN PAIRS.
TASKNTOK TM    JOBFLAGS,REGS     SHOW TASK REGISTERS?
         BZ    DONEGPRS          NO.
         LA    R5,32             GET LENGTH OF TCB PREFIX.
         SLR   R4,R5             POINT TO TCB PREFIX (TCBFRS).
         MVCP  SECRB(R5),0(R4),R14  GET FLOATING POINT REG. CONTENTS.
         ALR   R4,R5             RESTORE TCB POINTER.
         OC    SECRB(32),SECRB   ARE THEY ALL ZERO?
         BZ    DONEFPRS          YES, DON'T BOTHER DISPLAYING THEM.
         LA    R5,SECRB          POINT TO TASK FP REGISTER SAVE AREA.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F6'   YELLOW.                        (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LA    R0,4              FOUR REGISTERS PER SCREEN LINE.
         MVC   LL-79(4,R2),=C'0-6:' SUPPLY REGISTER LABELS.
         LA    R1,LL-73(,R2)     POINT TO FIRST REGISTER SLOT.
NEXTFLPR UNPK  0(9,R1),0(5,R5)   UNPACK HALF THE REGISTER CONTENTS.
         UNPK  8(9,R1),4(5,R5)   UNPACK HALF THE REGISTER CONTENTS.
         TR    0(16,R1),HEX-C'0' CONVERT TO EBCDIC NUMERICS.
         MVI   16(R1),C' '       ERASE GARBAGE.
         LA    R1,18(,R1)        POINT TO NEXT REGISTER POSITION.
         LA    R5,8(,R5)         POINT TO NEXT REGISTER CONTENTS.
         BCT   R0,NEXTFLPR       PROCESS NEXT FLOATING POINT REGISTER.
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
DONEFPRS ST    R14,WORK          SAVE MVCP STORAGE ACCESS KEY.
         LA    R5,TCBGRS         POINT TO TASK REGISTER SAVE AREA.
         BAS   R14,JFMTGPRS      GO DISPLAY REGISTERS.
         L     R14,WORK          RESTORE MVCP STORAGE ACCESS KEY.
DONEGPRS TM    TCBFLGS5,TCBFC    HAS THE TASK TERMINATED?
         BO    DONERBS           YES, FORGET ABOUT REQUEST BLOCKS.
         TM    JOBFLAG2,PPRM     SHOWING PROGRAM PARAMETER?
         BZ    DONEPARM          NO.
         CLI   TCBPKF,X'80'      SYSTEM KEY?
         BL    DONEPARM          YES, SO FORGET IT.
         C     R4,TCBJSTCB       IS THIS A JOB STEP TCB?
         BE    DONEPARM          YES, SO NOT RELEVANT.
         TM    JOBFLAG3,TSOJ     TSO TMP RUNNING IN JOB STEP?
         BZ    DONEPARM          NO.
         ICM   R7,15,TCBFSA      POINT TO FIRST PROBLEM PGM SAVE AREA.
         BNP   DONEPARM          SKIP THIS BIT IF POINTER IS ZERO.
         LA    R5,4              POINTER LENGTH.
         MVCP  SECPNTR(R5),24(R7),R14   GET SAVED REGISTER 1 VALUE.
         ICM   R1,15,SECPNTR     POINT TO PARAMETER LIST.
         BNP   DONEPARM          SKIP THIS BIT IF POINTER IS FUNNY.
         C     R1,TWENTYK        TOO SMALL FOR LOCATION IN REGION?
         BL    DONEPARM          YES, THIS IS NOT A POINTER.
         MVCP  SECPNTR(R5),0(R1),R14  GET FIRST WORD OF PARAMETER LIST.
         TM    SECPNTR,X'78'     TOO BIG FOR A POINTER?
         BNZ   DONEPARM          YES, NON-STANDARD PARAMETER LIST.
         ICM   R6,15,SECPNTR     POINT TO FIRST OR ONLY PARAMETER.
         BZ    DONEPARM          SKIP THIS BIT IF POINTER IS ZERO.
         LA    R5,2              PARAMETER LENGTH INDICATOR LENGTH.
         MVCP  SECRB(R5),0(R6),R14  GET PROGRAM PARAMETER LENGTH.
         TM    SECRB,X'7F'       STUPID LENGTH?
         BNZ   DONEPARM          YES, SO FORGET IT.
         ICM   R5,1,SECRB+1      LOAD PARAMETER LENGTH.
         BZ    DONEPARM          SKIP PARAMETER DISPLAY IF ZERO LENGTH.
         MVCP  SECRB+2(5),2(6),14 GET (FIRST BIT OF) PROGRAM PARAMETER.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F4'   GREEN.                         (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         CLI   SECPNTR,X'80'     SINGLE PROGRAM PARAMETER?
         BE    PARMSHOW          YES, GO SHOW IT.
         MVC   LL-79(4,R2),=C'CMD:'
         LA    R0,5              GET MAXIMUM LENGTH OF COMMAND STRING.
         SR    R5,R0             GET LENGTH CODE OF COMMAND.
         EX    R5,CMDMOVE        LOAD COMMAND TEXT INTO DISPLAY LINE.
         B     FOUNDCMD          DISPLAY LINE NOW COMPLETE.
PARMSHOW MVC   LL-79(6,R2),=C'PARM='''
         BCTR  R5,0              DECREMENT FOR EXECUTE.
         EX    R5,PARMMOVE       LOAD PARAMETER INTO DISPLAY LINE.
         LA    R1,LL-72(R5,R2)   POINT PAST END OF LOADED PARAMETER.
         MVI   0(R1),C''''       SUPPLY TRAILING QUOTE.
FOUNDCMD BAS   R1,JADDLINE       LINE NOW COMPLETE.
DONEPARM L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.
         BNL   UNSSAR            YES, TERMINATE DISPLAY GENERATION.
         DROP  R15               WNDWMNGR.
         TM    JOBFLAGS,LLES     DISPLAY LOAD LIST ELEMENTS?
         BZ    NOLDLIST          NO.
         ICM   R5,15,TCBLLS      ANY LOAD LIST ELEMENTS?
         BZ    NOLDLIST          NO, NO LOAD LIST FOR THIS TASK.
MORELLES MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LA    R0,8              EIGHT NAMES PER SCREEN LINE.
         MVC   LL-79(4,R2),=C'LLE:'
         LA    R1,LL-73(,R2)     POINT TO FIRST CDE NAME SLOT.
         LA    R7,8              GET FIRST EIGHT BYTES OF LLE.
NEXTLLE  MVCP  WORK2(R7),0(R5),R14
         USING LLE,WORK2
         L     R5,LLECDPT        POINT TO CDE.
*                                GET LOADED MODULE NAME.
         MVCP  0(R7,R1),CDNAME-CDENTRY(R5),R14
         LA    R1,9(,R1)         POINT TO NEXT CDE NAME POSITION.
         ICM   R5,15,LLECHN      REACHED END OF LLE CHAIN?
         BZ    DONELLES          YES.
         BCT   R0,NEXTLLE        NO, PROCESS NEXT ONE ON CHAIN.
DONELLES BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         LTR   R5,R5             END OF LLE CHAIN REACHED?
         BNZ   MORELLES          NO, MAKE ANOTHER LINE.
NOLDLIST TM    JOBFLAGS,CDES     DISPLAY CONTENTS DIRECTORY ELEMENTS?
         BZ    NOJPACDE          NO.
         ICM   R5,15,TCBJPQ      ANY CONTENTS DIRECTORY ELEMENTS?
         BNP   NOJPACDE          NO, PROBABLY NOT A JOB STEP TASK.
NEXTCDE  LA    R7,32             FETCH CDE.
         MVCP  SECCDE(R7),0(R5),R14
         USING CDENTRY,SECCDE
         MVC   0(LL-79,R2),MEDX
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         ST    R5,WORK2          STORE CDE ADDRESS.
         MVC   LL-79(3,R2),=C'CDE:'  (REUSE LITERAL)
         UNPK  LL-75(7,R2),WORK2+1(4)
         TR    LL-75(6,R2),HEX-C'0'
         MVI   LL-69(R2),X'23'   DISPLAY CDE ADDRESS.
         MVC   LL-67(8,R2),CDNAME   SHOW MODULE NAME.
         TR    LL-67(8,R2),XLATETBL
         MVC   LL-57(2,R2),=C'EP'
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELDS.
         MVI   LL-76(R2),X'24'   MAKE CDE ADDRESS TAB SELECTABLE.
         MVI   LL-55(R2),X'24'   MAKE ENTRY POINT TAB SELECTABLE.
         UNPK  LL-54(9,R2),CDENTPT(5)
         TR    LL-54(8,R2),HEX-C'0'
         MVI   LL-46(R2),X'23'   DISPLAY AMODE AND ENTRY POINT ADDRESS.
         MVC   LL-44(3,R2),=C'ATR'
         UNPK  LL-40(3,R2),CDATTR(2)
         TR    LL-40(2,R2),HEX-C'0'
         MVI   LL-38(R2),C'¬'    FLAG NO CDX.
         TM    CDATTRB,CDCDEX    DOES CDX EXIST?
         BNO   *+8               NO.
         MVI   LL-38(R2),C' '    DISPLAY CDATTR.
         MVC   LL-36(3,R2),=C'AT2'
         UNPK  LL-32(3,R2),CDATTR2(2)
         TR    LL-32(2,R2),HEX-C'0'
         MVI   LL-30(R2),C' '    DISPLAY CDATTR2.
         TM    CDATTR,CDMIN      MINOR JOB PACK AREA CDE?
         BZ    JPAMAJOR          NO, MAJOR JOB PACK AREA CDE.
         MVC   LL-28(19,R2),=C'*** ALIAS OF CDE AT'
         UNPK  LL-8(7,R2),CDXLMJP+1(4)
         TR    LL-8(6,R2),HEX-C'0'
         MVI   LL-2(R2),C' '     DISPLAY MAJOR CDE ADDRESS.
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         B     DONECDE
JPAMAJOR L     R5,CDXLMJP        POINT TO EXTENT LIST.
         LA    R7,16
*                                FETCH EXTENT LIST.
         MVCP  SECRB+32(R7),0(R5),R14
         USING XTLST,SECRB+32
         L     R6,XTLNRFAC       GET THE EXTENT COUNT.
         L     R7,XTLLNTH        GET XTLST SIZE.
         AHI   R7,-16            DISCOUNT SIZE ALREADY FETCHED.
         BNP   JPAXL#OK          FETCH ALREADY COMPLETE.
         MVCP  SECRB+48(R7),16(R5),R14
JPAXL#OK LA    R5,XTLMSBLA       POINT TO FIRST EXTENT SIZE.
         LR    R7,R6             COPY EXTENT COUNT.
         SLL   R7,2              GET LENGTH OF LENGTH WORDS.
         AR    R7,R5             POINT TO FIRST EXTENT ADDRESS.
JPAFMTXL MVC   LL-28(4,R2),=C'XTNT'
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   *+8               NO, DISABLE TAB SELECTABLE FIELD.
         MVI   LL-24(R2),X'24'   MAKE EXTENT ADDRESS TAB SELECTABLE.
         UNPK  LL-23(9,R2),0(5,R7)
         TR    LL-23(8,R2),HEX-C'0'
         MVI   LL-15(R2),X'23'   DISPLAY EXTENT ADDRESS.
         MVC   LL-13(4,R2),=C'SIZE'
         UNPK  LL-9(9,R2),0(5,R5)
         MVI   LL-9(R2),C' '     CLEAR END OF EXTENT LIST FLAG.
         TR    LL-8(7,R2),HEX-C'0'
         MVI   LL-1(R2),C' '     DISPLAY EXTENT LENGTH.
JPAXT0LP CLI   LL-8(R2),C'0'     LEADING ZERO?
         BNE   JPAXT0OK          NO.
         MVC   LL-8(7,R2),LL-7(R2)
         B     JPAXT0LP          SUPPRESS LEADING ZERO.
JPAXT0OK BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         BCTR  R6,0              DECREMENT EXTENT COUNT.
         LTR   R6,R6             END OF EXTENT LIST?
         BNP   DONECDE           YES, THIS CDE NOW PROCESSED.
         MVC   0(LL-79,R2),MEDX  NO, ANOTHER EXTENT TO SHOW.
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LA    R5,4(,R5)         POINT TO NEXT EXTENT LENGTH.
         LA    R7,4(,R7)         POINT TO NEXT EXTENT ADDRESS.
         B     JPAFMTXL          DISPLAY THE EXTENT LIST ENTRY.
DONECDE  TM    OSLEVEL+6,CVTH77B0
         BNO   DONECDX           PRE-Z/OS 2.3.
         TM    CDATTRB,CDCDEX    DOES CDX EXIST?
         BNO   DONECDX           NO.
         TM    CDATTR3,CDPATHN   IS A PATH NAME PRESENT?
         BNO   DONECDX           NO.
         L     R5,WORK2          RESTORE CDE POINTER.
         LA    R7,4              GET POINTER LENGTH.
         MVCP  SECPNTR(R7),CDECDX-CDE64(R5),R14
         L     R5,SECPNTR        POINT TO THE CDX.
         MVCP  SECPNTR(R7),CDXPATHADDR-CDX(R5),R14
         L     R5,SECPNTR        POINT TO THE CDXPATH STRUCTURE.
         LA    R7,2              GET LENGTH INDICATOR LENGTH.
         MVCP  SECPNTR(R7),CDXPATH_LEN-CDXPATH(R5),R14
         LH    R6,SECPNTR        GET THE PATH NAME LENGTH.
         LA    R5,CDXPATH_NAME-CDXPATH(,R5)
PATHLOOP LTR   R6,R6             ANYTHING LEFT TO SHOW?
         BNP   DONECDX           NO.
         MVC   0(LL-79,R2),LOWX  YES, PREPARE TO SHOW PATH NAME.
         MVI   LL-80(R2),X'F2'   RED.                           (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LA    R7,79             GET DISPLAY LINE CAPACITY.
         CR    R7,R6             IS IT LONGER THAN THE DATA?
         BNH   PATHLNOK          NO
         LR    R7,R6
PATHLNOK SR    R6,R7             DECREASE LENGTH TO GO.
         MVCP  LL-79(R7,R2),0(R5),R14
         ALR   R5,R7             POINT PAST COPIED DATA.
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         B     PATHLOOP          GO SHOW REST OF NAME.
DONECDX  ICM   R5,15,CDCHAIN     REACHED END OF CDE CHAIN?
         BNZ   NEXTCDE           NO, PROCESS NEXT ONE ON CHAIN.
         DROP  R3                ASCB.
NOJPACDE STM   R14,R12,SAVE+12   SAVE REGISTERS.
         L     R8,=A(JSTGDTLS)   GET STORAGE DISPLAY ROUTINE ADDRESS.
         L     R4,TCBMSS         GET TCBMSS.
         BASR  R3,R8             DISPLAY STORAGE USAGE IF APPROPRIATE.
         L     R4,SECTIOWA       GET TCBUKYSP (TCB+268).
         TM    JVSPFLAG,X'01'    SHOW SUBPOOLS 229/230?
         BZ    *+6               NO.
         BASR  R3,R8             DISPLAY STORAGE USAGE IF APPROPRIATE.
         L     R4,TCBSWA         GET TCBSWA.
         TM    JVSPFLAG,X'02'    SHOW SWA SUBPOOLS?
         BZ    *+6               NO.
         BASR  R3,R8             DISPLAY STORAGE USAGE IF APPROPRIATE.
         ST    R2,SAVE+28        SAVE LATEST BUFFER POINTER.
         LM    R14,R12,SAVE+12   RESTORE REGISTERS.
         USING ASCB,R3
         TM    JOBFLAGS,PRBS     DISPLAY REQUEST BLOCKS?
         BZ    DONERBS           NO.
         L     R5,TCBRBP         NO, POINT TO ACTIVE REQUEST BLOCK.
         USING RBDTLS,R2
LOOKATRB ST    R5,SECPNTR
         MVC   RBCOLOR,LOWX      SUPPLY ATTRIBUTE BYTES.
         MVI   LL-80(R2),X'F6'   YELLOW.                        (I3279)
         MVI   RBDTL,C' '
         MVC   RBDTL+1(78),RBDTL BLANK OUT NEW DETAIL LINE.
         UNPK  RBADDR(7),SECPNTR+1(4)
         TR    RBADDR,HEX-C'0'
*        MVI   RBADDR+6,C' '     SHOW RB ADDRESS.
         LA    R7,8+96           GET FIRST 96 BYTES OF RB.
         AHI   R5,-8             POINT TO RB PREFIX.
         MVCP  SECRBPFX(R7),0(R5),R14
         AHI   R5,8              RESTOIRE RB POINTER.
         USING RBFLAGS1,SECRBPFX
         MVC   RBSAVER,RBLINKB   SAVE POINTER TO CALLING RB.
         MVC   RBLBL+1(3),=C'PRB'
         TM    RBSTAB1,RBFTP     PROGRAM REQUEST BLOCK?
         BZ    GETRBCDE          YES.
         MVC   RBLBL(2),=C'TI'
         TM    RBSTAB1,RBFTTIRB  TASK INTERRUPTION REQUEST BLOCK?
         BO    GETRBCDE          YES.
         MVC   RBLBL(2),=C'SV'
         TM    RBSTAB1,RBFTSVRB  SUPERVISOR REQUEST BLOCK?
         BO    GETRBCDE          YES.
         MVI   RBLBL+1,C'I'
         TM    RBSTAB1,RBFTSIRB  SYSTEM INTERRUPTION REQUEST BLOCK?
         BO    SHOWRBEP          YES.
         MVI   RBLBL,C' '
         TM    RBSTAB1,RBFTIRB   INTERRUPTION REQUEST BLOCK?
         BO    SHOWRBEP          YES.
         MVI   RBLBL+1,C' '      WHO KNOWS WHAT IT IS?  NOT ME.
         MVC   MODULE,=C'**UNKN**'
         B     MODULEOK
SHOWRBEP UNPK  MODULE(9),RBEP(5)
         TR    MODULE,HEX-C'0'
         MVI   MODULE+8,C' '     SHOW ASYNCHRONOUS ROUTINE'S ENTRY PNT.
         TM    RBEP,RBEPM        AMODE=31?
         BO    MODULEOK          YES, NON-ZERO SO DON'T OVERWRITE.
         MVC   MODULE(2),=C'EP'
         B     MODULEOK
GETRBCDE SLR   R6,R6             THE WORRIES OF 31 BIT ADDRESSING.
         ICM   R6,7,RBCDE1       IS CDE/LPDE ENTRY POINTER ZERO?
         BNZ   GETPGMNM          NO, GET ACTIVE MODULE NAME.
         MVC   MODULE(5),=C'IGC00'
         L     R6,RBPTR          LOAD RBLINK TO POINT TO PREVIOUS RB.
         BCTR  R6,0              SUBTRACT ONE.
         BCTR  R6,0              SUBTRACT ANOTHER ONE.
         LA    R7,2              LENGTH OF RBINTCOD.
         MVCP  WORK(R7),0(R6),R14    GET 2 BYTES FROM RB-2.
         LH    R6,WORK           GET INTERRUPT CODE (SVC NUMBER).
         CHI   R6,109            SVC 109?
         BNE   JSVCNMBR          NO.
*                                GET ESR ENTRY CODE FROM R15 SLOT.
         MVCP  WORK(R7),RBGRS15-RBBASIC+2(R5),R14
         LH    R6,WORK           GET TYPE-3/4 ESR ENTRY CODE.
         CVD   R6,WORK
         MVI   MODULE+2,C'X'     CORRECT MODULE PREFIX.
         OI    WORK+7,X'0F'      ENSURE NUMERIC DIGITS.
         B     JESRNMBR
JSVCNMBR CVD   R6,WORK
JESRNMBR UNPK  MODULE+5(3),WORK+6(2)
         TM    RBSTAB1,RBTRSVRB  IS A TYPE 2 NUCLEUS SVC ACTIVE?
         BO    MODULEOK          NO, LPA TYPE (3 OR 1ST MODULE OF 4).
         MVC   MODULE+3(3),MODULE+5
         OI    MODULE+5,X'F0'    YES.
         MVC   MODULE+6(2),BLANKS
         B     MODULEOK
GETPGMNM LA    R7,32             FETCH RB'S CDE.
         MVCP  SECCDE(R7),0(R6),R14
         TM    CDATTR3,CDPATHN   IS ACTUAL NAME A UNIX PATH?
         BNO   NOTAPATH          NO.
         MVC   MODULE(4),=C'CDE:'
         UNPK  MODULE+4(7),RBCDE1(4)
         TR    MODULE+4(6),HEX-C'0'
         MVI   MODULE+10,C' '
         B     MODULEOK
NOTAPATH MVC   MODULE,CDNAME     GET CURRENTLY ACTIVE MODULE NAME.
         CLC   =C'IKJEFT',MODULE TSO TMP RUNNING IN JOB STEP?
         BNE   MODULEOK          CANNOT VERIFY THAT HERE.
         OI    JOBFLAG3,TSOJ     YES, FLAG THIS.
MODULEOK MVC   RBPSWLBL,=C'PSW'
         TM    JOBFLAG3,LTCB     STATUS SAVED IN IHSA?
         BZ    LLOCKOK2          NO.
         CLC   SECPNTR,TCBRBP    CURRENT RB?
         BNE   LLOCKOK2          NO.
         MVC   RBOPSW,SAVELPSW   YES, DISPLAY RELEVANT PSW.
LLOCKOK2 DC    0H
         UNPK  RBPSW1(9),RBOPSW(5)
         UNPK  RBPSW2(9),RBOPSW+4(5)
         TR    RBPSW1(17),HEX-C'0'
         MVI   RBPSW1+8,C' '     SHOW RBOPSW.
*        MVI   RBPSW2+8,C' '
         SLR   R6,R6
         IC    R6,RBWCF          GET REQUEST BLOCK WAIT COUNT.
         CVD   R6,WORK
         MVC   RBWTLBL,=C'WAIT'
         MVC   RBWAITCT,RBWCF    SHOW REQUEST BLOCK WAIT COUNT.
         NI    RBWAITCT,X'0F'
         TR    RBWAITCT,HEX
         MVC   RBFLGSLB,=C'FLGS'
         UNPK  RBFLGS(3),RBFLAGS1(2)
         TR    RBFLGS,HEX-C'0'
         MVI   RBFLGS+2,C' '
         MVC   RBLICLBL,=C'LIC'
         MVC   RBILC,RBINLNTH    SHOW INSTRUCTION LENGTH COUNTER.
         NI    RBILC,X'0F'
         TR    RBILC,HEX
         UNPK  RBINTC(5),RBINTCOD(3)
         TR    RBINTC,HEX-C'0'   SHOW INTERRUPT CODE.
         MVI   RBINTC+4,C' '
         TR    LL-79(79,R2),XLATETBL
         MVI   RBADDR-1,X'25'
         MVI   RBPSW2-1,X'25'
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELDS.
         MVI   RBADDR-1,X'24'    MAKE RB ADDRESS TAB SELECTABLE.
         MVI   RBPSW2-1,X'24'    MAKE PSW ADDRESS TAB SELECTABLE.
         MVI   RBADDR+6,X'26'
         MVI   RBPSW1-1,X'25'
         MVI   RBPSW2+8,X'26'
         MVI   RBWAITCT-1,X'25'
         MVI   RBWAITCT+1,X'26'
         MVI   RBFLGS-1,X'25'
         MVI   RBFLGS+2,X'26'
         MVI   RBILC-1,X'25'
         MVI   RBINTC+4,X'26'
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         TM    JOBFLAGS,REGS     SHOW RB REGISTERS?
         BZ    DONEXTRB          NO.
         ST    R14,WORK          SAVE MVCP STORAGE ACCESS KEY.
         LA    R5,RBGRSAVE       POINT TO RB REGISTER SAVE AREA.
         BAS   R14,JFMTGPRS      GO DISPLAY REGISTERS.
         L     R14,WORK          RESTORE MVCP STORAGE ACCESS KEY.
DONEXTRB ICM   R5,15,RBPTR       GET PREVIOUS RB.
         BZ    DONERBS           IGNORE RUBBISH.
         CR    R4,R5             REALLY POINTING TO TCB?
         BNE   LOOKATRB          NO, PROCESS NEXT RB.
         DROP  R2                RBDTLS.
DONERBS  ST    R4,WORK           SAVE THIS TCB ADDRESS.
         LM    R4,R6,TCBNTC      LOAD TCB POINTERS.
         LTR   R4,R4             CHECK FOR OLDER SIBLING TASKS.
         BZ    TRYCHILD          NONE, SO TRY FOR CHILD TASK.
         LTR   R6,R6             HAVE SIBLING, BUT ANY CHILD TASKS?
         BZ    STCBLOOP          NO, SO FORGET ABOUT STACKING SUBTASK.
         LA    R7,TASKSTAK       YES, SO SAVE CHILD POINTER FOR LATER.
PUSHSTAK ICM   R8,15,0(R7)       TASKSTAK ENTRY ZERO?
         BZ    SAVEPNTR          YES, CAN USE THIS ENTRY.
         BM    STCBLOOP          STACK FULL, TOO BAD.
         LA    R7,4(,R7)         POINT TO NEXT STACK ENTRY
         B     PUSHSTAK                   AND TRY IT.
SAVEPNTR ST    R6,0(,R7)         STORE LAST CHILD TASK POINTER.
         ST    R7,STACKPTR       SAVE CURRENT POINTER.
         B     STCBLOOP          PROCESS OLDER SIBLING TCB.
TRYCHILD LTR   R4,R6             GET TASK'S YOUNGEST CHILD TASK.
         BNZ   STCBLOOP          PROCESS THIS SUBTASK.
         SLR   R5,R5             NO SUBTASKS EXIST SO POP THE STACK.
         ICM   R7,15,STACKPTR    GET THE STACK POINTER.
         BZ    EOTCBCHN          ZERO SO END OF TCB CHAIN.
         LA    R6,TASKSTAK       POINT TO START OF STACK.
         L     R4,0(,R7)         LOAD TCB ADDRESS.
         ST    R5,0(,R7)         CLEAR THIS ENTRY WHICH IS NOW FREE.
         CR    R6,R7             IS THE STACK NOW EMPTY?
         BNE   POPSTACK          NO.
         ST    R5,STACKPTR       YES, ZERO POINTER.
         B     STCBLOOP          PROCESS THIS SUBTASK.
POPSTACK AHI   R7,-4             POINT TO PREVIOUS STACK ENTRY.
         ST    R7,STACKPTR       SAVE UPDATED STACK POINTER.
         B     STCBLOOP          PROCESS THIS SUBTASK.
EOTCBCHN L     R4,WORK        NO MORE TASKS, POINT TO LAST TASK WE DID.
         XC    SAVETCB(72),SAVETCB    ERASE TCB PLACE MARKERS.
TIOSECTN ICM   R5,15,TCBTIO           POINT TO TASK INPUT/OUTPUT TABLE.
         BNZ   HAVETIOT               IT EXISTS, SO PROCESS IT.
         L     R1,WINMANAD            POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R1
         L     R1,WINBUFF             POINT TO DISPLAY FORMAT AREA.
         DROP  R1                     WNDWMNGR.
         MVC   LL-8(7,R1),=C'EXCPCNT' LOAD "EXCPCNT" INTO TOP HEADING.
         L     R5,ASCBIOSC            GET ADDRESS SPACE EXCP COUNT.
         CVD   R5,WORK                DISPLAY THIS COUNT IN THE SECOND
         MVC   LL+LL-9(8,R1),ED7Z             LINE (HOPE FOR STC).
         ED    LL+LL-9(8,R1),WORK+4
         B     UNSSAR                 END OF DETAIL FORMATTING.
HAVETIOT LR    R5,R2                  POINT TO CURRENT DISPLAY LINE.
         AHI   R5,-LL                 POINT TO PREVIOUS DISPLAY LINE.
         MVI   2(R5),X'F4'            UNDERSCORE.               (I3279)
         MVI   5(R5),X'C4'            UNDERLINE.                (F9526)
         MVC   0(LL-79,R2),HIGHX      HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'        PINK.                     (I3279)
         MVI   LL-79(R2),C' '         CLEAR DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-79(L'STEPHDR,R2),STEPHDR
         L     R4,TCBTIO              POINT TO TIOT.
         ST    R4,TIOTADDR            SAVE ITS ADDRESS.
         LA    R5,25
         MVCP  SECTIOWA(R5),0(R4),R14 FETCH FIRST 25 BYTES OF TIOT.
         USING TIOT1,SECTIOWA
         ICM   R6,15,TCBJSCB          POINT TO ACTIVE JSCB.
         ST    R6,SAVRETAD            SAVE ADDRESS FOR TIODSNFM.
         BZ    GOTJOBID   NOSMFTBL    DOES NOT EXIST SO LOOK AT TIOT.
         LA    R5,140
*                                     FETCH 140 BYTES OF JSCB.
         MVCP  SECJSCB(R5),JSCBSTEP-IEZJSCB(R6),R14
         USING JSCBSTEP,SECJSCB
         TM    JOBFLAG2,PPRM          SHOWING PROGRAM PARAMETER?
         BZ    SCTXDONE               NO.
         SR    R6,R6                  CLEAR FOR INSERT.
         ICM   R6,7,JSCSCTP           TRYING TO, SO POINT TO SCT.
         BZ    SCTXDONE               SKIP PARM DISPLAY IF NONE.
         TMLL  R6,1                   ODD ADDRESS?
         BNZ   SCTXDONE               YES, SKIP DISPLAY.
         LA    R5,4
         MVCP  SECPNTR(R5),84(R6),R14 FETCH SCTX ADDRESS.
         SR    R8,R8
         ICM   R8,7,SECPNTR           POINT TO SCTX.
         BZ    SCTXDONE               SKIP PARM DISPLAY IF NONE.
         TMLL  R8,1                   ODD ADDRESS?
         BNZ   SCTXDONE               YES, SKIP DISPLAY.
         MVCP  WORK(R5),24(R6),R14    FETCH PARM LENGTH HALFWORD.
         ICM   R5,1,WORK+1            GET LENGTH LOW-ORDER BYTE.
         BZ    SCTXDONE               SKIP PARM DISPLAY IF NONE.
         MVC   0(LL-79,R2),LOWX       LOW INTENSITY.
         MVI   LL-80(R2),X'F4'        GREEN.                    (I3279)
         MVI   2(R2),X'F4'            UNDERSCORE.               (I3279)
         MVI   5(R2),X'C4'            UNDERLINE.                (F9526)
         MVI   LL-79(R2),C' '         BLANK DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-79(6,R2),=C'PARM='''
         MVCP  LL-73(R5,R2),20(R8),R14      FETCH PARAMETER STRING.
         LA    R1,LL-73(R5,R2)        POINT PAST END OF LOADED STRING.
         MVI   0(R1),C''''            SUPPLY TRAILING QUOTE.
         BAS   R1,JADDLINE            LINE NOW COMPLETE.
         BNL   UNSSAR                 HANDLE END OF FORMATTING AREA.
         MVC   0(LL-79,R2),HIGHX      HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'        PINK.                     (I3279)
         MVI   LL-79(R2),C' '         CLEAR DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-79(L'STEPHDR,R2),STEPHDR
SCTXDONE ICM   R6,15,JSCBSSIB    POINT TO SSIB.
         BZ    GOTJOBID          CATER FOR NULL SSIB POINTER.
         LA    R5,8
*                                FETCH JOB IDENTIFIER INTO HEADER.
         MVCP  LL-79(R5,R2),SSIBJBID-SSIB(R6),R14
GOTJOBID BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         MVI   LL-79(R2),C' '    CLEAR DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         USING STEPDTLS,R2
         MVC   STPCOLOR,LOWX
         MVC   STEPNJOB,TIOCNJOB
         MVC   STEPSTEP,TIOCPSTN
         MVC   STEPPROC,TIOCJSTN
         SLR   R8,R8
         IC    R8,JSCBSTEP       GET CURRENT STEP NUMBER.
         CVD   R8,WORK
         MVC   STEPNMBR,ED3
         ED    STEPNMBR,WORK+6
         MVC   STEPAPF+1(2),=C'NO'
         TM    JSCBOPTS,JSCBAUTH
         BZ    GOTAPF            STEP IS NOT AUTHORIZED FOR MODESET.
         MVC   STEPAPF,=C'YES'   STEP IS AUTHORIZED FOR MODESET.
GOTAPF   MVC   STEPPASS+1(2),=C'NO'
         TM    JSCBSWT1,JSCBPASS
         BZ    GOTPASS           STEP CAN'T BYPASS PASSWORD PROTECTION.
         MVC   STEPPASS,=C'YES'  STEP CAN BYPASS PASSWORD PROTECTION.
GOTPASS  L     R8,ASCBIOSC       GET CURRENT EXCP TOTAL.
         CVD   R8,WORK
         MVC   XCPTOTAL,ED11
         MVI   XCPTOTAL+10,X'20'
         ED    XCPTOTAL,WORK+2
         ICM   R6,15,TCBTCT      POINT TO ACTIVE TIMING CONTROL TABLE.
         BNZ   GETTCT            BRANCH TO TCT PROCESSING.
         SPACE 2
NOSMFTBL MVC   REGNSIZE+1(21),=C'(** NO SMF TABLES **)'
         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)
         MVI   5(R2),X'C4'       UNDERLINE.                     (F9526)
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         CLI   TIOELNGH,0        ZERO LENGTH FIRST ENTRY?
         BE    UNSSAR            YES, NO TIOT ENTRIES TO REPORT.
         DROP  R2                STEPDTLS.
         TM    JOBFLAG2,NODD     SUPPRESS DATA SET DETAILS?
         BO    UNSSAR            YES.
         MVC   0(LL-79,R2),HIGHX    HIGH INTENSITY.
         MVI   LL-80(R2),X'F2'      RED.                        (I3279)
         MVC   LL-79(79,R2),TIOTHDR FILE DETAILS WITH NO TCT.
         MVC   LL-58(12,R2),BLANKS  ERASE "EXCPCNT BLKSZ" FROM HEADING.
         MVC   LL-9(9,R2),LL-10(R2) ERASE "CNCT/IO" FROM HEADING.
         TM    JOBFLAG2,ODCB        DISPLAYING OPEN DCB DETAILS?
         BZ    DDHDROK1             NO, HEADING OKAY.
         MVC   LL-51(51,R2),ODCBHDR YES, INDICATE THIS IN HEADING.
DDHDROK1 BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         ST    R2,DDLINE1        SAVE ADDRESS OF FIRST DD DETAIL LINE.
         SLR   R8,R8             CLEAR FOR INSERT.
         IC    R8,TIOELNGH       LOAD FIRST TIOT DD ENTRY LENGTH.
*                                POINT TO FIRST TIOT ENTRY.
         LA    R4,TIOELNGH-TIOT1(,R4)
         USING TIOTDTLS,R2
TIOTLOOP MVC   TIOCOLOR,LOWX     LOW INTENSITY.
         MVI   TIODDNAM-1,X'F4'  GREEN.                         (I3279)
         MVI   TIODDNAM,C' '     BLANK NEXT DETAIL LINE.
         MVC   TIODDNAM+1(78),TIODDNAM
         LR    R15,R4            COPY TIOT ENTRY ADDRESS.
         S     R15,TIOTADDR      GET ENTRY OFFSET INTO TIOT.
         STCM  R15,3,TIOFFSET    SAVE FOR LATER DCB MATCHING.
         LA    R5,1(,R8)         GET ENTRY LENGTH PLUS ONE.
         DROP  R13               GOTAREA AND DEPENDENT USINGS.
         USING GOTAREA,R13
         MVCP  SECTIOWA(R5),0(R4),R14 FETCH NEXT TIOT ENTRY.
         USING TIOENTRY,SECTIOWA
         MVC   TIODDNAM,TIOEDDNM      LOAD THE DDNAME.
         CLI   TIODDNAM,0             FREED ENTRY? (NOT FROM TCT PATH.)
*        BNE   NOTFREED               NO.
*        MVC   TIOUCBSV(9),=C'(DDFREED)'
*        B     NOTERMNL               YES.
         BE    FREEDDD                YES, SUPPRESS FROM DISPLAY.
NOTFREED SLR   R15,R15                CLEAR FOR INSERT.
         MVI   TIOUCBS4,C' '
         ICM   R15,7,TIOEFSRT         POINT TO UCB.
         BZ    NOUCBPTR               NO UCB POINTER PRESENT.
         LA    R5,40
         MVCP  SAVE+16(R5),0(R15),R14 FETCH UCB BASIC SECTION.
         LA    R15,SAVE+16
         USING UCBOB,R15
         MVC   TIOUCBS3,UCBNAME       COPY UCB NAME.
         CLI   TIOUCBS3,C'V'          VIO UCB (IN PRIVATE AREA)?
         BE    NOUCBPTR               YES, VOLUME SERIAL BLANK.
         CLI   TIOUCBS3,C'U'          4-DIGIT DEVICE NUMBER?
         BNE   DEV#OK1                NO.
         UNPK  WORK(5),UCBCHAN(3)     YES.
         TR    WORK(4),HEX-C'0'
         MVC   TIOUCBS4,WORK
DEV#OK1  MVC   TIOVOLUM,=C'**UR**'
         TM    UCBTBYT3,UCB3UREC      UNIT RECORD DEVICE CLASS?
         BO    NOTERMNL               YES.
         MVC   TIOVOLUM+1(4),=C'GRAF'
         TM    UCBTBYT3,UCB3DISP      GRAPHIC DEVICE CLASS?
         BO    NOTERMNL               YES.
         MVC   TIOVOLUM+1(4),=C'COMM'
         TM    UCBTBYT3,UCB3COMM      COMMUNICATION DEVICE CLASS?
         BO    NOTERMNL               YES - INCLUDES CTCA.
         MVC   TIOVOLUM,=C'SCRTCH'
         CLI   UCBVOLI,X'FF'          SCRATCH TAPE REQUEST?
         BE    NOUCBPTR               YES.
         MVC   TIOVOLUM,UCBVOLI       NO, LOAD VOLUME SERIAL NUMBER.
         B     NOTERMNL               MUST BE TAPE OR DASD.
NOUCBPTR TM    TIOELINK,TIOESYIN+TIOESYOT
         BZ    NOTJESFL               NOT A SPOOL FILE.
         MVC   TIOUCBS3,=C'JES'
NOTJESFL TM    TIOELINK,TIOEQNAM
         BZ    NOTQUENM               QNAME OPERAND NOT ON DD CARD.
         MVC   TIOUCBS4,=C'TCAM'      NO AIM/DBDC IN IBM OS.
NOTQUENM TM    TIOELINK,TIOTTERM
         BZ    NOTERMNL               DEVICE IS NOT A TERMINAL.
         MVC   TIOUCBS4,=C'TERM'
NOTERMNL L     R5,=A(TIODSNFM)   FORMAT DATA SET AND/OR MEMBER NAME.
         BASR  R1,R5
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   OPENSTUF          HANDLE END OF FORMATTING AREA.
FREEDDD  LA    R1,TIOENTRY(R8)   POINT TO LENGTH OF NEXT TIOT ENTRY.
         CLI   0(R1),0           REACHED END OF TIOT YET?
         BE    OPENSTUF          YES, COMMENCE DEB-DCB SCAN.
         LA    R4,0(R8,R4)       POINT TO NEXT TIOT ENTRY.
         IC    R8,0(,R1)         GET LENGTH OF NEXT TIOT ENTRY.
         B     TIOTLOOP          PROCESS NEXT TIOT ENTRY.
         DROP  R2,R15            TIOTDTLS, UCBOB.
         SPACE
*  BY TREATING TCTCORE AS A DISJOINT STRUCTURE FROM THE TCT BASE,
*  THE CODE WILL HANDLE RUN-TIME TCT STRUCTURES WHERE THE OFFSET
*  OF TCTCORE HAS CHANGED IE. WHERE THE ENCOUNTERED TCT HAS A
*  DIFFERENT LENGTH DATA CONTENT IN THE BASE BEFORE THE CORE TABLE
*  WHEN COMPARED TO THE ASSEMBLE-TIME DSECT MACRO IEFTCT.
         USING STEPDTLS,R2
GETTCT   LA    R5,4              FILE DETAILS USING TCT.
*                                FETCH TCTCRTBL AT TCT+8.
         MVCP  SECPNTR(R5),TCTCRTBL-SMFTCT(R6),R14
         L     R8,SECPNTR        GET ADDRESS OF TCT CORE TABLE.
         SLR   R8,R6             GET OFFSET OF TCT CORE TABLE.
         LA    R5,TCTCREZ(,R8)   GET TCT COMMON+CORE TABLE SIZE.
         LA    R0,256
         LA    R15,SECTCT        POINT TO TCT BUFFER.
GETTCTLP MVCP  0(R5,R15),0(R6),R14     FETCH TCT DATA.
         BZ    GETTCTOK
         AR    R15,R0            ADJUST TARGET ADDRESS.
         AR    R6,R0             ADJUST SOURCE ADDRESS.
         SR    R5,R0             ADJUST REMAINING LENGTH.
         BP    GETTCTLP          GET NEXT TCT CHUNK.
GETTCTOK LA    R7,SECTCT(R8)     POINT TO COPY OF CORE TABLE.
         USING TCTCORE,R7
         L     R8,TCTRSZ         GET NUMBER OF 2K BLOCKS IN REGION.
         SLL   R8,1              MULTIPLY BY 2 TO GET KILOBYTES.
*        LA    R15,64            GET DEFAULT EXTENSION KILOBYTES.
*        SR    R8,R15            SUBTRACT DEFAULT EXTENSION SIZE.
         CVD   R8,WORK
         MVC   REGNSIZE,ED7      LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    REGNSIZE,WORK+4
         MVI   REGIONK,C'K'
         DROP  R7                TCTCORE.
         USING SMFTCT,SECTCT
         L     R8,TCTLIN         GET TERMINAL INPUT COUNT.
         CVD   R8,WORK
         MVC   STPTGETS,ED5
         ED    STPTGETS,WORK+5
         L     R8,TCTLOUT        GET TERMINAL OUTPUT COUNT.
         CVD   R8,WORK
         MVC   STPTPUTS,ED5
         ED    STPTPUTS,WORK+5
         DROP  R2                STEPDTLS.
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)
         MVI   5(R2),X'C4'       UNDERLINE.                     (F9526)
         MVI   LL-80(R2),X'F1'   BLUE.                          (I3279)
         MVI   LL-79(R2),C' '    BLANK A LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-79+25(4,R2),=C'VIRT'
         TM    ASCBRSMF,ASCBVEQR VIRTUAL EQUALS REAL USER?
         BZ    VEQUALSV          NO, VIRTUAL EQUALS VIRTUAL.
         MVC   LL-79+25(4,R2),=C'REAL'
VEQUALSV MVC   LL-79+39(3,R2),=C'SYS'
         MVC   LL-79+52(3,R2),=C'EXT'
         MVC   LL-79+67(3,R2),=C'SYS'
         L     R1,ASCBASXB       POINT TO ASXB IN SASID.
         LA    R6,4              POINTER LENGTH.
         MVCP  SECPNTR(R6),ASXBSENV-ASXB(R1),R14
         ICM   R1,15,SECPNTR     POINT TO ACEE IN SASID.
         BZ    GTPGMRNM          SKIP IT IF POINTER IS NULL.
         LA    R15,9             LENGTH OF LENGTH CODE AND ACCESSOR ID.
*                                GET SECURITY USER ID.
         MVCP  SECUSER(R15),ACEEUSER-ACEE(R1),R14
*                                GET PROGRAMMER NAME ADDRESS.
         MVCP  SECPNTR(R6),ACEEUNAM-ACEE(R1),R14
         LA    R6,20             LENGTH OF PROGRAMMER NAME.
         ICM   R15,15,SECPNTR    POINT TO PROGRAMMER NAME IN SASID.
         BZ    TOPSECRT          SKIP IT IF POINTER IS NULL.
         LA    R6,21             LENGTH OF INDICATOR PLUS NAME.
*  ASSUME 200 BYTES AFTER START OF CURRENT DISPLAY LINE IS AVAILABLE
*  FOR A TEMPORARY WORK AREA.
*                                LOAD PROGRAMMER NAME.
         MVCP  200(R6,R2),0(R15),R14
         ICM   R6,1,200(R2)      GET NAME LENGTH (ALWAYS 21 FOR RACF).
         BNP   XLATPGMR          IGNORE IF LENGTH ZERO OR BAD.
         BCTR  R6,0              DECREMENT FOR LENGTH INDICATOR.
         BCTR  R6,0              ACF2 TRUNCATES TRAILING BLANKS.
         LTR   R6,R6             PERFORM ANOTHER VALIDITY TEST.
         BM    XLATPGMR          IGNORE IF LENGTH INVALID.
         EX    R6,ACNAMELD       MOVE 20 (RACF) OR UP TO 20 (ACF2).
         B     XLATPGMR
ACNAMELD MVC   LL-79(0,R2),201(R2)              <<< EXECUTED >>>
TOPSECRT MVCP  LL-79(R6,R2),224(R1),R14  LOAD PGMR NAME (TOP SECRET).
XLATPGMR CLI   LL-79(R2),C'A'    REALLY A NAME?
         BL    NOPGMRNM          NO, BLANK IT OUT.
         TR    LL-79(20,R2),XLATETBL
         B     GTPGMRNM          STILL, ENSURE NO UNPRINTABLES.
NOPGMRNM MVC   LL-79(20,R2),BLANKS
         DROP  R13               GOTAREA AND DEPENDENT USINGS.
         USING GOTAREA,R13
         USING TCTCORE,R7
GTPGMRNM L     R1,TCTLWM
         SRL   R1,10
         CVD   R1,WORK
         MVC   LL-50(7,R2),ED5
         ED    LL-50(6,R2),WORK+5
         L     R1,TCTHWM         GET USED SYSTEM REGION.
         SRL   R1,10             (LSQA.)
         CVD   R1,WORK
         MVC   LL-37(7,R2),ED5
         ED    LL-37(6,R2),WORK+5
         L     R1,TCTELWM        GET USED EXTENDED USER REGION.
         SRL   R1,10
         CVD   R1,WORK
         MVC   LL-24(8,R2),ED7
         ED    LL-24(8,R2),WORK+4
         MVI   LL-16(R2),C'K'
         L     R1,TCTEHWM        GET USED EXTENDED SYSTEM REGION.
         SRL   R1,10             (ELSQA.)
         CVD   R1,WORK
         MVC   LL-9(8,R2),ED7
         ED    LL-9(8,R2),WORK+4
         MVI   LL-1(R2),C'K'
         DROP  R7                TCTCORE.
*  TCTCORE PROCESSING COMPLETE.  RESUME ACCESS TO COPY OF TCT BASE.
         USING SMFTCT,SECTCT
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         ICM   R1,15,ASCBTSB     IS THIS A TSO USER?  (GOT A TSB?)
         BZ    ACIDCHKD          NO, CAN'T REALLY VERIFY ACID.
         CLI   SECUSER,0         IS ACCESSOR ID LENGTH ZERO?
         BE    ACIDCHKD          YES, PROBABLY NOT A RACF USER.
         CLI   SECUSER+1,C'*'    IS THE USER A RACF USER?
         BE    ACIDCHKD          NO, SO THAT'S ALRIGHT.
         ICM   R1,15,ASCBJBNS    GET JOBNAME POINTER.
         BZ    ACIDCHKD          FORGET CHECK IF NO JOB NAME POINTER.
         CLC   0(8,R1),SECUSER+1 RACF AND TSO USERIDS EQUAL?
         BE    ACIDCHKD          YES, JUST AS WELL TOO.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F2'   RED.                           (I3279)
         MVI   2(R2),X'F1'       NO, USE BLINKING FOR ALARM!    (I3279)
         MVI   5(R2),X'60'       USE BLINKING FOR ALARM!        (F9526)
         TR    SECUSER+1(8),XLATETBL       JUST TO BE RIGOROUS.
         MVI   LL-79(R2),C'*'    ASTERISK THIS DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2) (MUST BE DESPERATE FOR BLINKING!)
         MVC   LL-76(L'ALRM1MSG,R2),ALRM1MSG  LOAD ALARM MESSAGE LINE.
         MVC   LL-76+L'ALRM1MSG(8,R2),0(R1)
         MVC   LL-76+L'ALRM1MSG+8(L'ALRM2MSG,R2),ALRM2MSG
         MVC   LL-76+L'ALRM1MSG+8+L'ALRM2MSG(8,R2),SECUSER+1
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
ACIDCHKD TM    JOBFLAG2,NODD     SUPPRESS DATA SET DETAILS?
         BO    UNSSAR            YES.
*                                ZERO LENGTH FIRST TIOT ENTRY?
         CLI   TIOELNGH-TIOT1+SECTIOWA,0
         BE    UNSSAR            YES, NO TIOT ENTRIES TO REPORT.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F2'   RED.                           (I3279)
         MVC   LL-79(79,R2),TIOTHDR
         TM    JOBFLAG2,ODCB     DISPLAYING OPEN DCB DETAILS?
         BZ    DDHDROK2          NO, HEADING OKAY.
         MVC   LL-51(51,R2),ODCBHDR YES, INDICATE THIS IN HEADING.
DDHDROK2 BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         ST    R2,DDLINE1        SAVE ADDRESS OF FIRST DD DETAIL LINE.
         L     R8,TCTIOTBL       POINT TO TCT I/O TABLE.
*  THE TCT I/O MEASUREMENT TABLE COMMON SECTION (HEADER) HAS THE SAME
*  LENGTH (IE. 8) AS A LOOKUP TABLE ENTRY.  BECAUSE THE ENTRY POINTER
*  IS INCREMENTED AT THE START OF THE LOOP, THE FIRST TIME THROUGH
*  THE LOOP PROCESSES THE FIRST DD LOOKUP TABLE ENTRY.
         USING TIOTDTLS,R2
LOOPTIOE LA    R8,8(,R8)         POINT TO NEXT DD LOOKUP TABLE ENTRY.
         LA    R5,8
*                                FETCH THIS DD LOOKUP ENTRY OF 2 WORDS.
         MVCP  WORK2(R5),0(R8),R14
         ICM   R1,15,WORK2       END OF DD LOOKUP TABLE?
         BZ    OPENSTUF          YES, COMMENCE DEB-DCB SCAN.
         MVC   TIOCOLOR,LOWX     LOW INTENSITY.
         MVI   TIODDNAM-1,X'F4'  GREEN.                         (I3279)
         MVI   TIODDNAM,C' '     BLANK NEXT DETAIL LINE.
         MVC   TIODDNAM+1(78),TIODDNAM
         LA    R0,1              ASSUME ONE UNIT SECTION.
         L     R6,TCTIOTBL       POINT TO TCT I/O TABLE.
         AL    R6,WORK2+4        POINT TO TCT TIOT ENTRY.
         ST    R6,SAVE           SAVE THE ADDRESS FOR LATER.
NEXTTIOE LH    R5,JTIOELEN
         MVCP  SECTCT+16(R5),0(R6),R14  FETCH THIS ENTRY.
         USING TCTDDENT,SECTCT+16
         MVC   TIOUCBS4,=C' VIO'
         TM    TCTFLGS,TCTVAMDS
         BO    DONEUCB           VIO DATA SET.
         MVC   TIOUCBS3,=C'JES'
         CLI   TCTSCTR,X'FF'
         BE    DONEUCB           SYSIN DATA SET.
         MVC   TIOUCBS3,=C'DMY'
         SLR   R15,R15           CLEAR FOR INSERT.
         ICM   R15,15,TCTUCBP    ANY UCB POINTER?
         BZ    DONEUCB           NO.
         LA    R5,40             YES, FETCH UCB BASIC SECTION.
         MVCP  SAVE+16(R5),0(R15),R14
         LA    R15,SAVE+16
         USING UCBOB,R15
         MVC   TIOUCBS3,UCBNAME  LOAD UCB NAME.
         CLI   TIOUCBS3,C'U'     4-DIGIT DEVICE NUMBER?
         BNE   DEV#OK2           NO.
*                                FETCH DEVICE NUMBER.
         UNPK  WORK(5),UCBCHAN(3)
         TR    WORK(4),HEX-C'0'
         MVC   TIOUCBS4,WORK
DEV#OK2  MVC   TIOVOLUM,=C'**UR**'
         TM    UCBTBYT3,UCB3UREC UNIT RECORD DEVICE CLASS?
         BO    DONEUCB           YES.
         MVC   TIOVOLUM+1(4),=C'GRAF'
         TM    UCBTBYT3,UCB3DISP GRAPHIC DEVICE CLASS?
         BO    DONEUCB           YES.
         MVC   TIOVOLUM+1(4),=C'COMM'
         TM    UCBTBYT3,UCB3COMM COMMUNICATION DEVICE CLASS?
         BO    DONEUCB           YES - INCLUDES CTCA.
         MVC   TIOVOLUM,=C'SCRTCH'
         CLI   UCBVOLI,X'FF'     SCRATCH TAPE REQUEST?
         BE    DONEUCB           YES.
         MVC   TIOVOLUM,UCBVOLI  NO, LOAD VOLUME SERIAL NUMBER.
         CLI   TCTSCTR,0         UNIT COUNT?
         BE    DONEUCB           NO, DON'T ALTER COUNTER.
         IC    R0,TCTSCTR        YES, LOAD CORRECT VALUE.
DONEUCB  BAS   R1,TCTIOFMT       FORMAT EXCP AND CONNECT FIGURES.
         DROP  R15               UCBOB.
TCTIODON L     R6,WORK2          GET TASK TIOT DD ENTRY OFFSET (NOT 0).
         STCM  R6,3,TIOFFSET     SAVE IT FOR DCB MATCHING.
         ALR   R6,R4             POINT TO TIOT DD ENTRY.
         LA    R5,18             GET TIOT ENTRY LENGTH FOR ONE DEVICE.
*                                FETCH THIS TIOT ENTRY.
         MVCP  SECTIOWA(R5),0(R6),R14
         USING TIOENTRY,SECTIOWA
         MVC   TIODDNAM,TIOEDDNM LOAD THE DDNAME.
         TM    JOBFLAG2,XCP0     DISPLAYING ZERO I/O COUNT DATA SETS?
         BO    HAVEDDN           YES.
         CLI   TIODDNAM,C' '     CONCATENATED DATA SET?
         BE    CONCATDD          YES.
         MVC   PREVDDN,TIODDNAM  NO, SAVE IT FOR CONCATENATIONS.
         B     HAVEDDN
CONCATDD MVC   TIODDNAM,PREVDDN  ENSURE NON-BLANK DD NAME.
HAVEDDN  TM    TIOELINK,TIOESYIN+TIOESYOT
         BZ    NOTSPOOL          NOT A SPOOL FILE.
         MVC   TIOUCBS4,=C' JES'
NOTSPOOL TM    TIOELINK,TIOEQNAM
         BZ    NOTQNAME          QNAME OPERAND NOT ON DD CARD.
         MVC   TIOUCBS4,=C'TCAM' NO AIM/DBDC IN IBM OS.
NOTQNAME TM    TIOELINK,TIOTTERM
         BZ    NOTTRMNL          DEVICE IS NOT A TERMINAL.
         MVC   TIOUCBS4,=C'TERM'
NOTTRMNL L     R5,=A(TIODSNFM)   FORMAT DATA SET AND/OR MEMBER NAME.
         BASR  R1,R5
GOTDSN   LH    R1,TCTBLKSZ       LOAD BLOCK SIZE FROM TCT.
         N     R1,=F'32767'      RESET BLOCK SIZE CHANGED BIT.
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   *+8               NO.
         L     R1,TCTXBLKS+4     YES, GET SIZE FROM LARGER FIELD.
         CVD   R1,WORK           SHOW SIZE OF LAST BLOCK TRANSFERRED.
         MVC   TIOBLKSZ,ED5Z
         ED    TIOBLKSZ,WORK+5
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   OPENSTUF          HANDLE END OF FORMATTING AREA.
         BCT   R0,SAMETIOE       NO, PROCESS NEXT UNIT.
         B     LOOPTIOE          ONLY ONE UNIT SO DO NEXT DD STATEMENT.
SAMETIOE LR    R1,R2
         AHI   R1,-LL            POINT TO LINE JUST COMPLETED.
         MVC   0(LL,R2),0(R1)    REPEAT IT.
         L     R6,SAVE           RESTORE TCT TIOT ENTRY POINTER.
         AH    R6,JTIOELEN       POINT TO NEXT UNIT SECTION.
         ST    R6,SAVE           UPDATE STORED TCT TIOT ENTRY POINTER.
         B     NEXTTIOE          COMPLETE A DISPLAY LINE PER UNIT.
         SPACE
TCTIOFMT DS    0H                SHOW EXCP COUNT AND CONNECT TIME RATE.
         ICM   R15,15,TCTDCTR    GET EXCP COUNT FOR THIS UCB.
         BNZ   TCTIOCNT          NON-ZERO SO DISPLAY IT.
         TM    JOBFLAG2,XCP0     DISPLAY ZERO I/O DATA SETS?
         BZ    LOOPTIOE          NO, PROCESS NEXT ENTRY.
         BR    R1                YES, BUT NO NUMBERS TO SHOW.
TCTIOCNT CVD   R15,WORK          DISPLAY EXCP COUNT.
         IC    R7,TIOEXCPS       SAVE DATA.
         MVC   TIOEXCPS,ED7Z
         ED    TIOEXCPS,WORK+4
         STC   R7,TIOEXCPS       RESTORE DATA.
         TM    JOBFLAG2,ODCB     DISPLAYING OPEN DCB DETAILS?
         BOR   R1                YES, SO DO NOT SHOW CONNECT PER EXCP.
         L     R7,TCTCONN        LOAD CHANNEL CONNECT TIME.
         C     R15,TCTDCTRS      ANY I/O SINCE SMF SAVED VALUES?
         BE    TCTIOCON          NO, AVERAGE OVER WHOLE ALLOCATION.
         S     R15,TCTDCTRS      YES, GET EXCP COUNT THIS SMF INTERVAL.
         S     R7,TCTCONNS       GET CONNECT TIME THIS SMF INTERVAL.
TCTIOCON LTR   R7,R7             ANY CONNECT TIME?
         BZR   R1                NO, SO RETURN TO CALLER.
         SLR   R6,R6             YES, PREPARE FOR DIVIDE.
         SLDL  R6,7              CONVERT CONNECT TIME TO MICROSECONDS.
         DR    R6,R15            GET CONNECT MICROSECONDS PER EXCP.
         CVD   R7,WORK           SHOW IT.
         MVC   TIOTTRN,ED7Z
         MVI   TIOTTRN+3,X'21'   EDIT EDIT MASK AFTER LITERAL REUSE.
         ED    TIOTTRN,WORK+4
         MVC   TIOTTRN(4),TIOTTRN+1
         MVI   TIOTTRN+4,C'.'    DISPLAY IT AS MILLISEONDS PER EXCP.
         BR    R1                RETURN TO CALLER.
         DROP  R2                TIOTDTLS.
         SPACE
OPENSTUF TM    JOBFLAG2,ODCB     DISPLAYING OPEN DCB DETAILS?
         BZ    UNSSAR            NO, NOW HAVE ALL APPROPRIATE DATA.
         L     R5,=A(JSETFDAT)   YES, DETERMINE IF I/O BUFFER DATA
         BR    R5                IS TO BE FETCHED IF POSSIBLE.
LOOK4DCB ICM   R4,15,TCBQUEUE    POINT TO TCB TO BE CHECKED.
         BZ    UNSSAR            END OF TASK DISPATCHING QUEUE.
         LA    R5,240
*                                GET FIRST 240 BYTES OF TCB.
         MVCP  SECWORKA(R5),0(R4),R14
         USING TCB,SECWORKA
         MVC   TCBQUEUE,TCBTCB   COPY TCBTCB POINTER.
         CLC   TIOTADDR,TCBTIO   TASK HAS THE RIGHT TIOT?
         BNE   LOOK4DCB          NO, TRY NEXT TCB ON QUEUE.
         MVC   WORK2+4(4),TCBDEB COPY DEB QUEUE ADDRESS.
LOOK4DEB ICM   R4,15,WORK2+4     POINT TO DATA EXTENT BLOCK.
         BZ    LOOK4DCB          END OF DEB QUEUE REACHED.
         LA    R5,32
*                                FETCH DEB BASIC SECTION.
         MVCP  SECWORKA(R5),0(R4),R14
         USING DEBBASIC,SECWORKA
*                                SAVE POINTER TO NEXT DEB.
         MVC   WORK2+5(3),DEBDEBB
*                                SAVE DEBACCS AND DEBFLGS1 FOR LATER.
         MVC   WORK2+1(3),DEBOPATB
         ICM   R4,7,DEBDCBB      POINT TO OPEN DCB.
         LA    R5,96
*                                FETCH DCB OR ACB.
         MVCP  SECWORKA(R5),0(R4),R14
         USING IHADCB,SECWORKA
         USING IFGACB,SECWORKA
         USING TIOTDTLS,R1
         L     R1,DDLINE1        POINT TO FIRST DD DETAIL LINE.
MATCHDCB CR    R1,R2             END OF DD DETAIL LINES?
         BNL   LOOK4DEB          YES, CAN'T MATCH DCB, TRY NEXT ONE.
         TM    TIOCOLOR+8,X'04'  GREEN ON FOR THIS LINE?
         BZ    SKIPDDLN          NO, NOT A DD LINE.
         CLC   TIOFFSET,DCBTIOT  DCB FOR THIS DISPLAY LINE?
         BE    FOUNDDCB          YES, USE IT.
SKIPDDLN LA    R1,LL(,R1)        NO, POINT TO NEXT DISPLAY LINE.
         B     MATCHDCB
FOUNDDCB TM    DCBDSRG2,DCBACBM  GENUINE DATA CONTROL BLOCK?
         BZ    ACBDCBOK          YES, PROCEED.
         CLI   ACBID,ACBIDVAL    GENUINE ACCESS METHOD CONTROL BLOCK?
         BNE   LOOK4DEB          NO, PROCESS NEXT DEB.
ACBDCBOK MVC   TIODSN(45),BLANKS ERASE DATA SET NAME.
         MVC   TIOCOLOR,HIGHX
         TM    WORK2+3,DEBAPFIN  LIBRARY CONSIDERED APF AUTHORISED?
         BZ    JDDAPFOK          NO, CAN'T LOAD AUTHORIZED PROGRAM.
         MVI   TIOCOLOR+8,X'F7'  YES, SHOW IN WHITE.            (I3279)
JDDAPFOK NI    WORK2+1,DEBACCS   CLEAR EOV FLAGS.
         SLR   R5,R5
         IC    R5,WORK2+1        LOAD ACCESS BITS.
         SLL   R5,1              DOUBLE FOR INDEX.
         LA    R5,OPENMODE(R5)   POINT TO ACCESS INDICATOR.
         MVC   TIOACCES(2),0(R5) INDICATE ACCESS MODE.
         TM    DCBDSRG2,DCBACBM  ACB OR DCB?
         BZ    DCBFOUND          DATA CONTROL BLOCK.
         SLR   R0,R0
         IC    R0,ACBSTRNO       SHOW STRNO IN BUFNO COLUMN.
         CVD   R0,WORK
         MVC   TIOBUFNO,ED3Z
         ED    TIOBUFNO,WORK+6
         LH    R0,ACBBLKSZ       SHOW BLOCK SIZE.
         CVD   R0,WORK
         MVC   TIOBLKSZ,ED5Z
         ED    TIOBLKSZ,WORK+5
         ICM   R0,3,ACBLRECL     SHOW LOGICAL RECORD LENGTH.
         CVD   R0,WORK
         MVC   TIOLRECL,ED5Z
         ED    TIOLRECL,WORK+5
         MVC   DCBRECFM,ACBCCTYP     COPY ACBCCTYP TO DCBRECFM.
         MVI   DCBOPTCD,0            ERASE GARBAGE.
         MVC   TIODSORG(2),=C'VS'
         CLI   SECWORKA+43,X'11'     VSAM?
         BE    VSAMSTUF              YES.
         MVC   TIODSORG(2),=C'VT'
         CLI   SECWORKA+43,X'60'     VTAM?
         BE    GETRECFM              YES.
         MVC   TIODSORG(2),=C'SS'
         CLI   SECWORKA+43,X'41'     SUBSYSTEM?
         BE    GETRECFM              YES.
         MVC   TIODSORG(2),=C'TC'
         CLI   SECWORKA+43,X'31'     TCAM?
         BE    GETRECFM              YES.
         MVC   TIODSORG(2),BLANKS    SKIP RTAM, JAM ETC.
         B     GETRECFM
         SPACE
*        BOTTOM JSTCB+11C(284)-->VAT (VALID AMBL TABLE)
*                 VAT+10(16)  -->FIRST AMBL
*                AMBL+0(0)    -->NEXT AMBL
*                AMBL+34(52)  -->AMB OF DATA COMPONENT
*                AMBL+38(56)  -->AMB OF INDEX COMPONENT
*                AMBL+DCBTIOT -->DD TIOT ENTRY OFFSET
*                 AMB+88(136) IS START OF DATA SET NAME
         SPACE
VSAMSTUF UNPK  TIOMBCHR+9(5),ACBMACRF(3)
         UNPK  TIOMBCHR+13(3),ACBMACR3(2)
         TR    TIOMBCHR+9(6),HEX-C'0'
         MVI   TIOMBCHR+15,C''''
         MVC   TIOMBCHR+1(8),=C'MACRF=X'''
         ICM   R4,15,ACBAMBL     FETCH AMBL ADDRESS.
         BZ    LOOK4DEB          HANDLE ZERO POINTER.
         LA    R5,68             LOAD AMBL LENGTH.
*                                FETCH ACCESS METHOD BLOCK LIST.
         MVCP  SECWORKA(R5),0(R4),R14
         CLI   SECWORKA+32,X'50' VALID AMBL?
         BNE   LOOK4DEB          NO, CONTROL BLOCK CHAIN INVALID.
         ICM   R4,15,SECWORKA+52 POINT TO DATA COMPONENT'S AMB.
         BZ    LOOK4DEB          CATER FOR ZERO POINTER.
         LA    R5,42
*                                FETCH FIRST 42 BYTES OF AMB.
         MVCP  SECRB(R5),0(R4),R14
         CLI   SECRB,X'40'       VALID AMB?
         BNE   LOOK4DEB          NO, CONTROL BLOCK CHAIN INVALID.
         ICM   R4,15,SECRB+28    LOAD IOMB POINTER.
         BZ    LOOK4DEB          ZERO POINTER SO GO AWAY.
         LA    R5,4              LOOK AT THE VSAM I/O MANAGER BLOCK.
*                                FETCH THE IOSB POINTER.
         MVCP  SECPNTR(R5),36(R4),R14
         L     R4,SECPNTR        LOAD THE IOSB POINTER.
         USING IOSB,R4
         UNPK  TIOMBCHR(9),IOSEEKA(5)
         UNPK  TIOMBCHR+8(9),IOSEEKA+4(5)
         TR    TIOMBCHR(16),HEX-C'0'
         MVI   TIOMBCHR+16,C' '  DISPLAY VSAM DASD SEEK ADDRESS.
         DROP  R4                IOSB.
         MVC   TIOTTRN,=C'SHR(?,3)'
         TM    SECRB+24,X'08'    CROSS-SYSTEM SHAREOPTION 4?
         BZ    SYSSHROK          NO, 3 IS CORRECT.
         MVI   TIOTTRN+6,C'4'    YES.
SYSSHROK IC    R5,SECRB+24       LOAD AMBFLG0.
         SLL   R5,26             KEEP LOW SIX BITS.
         SRL   R5,30             DROP LOW FOUR BITS.
         IC    R5,HEX+1(R5)      LOAD CROSS-REGION SHAREOPTION.
         STC   R5,TIOTTRN+4      DISPLAY IT.
         TM    SECRB+24,X'04'    LINEAR DATA SET?
         BZ    LDSORNOT          NO.
         MVC   TIODSORG,=C'LDS'
LDSORNOT TM    SECRB+25,X'80'    VSAM OBJECT BEING LOADED?
         BZ    VSCREATD          NO.
         MVI   TIOACCES+4,C'L'   YES, INDICATE CREATION.
VSCREATD L     R4,SECRB+20       POINT TO AM DATA SET STATISTICS BLOCK.
         LA    R5,8              GET TWO FULLWORDS FROM AMDSB.
         MVCP  SECTIOWA(R5),20(R4),R14
         L     R0,SECTIOWA       DISPLAY CONTROLINTERVAL SIZE.
         CVD   R0,WORK
         MVC   TIOBLKSZ,ED5Z
         ED    TIOBLKSZ,WORK+5
         L     R0,SECTIOWA+4     DISPLAY MAXIMUM RECORD SIZE.
         CVD   R0,WORK
         MVC   TIOLRECL,ED5Z
         ED    TIOLRECL,WORK+5
         TM    SECWORKA+33,X'20' CAN THE CLUSTER BE WRITTEN TO?
         BZ    LOOK4DEB          NO, INPUT ONLY.
         MVC   TIOACCES(2),=C'OU'    INDICATE OUTPUT OR UPDATE.
         B     LOOK4DEB          VSAM OPEN DETAILS NOW COMPLETE.
DCBFOUND TM    DCBDSRG1,DCBDSGU  UNMOVEABLE?
         BZ    CANMOVIT          NO.
         MVI   TIODSORG+2,C'U'   YES.
CANMOVIT MVC   TIODSORG(2),=C'DA'
         TM    DCBDSRG1,DCBDSGDA DA?
         BO    GOTDSORG          YES.
         MVC   TIODSORG(2),=C'IS'
         TM    DCBDSRG1,DCBDSGIS IS?
         BO    GOTDSORG          YES.
         MVI   TIODSORG,C'G'
         TM    DCBDSRG2,DCBDSGGS GS?
         BO    GOTDSORG          YES.
         MVI   TIODSORG,C'P'
         TM    DCBDSRG1,DCBDSGPS PS?
         BO    GOTDSORG          YES.
         MVI   TIODSORG+1,C'O'
         TM    DCBDSRG1,DCBDSGPO PO?
         BO    GOTDSORG          YES.
         MVC   TIODSORG(2),=C'CX'
         TM    DCBDSRG1,DCBDSGCX CX?
         BO    GOTDSORG          YES.
         MVI   TIODSORG,C'T'
         TM    DCBDSRG2,DCBDSGTX TX?
         BO    GOTDSORG          YES.
         MVI   TIODSORG+1,C'Q'
         TM    DCBDSRG2,DCBDSGTQ TQ?
         BO    GOTDSORG          YES.
         MVI   TIODSORG+1,C'R'
         TM    DCBDSRG2,DCBDSGTR TR?
         BO    GOTDSORG          YES.
         MVC   TIODSORG(2),STARS
GOTDSORG TM    DCBMACF1,DCBMRECP
         BZ    NOTXCPAM
         MVI   TIOACCES+4,C'X'   ACCESS METHOD IS EXCP.
         B     MBCHRCHK          EXCP HAS NO BUFNO, LRECL, BLKSIZE.
NOTXCPAM SLR   R6,R6
         TM    DCBOFLG,DCBOFLWR
         BZ    IOWASRD           LAST I/O WAS A READ OR POINT.
         LA    R6,1              LAST I/O WAS A WRITE.
IOWASRD  TM    DCBMACF1,DCBMRGET
         BO    QUEUEDIO          MACRF=G.
         TM    DCBMACF2,DCBMRPUT
         BZ    BASICIO           NOT MACRF=P.
QUEUEDIO LA    R6,2(,R6)
BASICIO  LA    R6,RDWRTIND(R6)
         MVC   TIOACCES+4(1),0(R6) SHOW NATURE OF LAST I/O.
         TM    DCBDSRG1,DCBDSGPS+DCBDSGPO+DCBDSGIS+DCBDSGDA
         BZ    NVSMACRF          GO STRAIGHT TO MACRF.
         SLR   R0,R0
         ICM   R0,1,DCBBUFNO     IS BUFNO ZERO?
         BNZ   GOTBUFNO          NO, USE IT.
         IC    R0,DCBNCP         YES, USE NCP INSTEAD.
GOTBUFNO CVD   R0,WORK
         MVC   TIOBUFNO,ED3Z
         ED    TIOBUFNO,WORK+6
         LH    R0,DCBBLKSI
         CVD   R0,WORK
         MVC   TIOBLKSZ,ED5Z
         ED    TIOBLKSZ,WORK+5
         LH    R0,DCBLRECL
         CVD   R0,WORK
         MVC   TIOLRECL,ED5Z
         ED    TIOLRECL,WORK+5
MBCHRCHK TM    DCBDSRG1,DCBDSGPS+DCBDSGPO
         BZ    NVSMACRF          NO MBBCCHHR, SO SHOW MACRF.
         TM    DCBDEVT,X'20'     DASD?
         BZ    JDNOTEND          NO, DON'T CHECK FOR END-OF-FILE.
         OC    DCBFDAD,DCBFDAD   IS MBBCCHHR ZERO?
         BZ    NVSMACRF          YES, GO SHOW SOME NON-ZERO DATA.
         UNPK  TIOMBCHR(9),DCBFDAD(5)
         UNPK  TIOMBCHR+8(9),DCBFDAD+4(5)
         TR    TIOMBCHR,HEX-C'0'
         MVI   TIOMBCHR+16,C' '
         TM    WORK2+3,DEBEOFDF  HAS EOV DETECTED EOF?
         BNO   JDNOTEND          NO.
         MVC   TIOMBCHR+2(4),=C'*EOF'
         B     JDNODATA          YES, END-OF-FILE HAS BEEN REACHED.
JDNOTEND TM    DCBMACF1,DCBMRECP EXCP ALLOWED?
         BO    JDNODATA          YES, SO NOT BSAM OR BPAM OR QSAM.
         TM    DCBCIND2,DCBCNQSM QSAM DCB?
         BO    JDQSAMIO          YES.
         TM    JOBFLAG2,FDAT     ALLOWED TO FETCH BUFFER DATA?
         BZ    JDNODATA          NO.
         TM    DCBCIND2,DCBCNCHS CHAINED SCHEDULING BEING SUPPORTED?
         BO    JDNODATA          YES, FORGET ABOUT FETCHING DATA.
         TM    DCBDEVT,X'20'     DASD?
         BZ    JDNOTDIR          NO, DON'T CHECK FOR SEARCH DIRECT.
         TM    DCBOPTCD,DCBSRCHD USING SEARCH DIRECT?
         BO    JDNODATA          YES, FORGET ABOUT FETCHING DATA.
JDNOTDIR ICM   R6,15,DCBIOBA     POINT TO THE IOB.
         BZ    JDNODATA          NO I/O ISSUED YET.
         LA    R5,4              LENGTH OF AN ECB.
*                                FETCH THE ADDRESS OF ECB IN DECB.
         MVCP  SECPNTR(R5),IOBECBPT-IOBBSAMN(R6),R14
         SLR   R6,R6             ACCESS THE DATA EVENT CONTROL BLOCK.
         ICM   R6,7,SECPNTR+1    POINT TO THE ECB AT DECB+0.
         BZ    JDNODATA          NO I/O ISSUED YET.
*                                FETCH THE AREA POINTER.
         MVCP  SECPNTR(R5),DECAREA-DECB(R6),R14
         ICM   R6,15,SECPNTR     POINT TO THE I/O BUFFER.
         BZ    JDNODATA          IGNORE EMPTY POINTER.
         LH    R5,DCBBLKSI       LOAD BLOCK SIZE.
         LTR   R5,R5             USABLE RECORD LENGTH?
         BNP   JDNODATA          NO, DO NOT TRY TO FETCH RECORD.
         B     JDISDATA          GO FETCH SOME FILE DATA.
JDQSAMIO TM    DCBMACF1,DCBMRGET QSAM GET?
         BO    JDNODATA          NO.
         ICM   R6,15,DCBRECAD    YES, POINT TO CURRENT OR NEXT RECORD.
         BZ    JDGSTART          NO GET HAS BEEN ISSUED SINCE OPEN.
         TM    JOBFLAG2,FDAT     ALLOWED TO FETCH BUFFER DATA?
         BZ    JDNODATA          NO.
         TM    DCBRECFM,DCBRECV  FIXED LENGTH RECORDS?
         BO    JDNODATA          NO.
         TM    DCBRECFM,DCBRECF
         BNO   JDNODATA          NO, NOT FIXED LENGTH RECORDS.
         LH    R5,DCBBLKSI       LOAD BLOCK SIZE.
         TM    DCBRECFM,DCBRECBR BLOCKED FILE?
         BNO   RECFMBLK          NO.
         LH    R5,DCBLRECL       YES, LOAD RECORD LENGTH.
         LTR   R5,R5             USABLE RECORD LENGTH?
         BNP   JDNODATA          NO, DO NOT TRY TO FETCH RECORD.
JDISDATA L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         C     R2,WINEND         IS THE FORMAT AREA FULL?
         BNL   JDNODATA          YES, SO DON'T ADD ANOTHER LINE.
         LA    R0,1
         A     R0,WINLINES       INCREMENT LINE COUNTER.
         ST    R0,WINLINES
         MVC   LL(2,R2),WINFULL  PREPARE FOR FULL WINDOW.
         DROP  R15               WNDWMNGR.
         LR    R15,R2            POINT TO NEW LAST LINE SO FAR.
         LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
JDGTLNLP AHI   R15,-LL           BACK UP A LINE.
         CR    R1,R15            BACK TO OPEN DD LINE?
         BNL   JDGTLDLN          YES, GO FETCH RECORD.
         MVC   LL(LL,R15),0(R15) NO, BUBBLE LINE DOWN ONE.
         B     JDGTLNLP          GO BUBBLE PREVIOUS LINE.
JDGTLDLN MVC   LL(LL-79,R1),MEDX INITIALIZE THE LINE.
         MVC   LL+LL-79(79,R1),BLANKS
         LA    R0,72             GET MAXIMUM DATA LENGTH TO FETCH.
         CR    R5,R0             LRECL BIGGER THAN THIS?
         BNH   JDGTLLOK          NO.
         LR    R5,R0             YES, DECREASE TO MAXIMUM.
JDGTLLOK MVCP  LL+LL-72(R5,R1),0(R6),R14
         MVC   LL+LL-79(7,R1),=C'RECORD:'
         TR    LL+LL-79(79,R1),XLATETBL      HANDLE UNPRINTABLES.
         B     JDNODATA          RECORD DATA NOW FETCHED.
JDGSTART MVC   TIOMBCHR(6),=C'*START'
JDNODATA TM    DCBDEVT,X'80'     TAPE?
         BO    MAGTPDCB          YES.
         TM    DCBDSRG1,DCBDSGPO PARTITIONED ORGANIZATION?
         BZ    GETRECFM          NO, SO SUPPLY RECFM.
         ICM   R0,15,DCBRELAD
         BZ    GETRECFM          TTRN IS ZERO SO SUPPLY RECFM.
         UNPK  WORK(9),DCBRELAD(5)
         TR    WORK(8),HEX-C'0'  DISPLAY TTRN OF CURRENT MEMBER.
         MVC   TIOTTRN,WORK
         B     LOOK4DEB
MAGTPDCB TM    DCBDEVT,X'80'     TAPE?
         BZ    NVSMACRF          NO, SHOW (NON-VSAM) MACRF.
         ICM   R0,15,SECWORKA+12
         BZ    NVSMACRF          ZERO I/O COUNT FOR TAPE VOLUME.
         CVD   R0,WORK
         MVC   TIOMBCHR+8(8),ED7
         ED    TIOMBCHR+8(8),WORK+4
         MVC   TIOMBCHR(9),=C'VOLIOCNT='
         B     GETRECFM          DON'T ERASE I/O COUNT WITH MACRF.
NVSMACRF MVC   TIOMBCHR+1(8),=C'MACRF=X'''
         UNPK  TIOMBCHR+9(5),DCBMACRF(3)
         TR    TIOMBCHR+9(4),HEX-C'0'
         MVI   TIOMBCHR+13,C''''
         TM    DCBDSRG1,DCBDSGPS+DCBDSGPO+DCBDSGIS+DCBDSGDA
         BZ    LOOK4DEB          END OF BTAM, QTAM, TCAM, GAM STUFF.
GETRECFM MVC   TIOTTRN(5),=C'RFM=*'
         TM    DCBRECFM,DCBRECU
         BZ    TRYANSID
         MVI   TIOTTRN+4,C'U'
         BO    RECFMBLK          UNDEFINED RECORD FORMAT.
         MVI   TIOTTRN+4,C'F'
         TM    DCBRECFM,DCBRECF
         BO    RECFMBLK          FIXED LENGTH RECORD FORMAT.
         MVI   TIOTTRN+4,C'V'    VARIABLE LENGTH RECORD FORMAT.
RECFMBLK LA    R6,TIOTTRN+5
         TM    DCBRECFM,DCBRECBR
         BZ    RECFMTRK
         MVI   0(R6),C'B'        FILE IS BLOCKED.
         LA    R6,1(,R6)
RECFMTRK TM    DCBRECFM,DCBRECTO
         BZ    FMSTDSPN
         MVI   0(R6),C'T'        TRACKOVERFLOW IS USED.
         LA    R6,1(,R6)
         B     RECFMCC           CAN'T FIT RFM=VBTSA, FOR EXAMPLE.
TRYANSID TM    DCBRECFM,DCBRECD
         BZ    RECFMBLK          UNKNOWN OR NULL RECORD FORMAT.
         MVI   TIOTTRN+4,C'D'    ANSI VARIABLE LENGTH RECORD FORMAT.
         B     RECFMBLK
FMSTDSPN TM    DCBRECFM,DCBRECSB
         BZ    RECFMCC
         MVI   0(R6),C'S'        STANDARD BLOCKS OR SPANNED RECORDS.
         LA    R6,1(,R6)
RECFMCC  TM    DCBRECFM,DCBRECCC
         BZ    GETOPTCD          NO CARRIAGE CONTROL CHARACTERS.
         MVI   0(R6),C'A'
         TM    DCBRECFM,DCBRECCA
         BO    GETOPTCD          ANSI CARRIAGE CONTROL CHARACTERS.
         MVI   0(R6),C'M'        MACHINE CODE CARRIAGE CONTROL.
GETOPTCD CLI   DCBOPTCD,0        ANY OPTION CODE?
         B     LOOK4DEB    (BE)  NO, LEAVE RECORD FORMAT ON DISPLAY.
         MVC   TIOTTRN(6),=C'OPTCD='
         UNPK  WORK(3),DCBOPTCD(2)
         TR    WORK(2),HEX-C'0'
         MVC   TIOTTRN+6(2),WORK
         B     LOOK4DEB
         DROP  R1                TIOTDTLS.
         DROP  R13               GOTAREA AND DEPENDENT USINGS.
         USING GOTAREA,R13
         SPACE 2
UNSSAR   LTR   R14,R14           WERE WE USING KEY ZERO?
         BNZ   DONESSAR          NO, UNAUTHORIZED FOR SSAR.
RETRYADR C     R3,PSAAOLD        LOOKING AT SELF?
         BE    JNOXMEM           YES, SKIP UNNEEDED STUFF.
         L     R8,PSAAOLD        GET CURRENT ASCB.
         LH    R8,ASID(,R8)      GET CURRENT ASID.
         SSAR  R8                GET OUT OF CROSS MEMORY MODE.
XMFOILED L     R1,AXVALUE        GET SAVED AX NUMBER.
         AXSET AX=(1)            SET AX = 0.
         STATUS RESET,MC,STEP    START ALL OTHER TASKS.
         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.
JNOXMEM  ESTAE 0                 DISABLE TASK ABNORMAL EXIT.
         LARL  R5,SWAGLBL@       POINT TO ADDRESS SAVE AREA.
         ICM   R1,15,0(R5)       GET GLOBAL AREA ADDRESS.
         BZ    JSWAGONE          NO GLOBAL AREA ACQUIRED.
         FREEMAIN RU,LV=DYNSWALN,A=(1),SP=241
         SR    R1,R1
         ST    R1,0(,R5)         RESET GLOBAL AREA ADDRESS.
JSWAGONE EQU   *
         MODESET MF=(E,MDSTPROB) END OF SUPERVISOR STATE ACTIVITY.
         TM    JOBFLAGS,FOILED+SPY   ABENDED ON A SPYING MISSION?
         BO    SPYWAIT           YES, WAIT A BIT THEN RETRY.
         TM    JOBFLAGS,FOILED+WAIT  ABENDED WHILE WAITING FOR SWAP-IN?
         BO    SPYWAIT           YES, WAIT A BIT THEN RETRY.
         TM    JOBFLAGS,SPY      ON A SPYING MISSION?
         BO    POSTSPY           YES, DO SPY POST-PROCESSING.
         L     R5,=A(JASDTLS)    GET ADDRESS OF ASID HEADER ROUTINE.
         USING JASDTLS,R5
         TM    JOBFLAGS,FOILED   CROSS MEMORY FOILED FLAG ON?
         BO    ASIDOUT           YES, TARGET SWAPPED OUT SUDDENLY.
         DROP  R5                JASDTLS.
DONESSAR ICM   R1,15,DDLINE1     POINT TO FIRST DD DETAIL LINE.
         BZ    NODDLINS          THERE ARE NO DD DETAIL LINES.
DDLNLOOP CR    R1,R2             END OF DD DETAIL LINES?
         BNL   ENDOFDDS          YES.
*        CLC   14+LL-79(28,R1),=CL28'ELAPSED TIME SINCE LAST SWAP'
*        BE    ENDOFDDS          XM ABEND STOPPED DD SCAN HERE.
         USING TIOTDTLS,R1
         TM    TIOCOLOR+8,X'04'  GREEN ON FOR THIS LINE?
         BZ    DEV#OK3           NO, NO UCB STUFF TO CORRECT.
         MVC   TIOUCBNM,TIOUCBS4 POSITION UCB NAME CORRECTLY.
         MVI   TIOFILL1,C' '     ERASE GARBAGE.
         MVI   TIOFILL2,C' '
         CLI   TIOUCBNM,0        4-DIGIT NUMBER?
         BNE   DEV#OK3           NO.
         UNPK  WORK(5),TIOUCBNM+1(3)
         TR    WORK(4),HEX-C'0'  YES.
         MVC   TIOUCBNM-1(4),WORK
DEV#OK3  TR    LL-79(79,R1),XLATETBL CATER FOR SMP PDS MEMBERS ETC.
         DROP  R1                TIOTDTLS.
         LA    R1,LL(,R1)        POINT TO NEXT DETAIL LINE.
         B     DDLNLOOP          PROCESS IT.
NODDLINS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         C     R2,WINEND         IS THE FORMAT AREA FULL?
         BNL   PUTSCRNJ          YES, SO LOAD UP A SCREEN IMAGE.
         DROP  R15               WNDWMNGR.
*        C     R3,PSAAOLD        LOOKING AT SELF?
*        BE    JOBSTEND          YES.
         ICM   R15,15,ABNDCNTR   GET THE NUMBER OF CROSS MEMORY ABENDS.
         BZ    JOBSTEND          IF ZERO THEN DON'T SHOW ABEND COUNTER.
         CVD   R15,WORK
         MVC   DIECOUNT,ED5
         ED    DIECOUNT,WORK+5   PUT THIS NUMBER IN ABEND MESSAGE.
         OI    ABENDCMP+2,X'0F'
         UNPK  SYSABEND,ABENDCMP+1(2)
         TR    SYSABEND,HEX-C'0' ALSO SHOW THE LAST ABEND CODE.
         MVC   SYSRSN,BLANKS
         ICM   R0,15,ABENDCRC    ANY REASON CODE?
         BZ    JRSNCDOK          NO.
         MVI   SYSRSN,C'-'
         UNPK  SYSRSN+1(9),ABENDCRC(5)
         TR    SYSRSN+1(8),HEX-C'0'
         MVI   SYSRSN+9,C' '
JRSNCDOK UNPK  SYSAPSW1,ABENDPSW(5)
         UNPK  SYSAPSW2,ABENDPSW+4(5)
         TR    SYSAPSW1(17),HEX-C'0'
         MVI   SYSAPSW1+8,C' '   AND THE ABEND-TIME PSW.
         MVI   SYSAPSW2+8,C' '
         MVC   0(LL,R2),JABNDMSG LOAD THE MESSAGE.
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   PUTSCRNJ          HANDLE END OF FORMATTING AREA.
ENDOFDDS XC    DDLINE1,DDLINE1   HAVE NOW FIXED UP BUFFERED DD LINES.
JOBSTEND BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R1,1
         A     R1,WINLINES       INCREMENT LINE COUNTER.
         ST    R1,WINLINES
         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.
         DROP  R15               WNDWMNGR.
PUTSCRNJ LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.
GETSCRNJ L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         BASR  R14,R15           CALL WINDOW MANAGER.
         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?
         BH    REDOJOBS          YES, REDO THE STATISTICS.
         NI    JOBFLAGS,255-WAIT NO, TURN OFF WAIT MODE.
         TCLEARQ INPUT           CLEAR UNWANTED INPUT.
         CLI   INBUFF+4,0        INPUT FOR FIRST SCREEN LINE?
         BE    CMDSCANJ          YES.
         MVI   INCHARS,C' '      NO, DISCARD IT.
CMDSCANJ L     R5,=A(JOBZMCHK)   POINT TO ZOOM REQUEST PROCESSOR.
         CLI   INCHARS,C' '      CONTINUE OR ZOOM REQUESTED?
         BER   R5                YES.
         CLI   INCHARS,C'J'      REQUEST JOB FOR NEW JOB NAME?
         BNE   RGSTRCHK          NO.
         CLI   INCHARS+2,C' '    YES, MORE THAN TWO BYTES FOLLOW?
         BH    GOTJJJOB          YES, ASSUME JOB NAME PROVIDED.
         CLI   INCHARS+1,C'='    NO, FAST PATH TO SELF?
         BNE   LOCJOBNM          NO, ISSUE JOB NAME PROMPT.
GOTJJJOB MVC   STATSJOB,INCHARS+1 YES, LOAD SUPPLIED SPECIFICATION.
         B     LOCJFAST
LOCJOBNM LA    R1,JOBGTMSG       FULL SCREEN TPUT THE PROMPT MESSAGE.
         LA    R0,JOBGTLEN
         BAS   R14,SCREENIO      ISSUE PROMPT FOR COMPLETE JOB NAME.
         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?
         BE    LOCJOBNM          YES, UNEXPECTED SO REDRIVE THE PROMPT.
         CLC   STATSJOB,INCHARS  HAS THE JOB NAME CHANGED?
         BE    REDOJOBS          NO, CONTINUE WITH REAL STORAGE SCAN.
         MVC   STATSJOB,INCHARS  YES, EXTRACT SPECIFIED JOB NAME.
LOCJFAST L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R1
         L     R1,WINBUFF        POINT TO DISPLAY FORMAT AREA.
         DROP  R1                WNDWMNGR.
         MVI   3840(R1),X'FF'    INVALIDATE PREVIOUS SPY-FETCHED TPUT.
         MVI   SECTIOWA+3,X'FF'  INVALIDATE PREVIOUS SPY-FETCHED TGET.
         CLI   STATSJOB,C'='     SELF REQUESTED?
         BNE   REDOJOBS          NO, CONTINUE WITH REAL STORAGE SCAN.
         L     R1,PSAAOLD        YES, POINT TO THE CURRENT ASCB.
         UNPK  STATSJOB(5),ASID(3,R1)
         TR    STATSJOB(4),HEX-C'0'
         MVC   STATSJOB+4(4),STATSJOB
         MVC   STATSJOB(4),STARS COPY THE CURRENT ADDRESS SPACE NAME.
         B     REDOJOBS          CONTINUE WITH REAL STORAGE SCAN.
RGSTRCHK CLI   INCHARS,C'G'      TOGGLE DISPLAY OF TASK REGISTERS?
         BNE   REQSTBLK          NO.
         XI    JOBFLAGS,REGS     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
REQSTBLK CLI   INCHARS,C'R'      TOGGLE DISPLAY OF REQUEST BLOCKS?
         BNE   LODLSTEL          NO.
         XI    JOBFLAGS,PRBS     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
LODLSTEL CLI   INCHARS,C'L'      TOGGLE DISPLAY OF LOAD LIST ELEMENTS?
         BNE   DDNAMCHK          NO.
         XI    JOBFLAGS,LLES     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
DDNAMCHK CLI   INCHARS,C'D'      TOGGLE DISPLAY OF DATA DEFINITION?
         BNE   EXCP0CHK          NO.
         XI    JOBFLAG2,NODD     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
EXCP0CHK CLI   INCHARS,C'X'      TOGGLE DISPLAY OF I/O-LESS DATA SETS?
         BNE   VSMSPCHK          NO.
         XI    JOBFLAG2,XCP0     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
VSMSPCHK CLI   INCHARS,C'V'      TOGGLE DISPLAY OF STORAGE SUBPOOLS?
         BNE   OPENDCBD          NO.
         CLI   INCHARS+1,C'0'    SUBPOOL SELECTION FLAG SUPPLIED?
         BL    VSMSPTOG          NO, JUST TOGGLE IT.
         CLI   INCHARS+1,C'3'    SUBPOOL SELECTION FLAG SUPPLIED?
         BH    VSMSPTOG          NO, JUST TOGGLE IT.
         MVC   JVSPFLAG,INCHARS+1    YES, SET NEW SUBPOOL SELECTION.
         MVC   INCHARS(L'INCHARS-1),INCHARS+1
         MVI   INCHARS+L'INCHARS-1,C' '  ADJUST ANY COMMAND INPUT.
         NI    JOBFLAGS,255-JVSM ENSURE BIT GETS SET ON.
VSMSPTOG XI    JOBFLAGS,JVSM     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
OPENDCBD CLI   INCHARS,C'O'      TOGGLE DISPLAY OF OPEN DCB DETAILS?
         BNE   MAJRCDEL          NO.
         XI    JOBFLAG2,ODCB     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
MAJRCDEL CLI   INCHARS,C'C'      TOGGLE DISPLAY OF CDES?
         BNE   JOBWTCHK          NO.
         XI    JOBFLAGS,CDES     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
JOBWTCHK CLI   INCHARS,C'W'      WAIT-TILL-SWAPPED-IN REQUEST?
         BNE   ALLJDATA          NO.
         OI    JOBFLAGS,WAIT     YES, FLAG THIS.
         B     REDOJOBS          GO SEE IF TARGET IS SWAPPED IN.
ALLJDATA CLI   INCHARS,C'A'      ALL AVAILABLE DATA REQUEST?
         BNE   SPYCHECK          NO.
         OI    JOBFLAGS,REGS+PRBS+LLES+CDES+JVSM
         OI    JOBFLAG2,ODCB+PPRM+XCP0
         NI    JOBFLAG2,255-NODD
         MVI   JVSPFLAG,C'3'     SHOW ALL SPQE CHAINS.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
SPYCHECK TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    PGMPMCHK          NO, CAN'T DO MODESET FOR CROSS-MEMORY.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'S'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   PGMPMCHK          NO, DON'T ALLOW SPY.
         TM    MODESW3,TSU       TIME SHARING USER?
         BNO   PGMPMCHK          NO, DON'T ALLOW SPY.
         CLI   INCHARS,C'S'      SESSION SPY REQUEST?
         BNE   PGMPMCHK          NO.
         OI    JOBFLAGS,SPY      YES, DO IT.
         L     R1,LINES
         M     R0,COLUMNS        GET THE NUMBER OF SCREEN POSITIONS.
         STH   R1,SPYSCRN        SAVE IT FOR SPY DATA VALIDATION.
         LA    R1,SPYONMSG       NOTIFY USER
         LA    R0,SPYONLEN          OF TSO
         ICM   R1,B'1000',TPUTFLG       SESSION SPY
         TPUT  (1),(0),R                   INITIATION.
         B     REDOJOBS          UPDATE THE DISPLAY.
PGMPMCHK CLI   INCHARS,C'P'      TOGGLE DISPLAY OF PROGRAM PARAMETER?
         BNE   GIVEHLPJ          NO, SHOW HELP PANEL.
         XI    JOBFLAG2,PPRM     YES, DO IT.
         B     JOBINITD          CHECK FOR FURTHER SUBCOMMANDS.
GIVEHLPJ MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.
         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNJ          GO DISPLAY HELP PANEL.
         SPACE
CPUTIMEX SRDL  R6,12             CONVERT INTO MICROSECONDS.
IOCTIMEX CL    R6,GRANDHRS       TOO BIG TO HANDLE?
         BL    GETHOURS          NO.
         MVC   2(8,R4),STARS     YES, INDICATE OVERFLOW.
         BR    R14               RETURN.
GETHOURS D     R6,TENGRAND       CONVERT INTO CENTISECONDS.
         SR    R6,R6             CLEAR FOR DIVIDE.
         D     R6,=F'360000'
         LTR   R7,R7             ANY HOURS?
         BZ    GETMINS           NO, DETERMINE MINUTES.
         CVD   R7,WORK           GET HOURS.
         MVC   0(8,R4),ED3       SUPPLY HOURS EDIT MASK AND COLONS.
         ED    0(4,R4),WORK+6
GETMINS  LTR   R7,R6             GET REMAINDER.
         BZR   R14               ISN'T ANY SO ALL DONE.
         SR    R6,R6             CLEAR FOR DIVIDE.
         D     R6,=F'6000'
         LTR   R7,R7             NON-ZERO MINUTES?
         BZ    GETSECS           NO, SKIP MINIUTES.
         CVD   R7,WORK           GET MINUTES.
         OI    WORK+7,X'0F'
         UNPK  5(2,R4),WORK+6(2)
         MVI   7(R4),C':'
         CLC   4(2,R4),=C' 0'    LEADING ZERO?
         BNE   GETSECS           NO.
         MVI   5(R4),C' '        YES, SUPPRESS IT.
GETSECS  CVD   R6,WORK           GET SECONDS.
         OI    WORK+7,X'0F'
         UNPK  9(4,R4),WORK+5(3)
         MVC   8(2,R4),9(R4)     MOVE WHOLE SECONDS LEFT 1 BYTE.
         MVI   10(R4),C'.'       INSERT DECIMAL POINT.
         CLC   7(2,R4),=C' 0'    LEADING ZERO?
         BNER  R14               NO, RETURN.
         MVI   8(R4),C' '        YES, SUPPRESS IT.
         BR    R14               RETURN.
         SPACE
JADDLINE TR    LL-79(79,R2),XLATETBL
JADDDDLN LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         STM   R15,R0,SAVE+16    SAVE REGISTERS.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R0,1
         A     R0,WINLINES       INCREMENT LINE COUNTER.
         ST    R0,WINLINES
         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.
         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.
         LM    R15,R0,SAVE+16    RESTORE REGISTERS.
         BR    R1                RETURN - CALLER CHECKS CONDITION CODE.
         DROP  R15               WNDWMNGR.
         SPACE
SPFBUFTR TR    0(0,R2),XLATESPF                 <<< EXECUTED >>>
POSTSPY  TM    JOBFLAG2,ISPF     WAS THE ISPF BUFFER FETCHED?
         BZ    POSTSPF           NO, CHECK THE REGULAR TPUT BUFFER.
         NI    JOBFLAG2,255-ISPF RESET ISPF BUFFER SWITCH.
         L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R1
         L     R2,WINBUFF        POINT TO DISPLAY AREA.
         DROP  R1                WNDWMNGR.
         LA    R1,3840           GET A NUMBER.
         SLL   R1,1              DOUBLE IT.
         LA    R1,3840(R1,R2)    PUT TO ISPF SCREEN TPUT BUFFER.
         LA    R2,5(,R1)         POINT TO START OF FETCHED AREA.
         LR    R4,R2             SOURCE ADDRESS.
         LA    R6,4091(,R2)      POINT TO PREVIOUS ISPF SCREEN BUFFER.
         LH    R5,SPYSCRN        GET ISPF SCREEN BUFFER SIZE.
         LR    R7,R5             TARGET LENGTH EQUALS SOURCE LENGTH.
         CLCL  R6,R4             ANY CHANGE IN ISPF SCREEN?
         BE    POSTSPF           NO, SO PROCEED WITH NORMAL TPUT.
         MVCL  R6,R4             YES, SAVE THE CHANGED BUFFER.
         LH    R5,SPYSCRN        GET TARGET SCREEN SIZE.
         SRL   R5,4              DIVIDE BY SIXTEEN.
         BCTR  R5,0              DECREMENT FOR EXECUTE.
         LA    R0,16             LOAD NUMBER OF TRANSLATES REQUIRED.
SPFXLATE EX    R5,SPFBUFTR       GET RID OF UNPRINTABLES.
         LA    R2,1(R5,R2)       ADJUST POINTER.
         BCT   R0,SPFXLATE       (ASSUME ISPF SCREEN STARTS WITH ATTR.)
         MVC   0(6,R1),=X'C11140401DF8' SUPPLY WCC, SBA AND INITIAL SF.
         LA    R0,5              LENGTH OF EXTRA DATA STREAM PREFIX.
         AH    R0,SPYSCRN        GET TOTAL DATA STREAM LENGTH.
*        ICM   R1,B'1000',TPUTFLG
*        TPUT  (1),(0),R         SHOW ISPF LOGICAL TERMINAL DISPLAY.
         STM   R14,R12,SAVE+12   SAVE REGISTERS.
         BAS   R2,STRM3270       DISPLAY ISPF SCREEN BUFFER.
         LM    R14,R12,SAVE+12   RESTORE REGISTERS.
POSTSPF  L     R1,WINMANAD       POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R1
         L     R2,WINBUFF        POINT TO DISPLAY AREA.
         DROP  R1                WNDWMNGR.
         CLI   INBUFF,X'6E'      PA2 - REFRESH REQUEST?
         BNE   WRITECHK          NO, START CHECKING THAT WRITE COMMAND.
         LA    R2,3840(,R2)      YES, POINT TO PREVIOUS BUFFER IF ANY.
WRITECHK CLI   0(R2),X'F1'       WRITE COMMAND?
         BE    VALIDWRT          YES.
         CLI   0(R2),X'F5'       ERASE/WRITE COMMAND?
         BE    PRIMEWRT          YES.
         CLI   0(R2),X'7E'       ERASE/WRITE ALTERNATE COMMAND?
         BE    VALIDWRT          YES.
         CLI   INBUFF,X'6E'      PA2 - REFRESH REQUEST?
         BE    WRONGWRT          YES, RESEND ERROR MESSAGE.
         CLC   TPUTCMND,0(R2)    HAS THE WRITE COMMAND OR WCC CHANGED?
         BE    SPYTGET           NO, SO SAVE A TPUT.
WRONGWRT MVC   TPUTCMND,0(R2)    SAVE THE INVALID VTAM WRITE AND WCC.
         UNPK  WRITECDE(5),0(3,R2)
         TR    WRITECDE(4),HEX-C'0'
         MVI   WRITECDE+4,C''''
         LA    R1,WRITEMSG       NOTIFY USER OF
         LA    R0,WRITELEN          INVALID VTAM WRITE
         ICM   R1,B'1000',TPUTFLG      COMMAND AND SHOW IT
         TPUT  (1),(0),R                  AND THE WCC.
         B     SPYWAIT           ALSO SKIP THE INPUT SIDE OF THINGS.
PRIMEWRT MVC   SPYSCRN,PRIMESZ   NOW IN 24 BY 80 MODE.
VALIDWRT MVC   TPUTCMND,0(R2)    SAVE VTAM WRITE COMMAND AND WCC.
         NI    1(R2),X'C7'       TURN OFF WCC PRINTER BITS.
         OI    1(R2),X'C3'       TURN ON RESET KEYBD, MDT AND AID BITS.
         LA    R4,2(,R2)         POINT AFTER WRITE CONTROL CHARACTER.
         NI    JOBFLAG2,255-PTLN TURN OFF LENGTH-KNOWN FLAG.
         SLR   R6,R6             RESET CURRENT SCREEN BUFFER ADDRESS.
         LA    R0,3837           MAXIMUM NUMBER OF BYTES TO SEARCH.
         CL    R0,TPUTSIZE       IS TPUTSIZE SENSIBLE?
         BL    SILLYSIZ          NO, USE THE OLD INSERT-CURSOR TRICK.
         L     R0,TPUTSIZE       YES, USE IT.
         AHI   R0,-22            SUBTRACT THE FUDGE FACTOR.
         BNP   SILLYSIZ          WELL, MAYBE NOT.
         OI    JOBFLAG2,PTLN     REMEMBER NOT TO STOP AT AN IC ORDER.
         B     LOOK4IC           COMMENCE TPUT DATA STREAM SCAN.
SILLYSIZ LA    R0,3837           MAXIMUM NUMBER OF BYTES TO SEARCH.
         CLI   2(R2),X'05'       REMNANTS OF A QUERY?
         BE    EOSPYDAT          YES, FOUND THE END OF THE NEW DATA.
LOOK4IC  CLI   0(R4),X'08'       FOUND A GRAPHIC ESCAPE?
         BE    FOUNDGE           YES.
         CLI   0(R4),X'11'       FOUND A SET BUFFER ADDRESS?
         BE    SPYADCHK          YES, DON'T LOOK FOR IC IN 3270 ADDR.
         CLI   0(R4),X'12'       FOUND AN ERASE UNPROTECTED TO ADDRESS?
         BE    SPYADCHK          YES, DON'T LOOK FOR IC IN 3270 ADDR.
         CLI   0(R4),X'13'       FOUND AN INSERT CURSOR?
         BE    FOUNDIC           YES, ASSUME THE END OF THE TPUT.
         CLI   0(R4),X'1D'       FOUND A START FIELD?
         BE    FOUNDSF           YES.
         CLI   0(R4),X'28'       FOUND A SET ATTRIBUTE?
         BE    FOUNDSA           YES.
         CLI   0(R4),X'29'       FOUND A SET FIELD EXTENDED?
         BE    FOUNDSFE          YES.
         CLI   0(R4),X'2C'       FOUND A MODIFY FIELD?
         BE    FOUNDMF           YES, DON'T KNOW IF SF/E ALREADY THERE.
         CLI   0(R4),X'3C'       FOUND A REPEAT TO ADDRESS?
         BE    SPYADCHK          YES, DON'T LOOK FOR IC IN 3270 ADDR.
         CLI   0(R4),X'C0'       FOUND A FIELD ATTRIBUTE?
         BE    FOUNDFA           YES, SHOULDN'T HURT IF REALLY A '{'.
         CLI   0(R4),X'FF'       FOUND AN INVALID CHARACTER?
         BE    EOSPYDAT          YES, ASSUME THE END OF THE TPUT.
         OC    0(128,R4),0(R4)   NO, BUT LOTS OF NULLS?
         BZ    EOSPYDAT          YES, ASSUME THE END OF THE TPUT.
         LA    R6,1(,R6)         NO, INCREMENT SCREEN BUFFER ADDRESS.
         CLI   0(R4),X'00'       TEST FOR ONE NULL.
         BE    SPYSKIP1          JUST ANOTHER BYTE IN THE DATA STREAM.
         CLI   0(R4),X'40'       TEST FOR A VALID CODE POINT.
         BNL   SPYSKIP1          JUST ANOTHER BYTE IN THE DATA STREAM.
         MVI   0(R4),C'?'        TRANSLATE LATE OUT RUBBISH.
         B     SPYSKIP1          JUST ANOTHER BYTE IN THE DATA STREAM.
FOUNDGE  CLI   1(R4),X'40'       VALID APL CHARACTER?
         BL    EOSPYDAT          NO, SO TERMINATE DATA STREAM SCAN.
         CLI   1(R4),X'FF'
         BE    EOSPYDAT          NO, SO TERMINATE DATA STREAM SCAN.
         LA    R6,1(,R6)         YES, INCREMENT SCREEN BUFFER ADDRESS.
         B     SPYSKIP2          COPY ENTIRE APL SPECIFICATION.
FOUNDSA  CLI   1(R4),X'41'       IS ATTRIBUTE TYPE INVALID?
         BL    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.
         CLI   1(R4),X'43'
         BH    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.
         TM    2(R4),X'F0'       IS ATTRIBUTE VALUE VALID?
         BNM   SPYSKIP3          HOPE SO, COPY WHOLE SA SPECIFICATION.
         MVI   2(R4),X'00'       PERHAPS, BUT WE'LL USE THE DEFAULT.
         B     SPYSKIP3          COPY WHOLE SA SPECIFICATION.
FOUNDMF  MVI   0(R4),X'29'       REPLACE MF WITH SFE BECAUSE REFERENCED
*                                FIELD ATTR MAY NOT HAVE BEEN CAPTURED.
FOUNDSFE CLI   1(R4),4           VALID NUMBER OF PAIRS SPECIFIED?
         BH    EOSPYDAT          NO, TOO MANY SO TRUNCATE DATA STREAM.
         CLI   1(R4),0
         BE    EOSPYDAT          NO, TOO FEW SO TRUNCATE DATA STREAM.
         CLI   2(R4),X'C0'       IS FIRST PAIR FIELD ATTRIBUTE?
         BE    SPYSKIP2          YES, COPY SFE AND PAIR COUNT.
         CLI   2(R4),X'41'       IS FIRST PAIR TYPE INVALID?
         BL    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.
         CLI   2(R4),X'43'       IS FIRST PAIR TYPE INVALID?
         BH    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.
         TM    3(R4),X'F0'       IS FIRST PAIR VALUE INVALID?
         BM    EOSPYDAT          YES, SO TERMINATE DATA STREAM SCAN.
         SLR   R7,R7             NO, ASSUME ALL PAIRS ARE VALID.
         IC    R7,1(,R4)         GET THE NUMBER OF PAIRS.
         SLL   R7,1              GET BYTE COUNT AFTER PAIR COUNT.
         LA    R7,1(,R7)         GET TOTAL SFE BYTE COUNT MINUS ONE.
         AR    R4,R7             ADD TO DATA SCAN ADDRESS.
         SR    R0,R7             TAKE FROM BYTES-TO-BE-SCANNED COUNT.
         LA    R6,1(,R6)         INCREMENT SCREEN BUFFER ADDRESS.
         B     SPYSKIP1          COPY ALL SFE DATA.
FOUNDFA  CLI   1(R4),C' '        A CONTROL BYTE AFTER A REAL '{'?
         BL    SPYSKIP1          YES, DON'T FIDDLE WITH IT YET.
FOUNDSF  LA    R6,1(,R6)         INCREMENT SCREEN BUFFER ADDRESS.
         TM    1(R4),B'00001100' A NON-DISPLAY FIELD?
         BNO   SPYSKIP2          NO, DO NOT CHANGE ATTRIBUTE BYTE.
         NI    1(R4),B'00110011' YES, CHANGE TO LOW-INTENSITY DISPLAY.
         TR    1(1,R4),TABLE     RE-TRANSLATE TO 3270 DATA STREAM CHAR.
         B     SPYSKIP2          SEND EDITED ATTRIBUTES.
SPYADCHK SLR   R15,R15           VALIDATE TARGET SCREEN'S ADDRESS HERE.
         ICM   R15,B'0011',1(R4) LOAD THE ADDRESS.
         TM    1(R4),B'11000000' 14-BIT SCREEN BUFFER ADDRESS?
         BZ    SPYADCMP          YES, COMPARE IT.
         TM    1(R4),B'01000000' VALID 12-BIT ADDRESS?
         BZ    EOSPYDAT          NO, TERMINATE DATA STREAM SCAN.
         SLL   R15,2             SHIFT OUT HIGH-ORDER 2 "PARITY" BITS.
         ICM   R15,B'0010',1(R4) GET HIGH-ORDER ADDRESS BYTE.
         SLL   R15,18            SHIFT OUT HIGH-ORDER 2 "PARITY" BITS.
         SRL   R15,20            CONVERT TO BINARY INTEGER.
SPYADCMP CH    R15,SPYSCRN       IS TARGET SCREEN TOO BIG FOR THIS ONE?
         BNL   EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.
         CLI   0(R4),X'3C'       NO, REPEAT-TO-ADDRESS BEING CHECKED?
         BNE   SETSCRN@          NO, ONLY COPY THREE BYTES.
         CR    R15,R6            MOVING FORWARD?
         BH    RAADDROK          YES, PROCEED.
         LTR   R15,R15           REPEATING TO END OF SCREEN?
         BNZ   EOSPYDAT          NO, STOP WRAP-AROUND.
RAADDROK CLI   3(R4),X'00'       REPEATING NULLS?
         BE    SPYSKIP4          YES, THAT'S ALRIGHT.
         CLI   3(R4),X'FF'       INVALID CODE POINT?
         BE    EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.
         CLI   3(R4),X'40'       VALID CODE POINT?
         BNL   SPYSKIP4          YES, THAT'S ALRIGHT.
         CLI   3(R4),X'08'       APL CHARACTER?
         BNE   EOSPYDAT          NO, INVALID CODE POINT.
         CLI   4(R4),X'FF'       INVALID CODE POINT?
         BE    EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.
         CLI   4(R4),X'40'
         BL    EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.
         LA    R4,1(,R4)         POINT TO NEXT BYTE.
         BCTR  R0,0              ADJUST RESIDUAL BYTE COUNTER.
SPYSKIP4 LA    R4,1(,R4)         POINT TO NEXT BYTE.
         BCTR  R0,0              ADJUST RESIDUAL BYTE COUNTER.
SETSCRN@ LR    R6,R15            SET NEW SCREEN BUFFER ADDRESS.
SPYSKIP3 LA    R4,1(,R4)         POINT TO NEXT BYTE.
         BCTR  R0,0              ADJUST RESIDUAL BYTE COUNTER.
SPYSKIP2 LA    R4,1(,R4)         POINT TO NEXT BYTE.
         BCTR  R0,0              ADJUST RESIDUAL BYTE COUNTER.
SPYSKIP1 LA    R4,1(,R4)         POINT TO NEXT BYTE.
         LTR   R0,R0             GONE PAST THE MAXIMUM?
         BNP   EOSPYDAT          YES, TERMINATE DATA STREAM SCAN.
         CLI   0(R4),X'13'       IS INSERT CURSOR NEXT?
         BE    NEXTICOK          YES, DON'T STOP NOW.
         CH    R6,SPYSCRN        IS THE SCREEN FILLED NOW?
         BNL   EOSPYDAT          YES, DON'T WRAP-AROUND.
NEXTICOK BCT   R0,LOOK4IC        GO AND EXAMINE IT.
         B     EOSPYDAT          REACHED THE ARBITRARY LIMIT.
FOUNDIC  TM    JOBFLAG2,PTLN     IS THE TPUT DATA LENGTH KNOWN?
         BZ    STOPATIC          NO, END WITH THE INSERT CURSOR.
         CHI   R0,30             LOTS OF DATA TO GO?
         BH    SPYSKIP1          YES, TREAT THE IC AS ANY DATA BYTE.
STOPATIC LA    R4,1(,R4)         NO, BUT SEND THE INSERT CURSOR ITSELF.
EOSPYDAT CLI   INBUFF,X'6E'      PA2 - REFRESH REQUEST?
         BE    NEWWRITE          YES, RESEND THE LATEST TPUT.
         LR    R1,R2             NO, POINT TO THE WRITE COMMAND.
         LA    R0,15             COMPARISON LOGIC TO SAVE ON TPUTS.
CMPRTPUT CLC   0(256,R1),3840(R1) COMPARE THIS BUFFER TO PREVIOUS ONE.
         BNE   NEWWRITE          MISMATCH SO UPDATE THE SCREEN.
         LA    R1,256(,R1)       POINT TO NEXT 256 BYTES FOR COMPARE.
         BCT   R0,CMPRTPUT       GO COMPARE IT.
         B     SPYTGET           NO CHANGE SO NO TPUT.
NEWWRITE SR    R4,R2             GET THE DATA STREAM LENGTH.
         L     R14,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R14
         L     R14,WINBUFF       POINT TO DISPLAY AREA.
         DROP  R14               WNDWMNGR.
         LA    R14,3840(,R14)    POINT TO THE COMPARE SAVE AREA.
         LA    R14,3840(,R14)    POINT TO A NEW SAVE AREA.
         ST    R2,0(,R14)        SAVE THE TPUT BUFFER ADDRESS.
         ST    R4,4(,R14)        SAVE THE TPUT BUFFER LENGTH.
         LA    R14,8(,R14)       POINT AFTER THIS TO TRACE AREA.
         LA    R15,3840          LOAD TRACE AREA SIZE.
         LR    R0,R2             GET TPUT SOURCE DATA ADDRESS.
         LR    R1,R4             GET TPUT SOURCE DATA LEN (NULL PAD).
         MVCL  R14,R0            TRACE TPUT DATA STREAM FOR DEBUG.
         CLI   0(R2),X'F3'       WRITE STRUCTURED FIELD?
         BE    SKIPTPUT          YES, DO NOT ATTEMPT TO ECHO.
*        TPUT  (R2),(R4),NOEDIT,WAIT,MF=(E,TPUTNOED)
         STM   R14,R12,SAVE+12   SAVE REGISTERS.
         LR    R1,R2             POINT TO THE DATA STREAM.
         LR    R0,R4             GET THE DATA STREAM LENGTH.
         BAS   R2,STRM3270       DISPLAY ISPF SCREEN BUFFER.
         LM    R14,R12,SAVE+12   RESTORE REGISTERS.
SKIPTPUT CLI   INBUFF,X'6E'      PA2 - REFRESH REQUEST?
         BE    SPYWAIT           YES, SKIP OVER TGET PROCESSING.
         LR    R1,R2             POINT TO THE WRITE COMMAND.
         LA    R0,15
SAVETPUT MVC   3840(256,R1),0(R1) SAVE THIS BUFFER FOR COMPARE TO NEXT.
         LA    R1,256(,R1)       POINT TO NEXT 256 BYTES FOR MOVE.
         BCT   R0,SAVETPUT       GO MOVE IT.
SPYTGET  CLC   SECTIOWA,SECWORKA HAS ANY TGET DATA CHANGED?
         BE    SPYWAIT           NO, SCREEN UPDATES COMPLETE.
         MVC   SECTIOWA,SECWORKA YES, SAVE THE NEW BUFFER.
         TM    SECWORKA,X'40'    DINKY-DI AID?  IF INBOUND STRUCTURED
         BZ    SPYWAIT           FIELD OR GARBAGE THEN DON'T ECHO IT.
         L     R5,TGETSIZE       GET SIZE OF TGET DATA.
         CHI   R5,256            TGET LENGTH OVER 255?
         BL    SPYGETOK          NO.
         LA    R5,255            YES, GET NEW MAXIMUM LENGTH.
         LA    R0,1              POSSIBLY ONE LESS.
         CLI   SECWORKA+254,X'11'
         BE    TGETLESS
         CLI   SECWORKA+254,X'1D'
         BE    TGETLESS
         CLI   SECWORKA+254,X'28'
         BE    TGETLESS
         LA    R0,2              POSSIBLY TWO LESS.
         CLI   SECWORKA+253,X'11'
         BE    TGETLESS
         CLI   SECWORKA+253,X'28'
         BE    TGETLESS
         SLR   R0,R0             NO 3270 ORDERS SEEM TO BE TRUNCATED.
TGETLESS SR    R5,R0             TIDY UP END OF DATA STREAM.
         ST    R5,TGETSIZE       UPDATE SIZE VARIABLE FOR TESTING.
SPYGETOK CLI   TGETSIZE+3,3      WAS IT A SHORT READ?
         BL    SPYWAIT           YES, NO USEFUL DATA HERE.
         LR    R0,R5             COPY PROCESSABLE TGET DATA LENGTH.
         SLR   R15,R15
         LA    R7,SECWORKA       POINT TO THE AID BYTE.
         B     GETADCHK          GO CHECK THE CURSOR ADDRESS FIRST.
GETADRLP CLI   0(R7),X'00'       JUST A NULL?
         BE    GETNOTRA          YES, LET IT THROUGH.
         CLI   0(R7),X'11'       SET-BUFFER-ADDRESS?
         BE    GETADCHK          YES, CHECK OUT SCREEN BUFFER ADDRESS.
         CLI   0(R7),X'1D'       START FIELD?
         BE    GETNOTRA          YES, LET IT THROUGH.
         CLI   0(R7),X'28'       SET ATTRIBUTE?
         BE    GETNOTRA          YES, LET IT THROUGH.
         CLI   0(R7),X'40'       INVALID CHARACTER?
         BL    SPYWAIT           YES, SUPPRESS WHOLE TGET DATA STREAM.
         CLI   0(R7),X'FF'       INVALID CHARACTER?
         BE    SPYWAIT           YES, SUPPRESS WHOLE TGET DATA STREAM.
         B     GETNOTRA          NO, LET TEXT BYTE THROUGH.
GETADCHK ICM   R15,B'0011',1(R7) LOAD THE ADDRESS.
         TM    1(R7),B'11000000' 4-BIT SCREEN BUFFER ADDRESS?
         BZ    SPYADGET          YES, COMPARE IT.
         TM    1(R7),B'01000000' VALID 12-BIT ADDRESS?
         BZ    SPYWAIT           NO, TERMINATE DATA STREAM SCAN.
         SLL   R15,2             SHIFT OUT HIGH-ORDER 2 "PARITY" BITS.
         ICM   R15,B'0010',1(R7) GET HIGH-ORDER ADDRESS BYTE.
         SLL   R15,18            SHIFT OUT HIGH-ORDER 2 "PARITY" BITS.
         SRL   R15,20            CONVERT TO BINARY INTEGER.
SPYADGET CH    R15,SPYSCRN       IS TARGET SCREEN TOO BIG FOR HERE?
         BNL   SPYWAIT           YES, SUPPRESS WHOLE TGET DATA STREAM.
         LA    R7,2(,R7)
         BCTR  R0,0
         BCTR  R0,0
GETNOTRA LA    R7,1(,R7)          ADJUST DATA STREAM POINTER.
         BCT   R0,GETADRLP        TEST NEXT BYTE.
         MVI   SECTCT,X'C3'       CONSTRUCT A TPUT - HERE'S THE WCC.
         LA    R7,SECTCT+1        UPDATE BUFFER POINTER.
         AHI   R5,-4              GET LENGTH CODE OF TEXT.
         BM    SPYPTCSR           LOOKS LIKE JUST THE READ HEADER.
         TM    MODESW2,COL4+COL2  IN SEVEN-COLOUR MODE?
         BNZ   SNAZDGET           NO, DONE ANY TARTING UP OF TGET TEXT.
         MVC   0(3,R7),=X'2841F4' UNDERSCORE INPUT TEXT.
         LA    R7,3(,R7)          UPDATE BUFFER POINTER.
SNAZDGET EX    R5,TGETMOVE        LOAD THE TEXT INTO THE DATA STREAM.
         LA    R7,1(R5,R7)        POINT TO NEXT VACANT OUTPUT BYTE.
SPYPTCSR MVI   0(R7),X'11'        TACK CURSOR ON TO END OF TEXT.
         MVC   1(2,R7),SECWORKA+1
         MVI   3(R7),X'13'
         LA    R7,4(,R7)          POINT PAST END OF DATA STREAM.
         CLI   SECWORKA,X'7D'     WAS IT AN ENTER?
         BE    SPYPTGET           YES, DROP AID DISPLAY AND PUT GET.
         TM    MODESW2,COL4+COL2  IN SEVEN-COLOUR MODE?
         BNZ   SPYPTGET           NO, AID DATA WILL ONLY CONFUSE.
         MVC   0(3,R7),=X'2841F2' REVERSE VIDEO AID HEX.
         UNPK  3(3,R7),SECWORKA(2)
         TR    3(2,R7),HEX-C'0'   DISPLAY PFK AID.
         LA    R7,5(,R7)          UPDATE BUFFER POINTER.
SPYPTGET LA    R1,SECTCT          POINT TO START OF DATA STREAM.
         LR    R0,R7              POINT PAST END OF DATA STREAM.
         SR    R0,R1              GET THE LENGTH OF THE DATA STREAM.
         ICM   R1,B'1000',TPUTFLG LOAD FULLSCREEN TPUT FLAGS.
         TPUT  (1),(0),R          WRITE OUT THE TGET DATA.
SPYWAIT  STIMER WAIT,BINTVL=SPYDELAY   WAIT A BIT.
         XC    INBUFF(INBUFLEN),INBUFF  CLEAR PREVIOUS INPUT.
         LA    R1,INBUFF          LOAD ADDRESS OF INPUT BUFFER.
         LA    R0,INBUFLEN        LOAD LENGTH OF BUFFER.
         ICM   R1,B'1000',=AL1(TGETFLGN)   LOAD TGET TYPE FLAGS.
         TGET  (1),(0),R          READ THE INPUT DATA FROM USER.
         TM    MODESW2,ATTN       ANY ATTENTION INTERRUPTION?
         BZ    SPYTGOT            NO, CHECK FOR OTHER INPUT.
         STFSMODE ON,NOEDIT=YES   YES, RESTORE VTAM FULL SCREEN MODE.
STPSPYNG NI    JOBFLAGS,255-SPY   TERMINATE SPYING.
         TM    JOBFLAG2,JALT      ALTERNATE SCREEN SIZE SET?
         BZ    ARESTSPY           NO.
         NI    JOBFLAG2,255-JALT  YES, RESET FLAG.
         STSIZE SIZELOC=COLUMNS,LINELOC=LINES
ARESTSPY MVI   STMSG+1,X'F5'      USE ERASE/WRITE.
         CLI   LINES+3,24         PRIMARY SIZE TO BE USED?
         BNH   SPYTERMD           YES.
         MVI   STMSG+1,X'7E'      REPLACE ERASE/WRITE WITH E/W ALT.
SPYTERMD MVC   JREDTXT,JSTTEXT    LOAD MESSAGE TEXT.
         LA    R1,STMSG           POINT TO "SPY TERMINATED" MESSAGE.
         LA    R0,STMSGLEN        GET "SPY TERMINATED" MESSAGE LENGTH.
         TM    JOBFLAGS,WAIT      WAIT REQUEST ACTIVE?
         BZ    SHOWMSGJ           NO, SHOW MSG AND GET NEXT REQUEST.
STOPWAIT NI    JOBFLAGS,255-WAIT  YES, CANCEL WAITING.
         MVC   JREDTXT,JWCTEXT    LOAD MESSAGE TEXT.
         LA    R1,WCMSG           POINT TO "WAIT CANCELLED" MESSAGE.
         LA    R0,WCMSGLEN        GET "WAIT CANCELLED" MESSAGE LENGTH.
SHOWMSGJ BAS   R14,SCREENIO       CALL SCREEN I/O HANDLER.
         B     CMDSCANJ           SHOW MESSAGE AND GET NEXT REQUEST.
SPYTGOT  CHI   R15,4              ANY INPUT?
         BE    REDOJOBS           NO, REDO FULL A. S. VALIDATION.
         TM    JOBFLAGS,WAIT      WAITING FOR SWAP-IN?
         BO    WTPA2CHK           YES, CHECK FOR A PA2.
         CH    R15,EIGHTJ         PA1 - ATTENTION INTERRUPT?
         BE    STPSPYNG           YES, TERMINATE TSO SESSION SPY.
         CLI   INBUFF,X'6E'       PA2 - REFRESH REQUEST?
         BE    POSTSPY            YES, RESEND THE LATEST TPUT.
         TCLEARQ INPUT            NO, FLUSH QUEUED INPUT.
         B     REDOJOBS           CONTINUE SPYING.
WTPA2CHK CLI   INBUFF,X'6E'       PA2 - RECONFIRM REQUEST?
         BNE   STOPWAIT           NO, STOP WAITING.
         LA    R1,WTPA2MSG        YES, WRITE A LITTLE DATA STREAM.
         LA    R0,L'WTPA2MSG
         ICM   R1,B'1000',TPUTFLG
         TPUT  (1),(0),R
         B     REDOJOBS          CONTINUE WAITING.
         DROP  R3                ASCB.
         SPACE
CMDMOVE  MVC   LL-74(0,R2),SECRB+4              <<< EXECUTED >>>
PARMMOVE MVC   LL-73(0,R2),SECRB+2              <<< EXECUTED >>>
TGETMOVE MVC   0(0,R7),SECWORKA+3               <<< EXECUTED >>>
         TITLE 'JOB STATUS MONITOR - SHOW NAME/TOKEN PAIRS'
JNTTSHOW ST    R7,WORK           SAVE RETURN ADDRESS.
         LA    R5,72
         MVCP  JNTTHOLD(R5),0(R6),R14   COPY NTT HEADER.
         ICM   R6,15,JNTTHOLD+64 POINT TO FIRST NTTE.
         BZ    JNTTDONE          NO NAME/TOKEN PAIRS.
         LTR   R4,R4             TASK-LEVEL?
         BNZ   JNTPLOOP          YES.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-79(R2),C' '
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-59(38,R2),JASNTHDR
         BAS   R1,JADDDDLN       SHOW NAME/TOKEN HEADING.
JNTPLOOP MVC   0(LL-79,R2),MEDX
         MVI   LL-79(R2),C' '
         MVC   LL-78(78,R2),LL-79(R2)
         MVCP  JNTTHOLD(R5),0(R6),R14   COPY NTTE.
         MVC   LL-75(16,R2),JNTTHOLD+8  SHOW THE NAME IN PINK.
*--      MVC   LL-57(16,R2),JNTTHOLD+24 SHOW THE TOKEN IN TURQUOISE.
         TR    LL-79(79,R2),XLATETBL
*--      MVI   LL-58(R2),X'25'
         LA    R15,LL-59(,R2)    POINT TO TOKEN HEX DISPLAY AREA.
         LA    R0,6              GET WORD COUNT.
         LA    R7,JNTTHOLD+16    POINT TO THE TOKEN.
JNTXLOOP MVI   0(R15),X'24'
         UNPK  1(9,R15),0(5,R7)
         TR    1(8,R15),HEX-C'0'
         LA    R15,9(,R15)       POINT TO NEXT AREA.
         LA    R7,4(,R7)         POINT TO WORD OF TOKEN.
         BRCT  R0,JNTXLOOP
         MVI   0(R15),X'25'
         BAS   R1,JADDDDLN       DETAIL LINE NOW COMPLETE.
         ICM   R6,15,JNTTHOLD+64 POINT TO NEXT NTTE.
         BNZ   JNTPLOOP          PROCESS NEXT NAME/TOKEN.
JNTTDONE L     R7,WORK           RESTORE RETURN ADDRESS.
         BR    R7
         SPACE 2
*  FORMAT GENERAL PURPOSE REGISTERS
*         ON INPUT: R5 -> 16 WORDS OF GPRS0->15
*                   R14 = RETURN ADDRESS
JFMTGPRS LA    R7,2              YES, TWO SCREEN LINES NEEDED.
         LA    R6,=C'0-7:8-F:'   GENERAL PURPOSE REGISTER LABELS.
GPRLINE  MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F6'   YELLOW.                        (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         LA    R0,8              EIGHT REGISTERS PER SCREEN LINE.
         MVC   LL-79(4,R2),0(R6) SUPPLY REGISTER LABELS.
         LA    R1,LL-74(,R2)     POINT TO FIRST REGISTER SLOT.
NEXTGPR  TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   *+8               NO, DISABLE TAB SELECTABLE FIELD.
         MVI   0(R1),X'24'       YES, MAKE ADDRESS TAB SELECTABLE.
         UNPK  1(9,R1),0(5,5)    UNPACK THE REGISTER CONTENTS.
         TR    1(8,R1),HEX-C'0'  CONVERT TO EBCDIC NUMERICS.
         MVI   9(R1),X'26'       TERMINATE SELECTION FIELD.
         LA    R1,9(,R1)         POINT TO NEXT REGISTER POSITION.
         LA    R5,4(,R5)         POINT TO NEXT REGISTER CONTENTS.
         BCT   R0,NEXTGPR        PROCESS NEXT GENERAL PURPOSE REGISTER.
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         LA    R6,4(,R6)         POINT TO NEXT LINE'S REGISTER LABELS.
         BCT   R7,GPRLINE        NO, DO TWO GPR DISPLAY LINES.
         BR    R14               RETURN TO CALLER.
         SPACE 2
         DROP  R11,R10,R9        JOBSTATS.
         TITLE 'JOB STATUS MONITOR - MACRO LIST FORMS'
ESTAEONJ ESTAE XMSABEND,PARAM=RETRYADR,SDWALOC31=YES,MF=L
         TITLE 'JOB STATUS MONITOR - TASK ABNORMAL END EXIT'
         USING XMSABEND,R15
XMSABEND CHI   R0,12             ENTRY CODE 12?
         BE    ENTRY12J          YES, ISSUE MSG AND PERCOLATE ABEND.
         SPACE
         STM   R14,R12,12(R13)   NO, SAVE REGISTERS IN SUPPLIED AREA.
         DROP  R15               XMSABEND.
         USING XMSABEND,R10
         LR    R10,R15           LOAD EXIT BASE REGISTER.
         USING SDWA,R3
         LR    R3,R1             POINT TO SYSTEM DIAGNOSTIC WORK AREA.
         OI    JOBFLAGS,FOILED   FLAG ABORT OF CROSS MEMORY PROCESSING.
         L     R2,ABNDCNTR       INCREMENT THE ABEND COUNTER.
         LA    R2,1(,R2)
         ST    R2,ABNDCNTR
         MVC   ABENDCMP,SDWAABCC SAVE THE LATEST ABEND CODE.
         MVC   ABENDPSW,SDWAEC1  SAVE CORRESPONDING PSW.
         XC    ABENDCRC,ABENDCRC CLEAR THE REASON CODE.
         TM    SDWACMPF,SDWARCF  IS SDWACRC VALID?
         BNO   XMSCRCOK          NO.
         L     R1,SDWAXPAD       POINT TO SDWAPTRS.
         USING SDWAPTRS,R1
         L     R1,SDWASRVP       POINT TO SDWARC1.
         DROP  R1                SDWAPTRS.
         USING SDWARC1,R1
         MVC   ABENDCRC,SDWACRC  SAVE ABEND REASON CODE.
         DROP  R1                SDWARC1.
XMSCRCOK L     R12,SDWAPARM      LOAD THE RETRY ADDRESS.
         SETRP WKAREA=(3),REGS=(14,12),DUMP=NO,RC=4,                   +
               RETADDR=(12),RETREGS=YES,FRESDWA=YES
         DROP  R3                SDWA.
         SPACE
ENTRY12J LR    R10,R15           LOAD EXIT BASE REGISTER.
         LR    R5,R14            SAVE RETURN ADDRESS.
         STATUS RESET,MC,STEP    RESTART ALL OTHER TASKS.
         L     R1,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R1
         L     R1,CVTOPCTP       POINT TO THE RMCT.
         DROP  R1                CVT.
         USING RMCT,R1
         L     R1,RMCTMCT        POINT TO THE MCT.
         DROP  R1                RMCT.
         USING MCT,R1
*                                SQA SHORTAGE?
         TM    MCTSFLGS,MCTSQA1+MCTSQA2
         BNZ   JOKSWAP2          YES, STAY NON-SWAPPABLE.
*                                AUXILIARY STORAGE SHORTAGE?
         TM    MCTOFLGS,MCTASM1+MCTASM2
         BNZ   JOKSWAP2          YES, STAY NON-SWAPPABLE.
*                                REAL/PAGEABLE STORAGE SHORTAGE?
         TM    MCTCFLGS,MCTRLSHT+MCTB16SH+MCTDRSHT+MCTB2GSH
         BNZ   JOKSWAP2          YES, STAY NON-SWAPPABLE.
         DROP  R1                MCT.
         SYSEVENT OKSWAP         NO, BECOME SWAPPABLE.
JOKSWAP2 DS    0H
         LA    R1,ESTAJMSG       POINT TO ESTAE EXIT NOTIFY MESSAGE.
         LA    R0,L'ESTAJMSG     GET THE LENGTH OF THIS MESSAGE.
         TPUT  (1),(0),R         DISPLAY THE MESSAGE ON THE SCREEN.
         LR    R14,R5            RESTORE RETURN ADDRESS.
         SLR   R15,R15           CONTINUE WITH ABEND (PERCOLATE).
         BR    R14               EXIT FROM EXIT.
         DROP  R10               XMSABEND.
         TITLE 'JOB STATUS MONITOR - VARIABLES AND CONSTANTS'
GRANDHRS DC    FD'3600000000000'
**ME1440 DC    F'82397'
SECPNTR  DC    A(0)
RBPTR    DC    AL1(0)
RBSAVER  DC    AL3(0)
SAVETCB  DC    A(0)
STACKPTR DC    A(0)              POINTER TO CURRENT TASKSTAK ELEMENT.
TASKSTAK DC    16F'0'
         DC    X'FFFFFFFF'       END-OF-TASKSTAK MARKER.
*GTLNADR DC    A(X'9CB6')        POINTER TO TGET DATA LENGTH COUNTER.
*GETADDR DC    A(0)              POINTER TO TSO/VTAM USER TGET BUFFER.
*PTLNADR DC    A(X'5E7C')        POINTER TO TPUT DATA LENGTH COUNTER.
TPTLNADR DC    A(X'A0F0')        POINTER TO TPUT DATA LENGTH COUNTER.
TPUTADDR DC    A(0)              POINTER TO TSO/VTAM USER TPUT BUFFER.
TGETSIZE DC    F'0'              SIZE OF TGET DATA READ.
TPUTSIZE DC    F'0'              SIZE OF TPUT DATA SENT.
TCBQUEUE DC    A(0)              TCB DISPATCHING QUEUE SCAN MARKER.
PTR2IHSA DC    A(0)              ADDRESS OF THE IHSA.
SAVELPSW DC    FL8'0'            LOCKED PSW SAVE AREA.
TIOTADDR DC    A(0)              ADDRESS OF TIOT BEING EXAMINED.
DDLINE1  DC    A(0)              ADDRESS OF THE FIRST DD DETAIL LINE.
TWENTYK  DC    F'20480'          LOWEST USER REGION ADDRESS.
ABNDCNTR DC    F'0'              ABENDS TRAPPED BY ESTAE EXIT COUNT.
ABENDCMP DC    F'0'              LATEST COMPLETION CODE.
ABENDCRC DC    F'0'              LATEST ABEND REASON CODE.
ABENDPSW DC    FL8'0'            LATEST ABEND PSW.
JNTTHOLD DC    XL72'00'          NAME/TOKEN HOLD AREA.
SPYDELAY DC    F'100'            CENTISEC WAIT TIME FOR SPY SAMPLING.
SPYSCRN  DC    H'0'              NUMBER OF POSITIONS ON THIS SCREEN.
PRIMESZ  DC    H'1920'           NUMBER OF POSITIONS ON PRIMARY SCREEN.
EIGHTJ   DC    H'8'
JTIOELEN DC    H'24'             TCT I/O COUNT TABLE ENTRY LENGTH.
PREVDDN  DC    CL8' '            HANDLE CONCAT'NS WITH 1ST DD SUPRSD.
TPUTCMND DC    CL2'1 '           SAVE AREA FOR INVALID WTAM WRITE/WCC.
ESTAJMSG DC    C'IMP/XA ESTAE EXIT J - ENTRY CODE 12 - NO VIRTUAL STORA+
               GE FOR RTM SDWA'
JOBFLAGS DC    X'20'             OPTION "J" DISPLAY OPTIONS FLAG BYTE.
FOILED   EQU   X'80'             CROSS MEMORY FOILED BY SWAP-OUT/ABEND.
REGS     EQU   X'40'             DISPLAY TASK GENERAL PURPOSE REGS.
PRBS     EQU   X'20'             DISPLAY (PROGRAM) REQUEST BLOCKS.
LLES     EQU   X'10'             DISPLAY LOAD LIST ELEMENTS.
CDES     EQU   X'08'             DISPLAY CONTENTS DIRECTORY ELEMENTS.
JVSM     EQU   X'04'             DISPLAY VIRTUAL STORAGE SUBPOOLS.
SPY      EQU   X'02'             SPY ON TSO USERS.
WAIT     EQU   X'01'             WAIT-TILL-SWAPPED-IN PROCESSING.
JOBFLAG2 DC    X'0A'             OPTION "J" DISPLAY OPTIONS FLAG BYTE.
ODCB     EQU   X'80'             DISPLAY OPEN DCB DETAILS.
NODD     EQU   X'40'             SUPPRESS FILE/DATA SET STATUS DISPLAY.
ISPF     EQU   X'20'             ISPF TERMINAL LOGICAL DISPLAY FETCHED.
PTLN     EQU   X'10'             TPUT DATA LENGTH SUCCESSFULLY FETCHED.
PPRM     EQU   X'08'             DISPLAY PROGRAM PARAMETER.
JALT     EQU   X'04'             ALTERNATE SCREEN SIZE OPERATIONAL.
XCP0     EQU   X'02'             DISPLAY DATA SETS WITH NO I/O (YET).
FDAT     EQU   X'01'             FETCH FILE DATA IF POSSIBLE.
JOBFLAG3 DC    X'00'             OPTION "J" FLAG BYTE.
TSOJ     EQU   X'80'             TSO TMP JOB STEP.
LTCB     EQU   X'40'             LOCKED TCB STATUS IS IN IHSA.
JVSPFLAG DC    C'0'              DQE CHAIN SELECTION FLAG.
OPENMODE DC    CL32'INBK2?IOUD5?OXOI8?9?A?B?C?D?EXOT'
RDWRTIND DC    CL4'RWGP'         READ/WRITE/GET/PUT FLAG.
JASNTHDR DC    CL38'ADDRESS-SPACE-LEVEL NAME/TOKEN PAIR(S)'
STEPHDR  DC    C'JOBNAME   STEPNAME  PROCSTEP  STP  APF  PAS  EXCP-COUN+
               T    REGION  TPUTS  TGETS'
TIOTHDR  DC    CL79'FILENAME DEV# VOLUME EXCPCT BLKSZ DATA-SET-NAME----+
               -------------------- CNCT/IO'
ODCBHDR  DC   CL51'BLKSZ LRECL ACCES DSO BF# MMBBBBCCCCHHHHRR MEM-TTRN'
*GMRVIRT DC    CL79'                        VIRT ZZZZ9K   SYS ZZZZ9K
*              EXT ZZZZZZZK   SYS ZZZZZZZK '
ALRM1MSG DC    C'ALARM: POSSIBLE SECURITY BREACH - TSO USER '
ALRM2MSG DC    C'IS USING ACID '
SECUSER  DC    XL9'00'
JOBGTMSG DC    X'C11140403C40400011C5C2&LOW'
         DC    C'ENTER COMPLETE VALID JOB NAME'
         DC    X'&MED',C'===>',X'1BC94E132841F4'
STATSJOB DC    X'0000000000000000'
         DC    X'2841001BF8C2114BD2&LOW'
         DC    C'(ENTER',X'&HIGH',C'****####',X'&LOW'
         DC    C'TO SPECIFY ASID X''####'' - USE',X'&HIGH',C'=',X'&LOW'
         DC    C'AS SHORTHAND FOR',X'&MED',C'****'
STATSELF DC    C'????'
         DC    X'2842F5',C')'
JOBGTLEN EQU   *-JOBGTMSG
SPYONMSG DC    X'C31140401DF8',C'IMPXA-SPY',X'3C4040',C'?',X'13'
SPYONLEN EQU   *-SPYONMSG
WRITEMSG DC    X'C1115DE9',C'{WRT-CMD,WCC=X'''
WRITECDE DC    C'0000''!?}'
WRITELEN EQU   *-WRITEMSG
WTPA2MSG DC    X'C11140C1E613'
JSTTEXT  DC    C'ATTN - SPY TERMINATED'
JWCTEXT  DC    C'ATTN - WAIT CANCELLED'
STMSG    DC    X'27F5'
WCMSG    DC    X'C5115CF01DF82842F22841F2'
JREDTXT  DC    C'                     '
         DC    X'1140402842001D402841F41300001DF8'
STMSGLEN EQU   *-STMSG
WCMSGLEN EQU   *-WCMSG
JABNDMSG DC    X'2841F21BF8502842F1'           REVERSE,HIGH,BLUE.
DIECOUNT DC    CL6' ZZZZ9'
         DC    CL32' X-MEM ABENDS   -   LATEST WAS S'
SYSABEND DC    CL3'000'
SYSRSN   DC    CL10' '
         DC    CL10'  -   PSW '
SYSAPSW1 DC    CL9' '
SYSAPSW2 DC    CL9' '
         SPACE
         LTORG
         SPACE
TCBROLES DS    0H
         DC    CL8'  SYSLOG'       248 - SYSTEM LOG TASK.
         DC    CL8'     DSS'       249 - DYNAMIC SUPPORT SERVICES TASK.
         DC    CL8' JES MON'       250 - JES MONITOR TASK.
         DC    CL8'  MASTER'       251 - MASTER SCHEDULER TASK.
         DC    CL8' I/O RMS'       252 - I/O RMS TASK.
         DC    CL8' COMTASK'       253 - COMMUNICATIONS TASK.
         DC    CL8' SYS ERR'       254 - SYSTEM ERROR TASK.
         DC    CL8'  PAGING'       255 - PAGING SUPERVISOR TASK.
         SPACE
XLATESPF DC    X'00404040404040404040404040404040'  ISPF BUFFER
         DC    X'4040406D40404040404040405C405E40'       CHARACTERS.
         DC    X'40404040404040404040404040404040'
         DC    X'40404040404040404040404040404040'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE40'
         TITLE 'JOB STATUS MONITOR - FIND DATA SET NAME ROUTINE'
         USING TIODSNFM,R11
         USING TIOTDTLS,R2
TIODSNFM DS    0H                     SHOW DATA SET NAME IF POSSIBLE.
         MVC   TIODSN(36),=C'(FILE HAS NO JOB FILE CONTROL BLOCK)'
         SLR   R15,R15
         ICM   R15,7,SECTIOWA+12 JOB FILE CONTROL BLOCK PREFIX POINTER.
         BZR   R1                     NO JFCB POINTER.
         STM   R14,R12,12(R13)        SAVE REGISTERS.
         LR    R11,R5                 LOAD BASE REGISTER.
         MVC   TIODSN(36),=C'(JFCB LOCATED ABOVE THE 16 MEG LINE)'
         TM    SECTIOWA+14,X'07'      SENSIBLE JFCB ADDRESS?
         BZ    JLOWJFCB               YES, USE IT.
         ICM   R6,15,SAVRETAD         NO, GET THE JSCB ADDRESS.
         BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.
         LA    R5,4
*                                     FETCH QMPA ADDRESS.
         MVCP  WORK(R5),JSCBQMPI-IEZJSCB(R6),R14
         ICM   R6,15,WORK
         BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.
         LA    R1,SWALOCAL            POINT TO LOCAL STORAGE.
         C     R3,PSAAOLD             LOOKING AT SELF?
         BE    SWASPOK1               YES, LOCAL AREA IS GOOD.
         ICM   R1,15,SWAGLBL@         NO, POINT TO GLOBAL AREA.
         BZ    TIODSXIT               HANDLE ABSENCE OF AREA.
SWASPOK1 EQU   *
         XC    0(DYNSWALN,R1),0(R1)   RESET THE WORK AREA.
         ST    R13,4(,R1)             CHAIN SAVE AREAS.
         ST    R1,8(,R13)
         LR    R13,R1                 POINT TO NEW SAVE AREA.
         USING DYNSWA,R13
         LA    R0,EPA                 GET ADDRESS OF EPA.
         ST    R0,SWEPAPTR            INITIALIZE EPA POINTER.
         MVC   RL4SWA(2),=CL2'RL'
         USING ZB505,EPA
         XC    SWAEPAX,SWAEPAX        CLEAR EXTERNAL PARAMETER AREA.
         STCM  R15,7,SWVA             SUPPLY SVA.
         ST    R6,SWQMPA              SUPPLY QMPA ADDRESS.
         LTR   R14,R14                LOOKING AT SELF?
         BNZ   SLFSWAOK               YES.
         SAC   256                    NO.
SLFSWAOK EQU   *
*        SWAREQ FCODE=RL,EPA=SWEPAPTR,UNAUTH=YES,MF=(E,SWAPARMS)
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         LA    1,SWAPARMS              PUT THE ADDRESS OF THE PARAMETER
*                                      LIST IN REGISTER 1         @L2A
*        LA    0,=CL2'RL'              GET ADDRESS OF FCODE       @L2A
         LA    0,RL4SWA
         ST    0,4(,1)                 PUT ADDRESS OF FCODE IN THE
*                                      2ND WORD OF PARAMETER LIST @L2A
         LA    0,SWEPAPTR              GET ADDRESS OF EPAPTR      @L2A
         ST    0,0(,1)                 PUT ADDRESS OF EPAPTR IN THE
*                                      1ST WORD OF PARAMETER LIST @L2A
         LA    13,0(,13)               PREPARE R13 FOR CALL       @L2A
         L     15,CVTPTR(0,0)          GET POINTER TO CVT         @P1C
         USING CVTMAP,15                                          @L2A
         L     15,CVTJESCT             GET POINTER TO JESCT       @L2A
         USING JESCT,15                                           @L2A
         L     15,JESCTEXT             GET POINTER TO JESCTEXT    @L2A
         USING JESPEXT,15                                         @L2A
         L     15,JESQBSVA             GET ADDRESS OF UNAUTHORIZED     +
                                       SWA MANAGER                @T0A
         DROP  15                                                 @T0A
         BALR  14,15                   BRANCH TO SWA MANAGER      @T0A
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         SAC   0                      REVERT TO PRIMARY ASC MODE.
         L     R4,SWBLKPTR            GET STORAGE ADDRESS.
         L     R13,4(,R13)            POINT TO PREVIOUS SAVE AREA.
         DROP  R13                    DYNSWA.
         USING GOTAREA,R13
         L     R14,12(,R13)           RESTORE MVCP KEY VALUE.
         LR    R1,R15                 SAVE RETURN CODE.
         LR    R15,R4                 COPY SWA STORAGE ADDRESS.
         LTR   R1,R1                  SUCCESS?
         BZ    JSVAOKAY               YES, USE RESULT.
         MVC   TIODSN+36(4),=C' RC='  NO, SHOW RETURN CODE.
         STC   R1,TIODSN+41
         SRL   R1,4
         STC   R1,TIODSN+40
         NC    TIODSN+40(2),=X'0F0F'
         TR    TIODSN+40(2),HEX
         B     TIODSXIT
**       LA    R6,24(,R6)             POINT TO QMAT ADDRESS.
**VAQMAT MVCP  WORK(R5),0(R6),R14     FETCH QMAT ADDRESS.
**       ICM   R6,15,WORK
**       BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.
**       C     R15,=A(64*1024)        SVA > 64K?
**       BL    JSVAGOOD               NO.
**       LA    R6,12(,R6)             YES, NEED CHAINED QMAT.
**       S     R15,=A(64*1024)        REDUCE "OFFSET".
**       B     JSVAQMAT
**VAGOOD LA    R6,1(R15,R6)           POINT TO JFCB ADDRESS.
**       MVCP  WORK(R5),0(R6),R14     FETCH JFCB ADDRESS.
**       ICM   R15,15,WORK
**       BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.
*        MVCP  WORK(R5),320(R6),R14   FETCH QDB ADDRESS.
*        ICM   R6,15,WORK
*        BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.
*        MVCP  WORK(R5),12(R6),R14    FETCH FIRST DSAB ADDRESS.
*DSABLP  ICM   R6,15,WORK
*        BNP   TIODSXIT               UNEXPECTED VALUE SO EXIT.
*        MVCP  WORK(R5),64(R6),R14    FETCH SIOT ADDRESS.
*        ICM   R7,15,WORK
*        BNP   JNXTDSAB               UNEXPECTED VALUE SO EXIT.
*        MVCP  WORK(R5),32(R7),R14    FETCH JFCB SVA.
*        CLM   R15,B'0111',WORK       CORRECT SIOT?
*        BNE   JNXTDSAB               NO, CONTINUE ALONG DSAB CHAIN.
*        MVCP  WORK(R5),156(R7),R14   YES, FETCH JFCB ADDRESS.
*        ICM   R15,15,WORK
*        BNZ   JSVAOKAY               USE IT.
*        MVC   TIODSN(36),=C'(SJFCBPTR=0 - NO DYNALC IN ASID YET)'
*        B     TIODSXIT               UNEXPECTED VALUE SO EXIT.
*NXTDSAB MVCP  WORK(R5),4(R6),R14     FETCH NEXT DSAB ADDRESS.
*        B     JDSABLP
JLOWJFCB LA    R15,16(,R15)           POINT PAST JFCB SWA PREFIX.
JSVAOKAY MVC   WORK,TIOTTRN           SAVE POSSIBLE DATA TO BE LOST.
         LA    R5,52                  GET DATA LENGTH.
         MVCP  TIODSN(R5),0(R15),R14  FETCH DATA SET AND MEMBER NAME.
         CLI   TIODSN+44,C' '         ANY MEMBER PRESENT?
         BE    GOTDSNAM               NO.
         CLI   TIODSN+43,C' '         YES, ROOM FOR BRACKET?
         BNE   GOTDSNAM               NO.
         MVI   TIODSN+43,C'('         YES, SUPPLY IT.
         LA    R1,TIODSN+42           POINT TO LAST POSSIBLE BLANK.
TDSNBLNK CLI   0(R1),C' '             BLANK TO SUPPRESS?
         BNE   DOMEMNAM               NO, DSNAME PROPER NOW OKAY.
         MVC   0(9,R1),1(R1)          YES, SHUFFLE BRACKET AND MEMBER.
         MVI   9(R1),C' '             SUPPLY TRAILING BLANK.
         BCTR  R1,0                   POINT TO PREVIOUS BYTE.
         B     TDSNBLNK               CHECK FOR ANOTHER BLANK.
DOMEMNAM LA    R1,9(,R1)              POINT TO LAST BYTE OF MEMBER.
TMEMBLNK CLI   0(R1),C' '             TRAILING BLANK IN MEMBER NAME?
         BNE   MEMBRACK               NO, COMPLETE DATA SET NAME.
         BCTR  R1,0                   YES, POINT TO PREVIOUS BYTE.
         B     TMEMBLNK               CHECK FOR ANOTHER BLANK.
MEMBRACK MVI   1(R1),C')'             SUPPLY CLOSING BRACKET.
GOTDSNAM CLI   TIOTTRN,C' '           BLANK AREA AT END OF LINE?
         BNE   TIODSXIT               NO, LEAVE AS IS AND RETURN.
         MVC   TIOTTRN,WORK           YES, RESTORE PREVIOUS DATA.
TIODSXIT LM    R14,R12,12(R13)        RESTORE REGISTERS.
         BR    R1                     RETURN TO CALLER.
         DROP  R2,R11            TIOTDTLS, TIODSNFM.
         SPACE
         LTORG
         SPACE
SWAGLBL@ DS    A(0)              GLOBAL STORAGE ADDRESS.
SWALOCAL DS    XL(DYNSWALN)      LOCAL STORAGE AREA FOR SELF.
         SPACE
         DS    0H
         TITLE 'JOB STATUS MONITOR - FORMAT SUBPOOL STORAGE DETAILS'
         USING JOBSTATS,R11,R10,R9
*
* ON INPUT:    R14             - KEY FOR MVCP
*              R13             - GOTAREA BASE
*              R12             - MAINLINE BASE
*              R11,R10,R9      - JOBSTATS BASE
*              R8              - JSTGDTLS BASE
*              R4              - SPQE BASE
*              R3              - RETURN ADDRESS
*              R2              - CURRENT DISPLAY LINE ADDRESS
*
         USING JSTGDTLS,R8
JSTGDTLS TM    JOBFLAGS,JVSM     FORMATTING STORAGE DETAILS?
         BZR   R3                NO, RETURN WITHOUT ACTION.
         ST    R3,SECTIOWA+4     YES, SAVE THE RETURN ADDRESS.
         ST    R4,SECTIOWA+32    SAVE THE SPQE POINTER.
J1       USING SPQE,SECTIOWA+32
JVSPQELP ICM   R4,15,J1.SPQENEXT ANY SPQE POINTER?
         BZ    JSTGEXIT          NO, SPQE CHAIN NOW PROCESSED.
         LA    R5,20             GET LENGTH OF SPQE.
         MVCP  J1.SPQE(R5),0(R4),R14      COPY SPQE.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F2'   RED.                           (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         MVC   LL-74(2,R2),=C'SP'
         LH    R0,J1.SPQESPID    SHOW SUBPOOL.
         CVD   R0,WORK
         MVC   LL-72(4,R2),ED3
         ED    LL-72(4,R2),WORK+6
         MVC   LL-66(6,R2),=C'NONSHR'
         TM    J1.SPQEFLGS,SPQESHR    SUBPOOL SHARED?
         BZ    *+10              NO.
         MVC   LL-66(6,R2),=C'SHARED'
         MVC   LL-58(3,R2),=C'KEY'
         SLR   R0,R0
         IC    R0,J1.SPQEKEY     GET STORAGE PROTECTION KEY.
         SRL   R0,4              SHIFT KEY INTO LOW-ORDER NYBBLE.
         STC   R0,LL-54(,R2)
         TR    LL-54(1,R2),HEX   MAKE EBCDIC PRINTABLE HEX CHARACTER.
         TM    J1.SPQEFLGS,SPQEOWN    SUBPOOL OWNED?
         BO    JUSESPQA               YES, SHOW STORAGE DETAILS.
         ICM   R0,7,J1.SPQETCB+1 OWNING TCB ADDRESS PRESENT?
         BZ    JVSHRTCB          NO, DON'T SHOW ZEROS.
         MVC   LL-50(12,R2),=C'OWNED BY TCB'
         UNPK  LL-37(7,R2),J1.SPQETCB+1(4)
         TR    LL-37(6,R2),HEX-C'0'
         MVI   LL-31(R2),C' '
JVSHRTCB BAS   R1,JADDLINE       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         B     JVSPQELP          LOOK AT NEXT SPQE.
J2       USING SPQA,SECTIOWA+52
JUSESPQA L     R7,J1.SPQESPQA    POINT TO THE SPQA.
         LA    R5,24             GET LENGTH OF SPQA.
         MVCP  J2.SPQA(R5),0(R7),R14      COPY SPQA.
         MVI   SECTIOWA+79,X'FF' FLAG END OF DQE POINTERS.
         TM    OSLEVEL+2,CVTH7703  OS/390 R10 OR LATER?
         BNO   JVSPQOK           NO, FINAL FINISH.
         MVI   SECTIOWA+79,X'CF' YES, CONDITIONAL FINISH.
JVSPQOK  LA    R3,J2.SPQA        POINT TO FIRST DQE POINTERS.
         LA    R0,8
         SLR   R3,R0             BACK UP 8.
         SLR   R7,R0             BACK UP 8.
JVSPQALP LA    R3,8(,R3)         POINT TO NEXT DQE POINTER PAIR.
         LA    R7,8(,R7)         GET ORIGINAL ADDRESS OF POINTERS.
         CLI   3(R3),X'FF'       END OF DQE POINTER PAIRS?
         BE    JVSPQELP          YES, PROCESS NEXT SPQE.
         CLI   3(R3),X'CF'       NEED TO FETCH SPQX DETAILS?
         BE    JVSPQX            YES.
J3       USING DQE,SECTIOWA+80
         MVC   J3.DQENEXT,0(R3)  COPY ADDRESS OF FIRST DQE POINTER.
JVDQELP  L     R15,J3.DQENEXT    POINT TO NEXT DQE.
         CR    R15,R7            END OF DQE CHAIN?
         BE    JVSPQALP          YES, LOOK AT NEXT DQE POINTER PAIR.
         LA    R5,24             GET LENGTH OF DQE.
         MVCP  J3.DQE(R5),0(R15),R14      COPY DQE.
         L     R0,J3.DQEAREA     DETERMINE LAST USED ADDRESS.
         A     R0,J3.DQESIZE
         BCTR  R0,0
         ST    R0,WORK
         MVI   WORK+5,C' '       RESET FRAGMENTATION FLAG.
J4       USING FQE,SECTIOWA+104
         MVC   J4.FQE(16),J3.DQE SET UP FIRST FQE POINTERS.
         B     JVFQENXT
JVSPQX   L     R7,J1.SPQESPQX    POINT TO THE SPQX.
         LA    R5,16             GET LENGTH OF SPQX.
         MVCP  J2.SPQA(R5),0(R7),R14      COPY SPQX.
         MVI   SECTIOWA+71,X'FF' FLAG END OF DQE POINTERS.
         B     JVSPQOK           PROCESS EXTENDED DQE ANCHORS.
JVFQELP  LA    R5,20             GET LENGTH OF FQE.
         MVCP  J4.FQE(R5),0(R6),R14       COPY FQE.
         L     R0,J3.DQESIZE     GET USED AREA LENGTH.
         S     R0,J4.FQESIZE     SUBTRACT FREE AREA LENGTH.
         ST    R0,J3.DQESIZE     SAVE NEW USED AREA LENGTH.
         CLC   J3.DQEAREA,J4.FQEAREA
         BNE   JVFNOTF           THIS FREE AREA IS NOT AT THE START.
         L     R0,J3.DQEAREA     GET USED AREA ADDRESS.
         A     R0,J4.FQESIZE     ADD FREE AREA LENGTH.
         ST    R0,J3.DQEAREA     SAVE NEW USED AREA ADDRESS.
         B     JVFQENXT          LOOK FOR NEXT FQE.
JVFNOTF  L     R0,J4.FQEAREA     DETERMINE LAST FREE ADDRESS.
         A     R0,J4.FQESIZE
         BCTR  R0,0
         C     R0,WORK
         BNE   JVFNOTL           THIS FREE AREA IS NOT AT THE END.
         L     R0,WORK           GET USED AREA END ADDRESS.
         S     R0,J4.FQESIZE     SUBTRACT FREE AREA LENGTH.
         ST    R0,WORK           SAVE NEW USED END AREA ADDRESS.
         B     JVFQENXT          LOOK FOR NEXT FQE.
JVFNOTL  MVI   WORK+5,C'*'       SET FRAGMENTATION FLAG.
JVFQENXT L     R6,J4.FQENEXT     POINT TO THE NEXT FQE POINTERS.
         CR    R6,R15            END OF FQE CHAIN?
         BNE   JVFQELP           NO, PROCESS NEXT FQE.
         MVC   LL-50(4,R2),=C'ADDR'
         UNPK  LL-45(9,R2),J3.DQEAREA(5)
         TR    LL-45(8,R2),HEX-C'0'
         MVI   LL-37(R2),C' '
         MVC   LL-35(3,R2),=C'END'
         UNPK  LL-31(9,R2),WORK(5)
         TR    LL-31(8,R2),HEX-C'0'
         MVI   LL-23(R2),C' '
         MVC   LL-22(1,R2),WORK+5    LOAD FRAGMENTATION FLAG.
         MVC   LL-21(4,R2),=C'SIZE'
         UNPK  LL-16(9,R2),J3.DQESIZE(5)
         TR    LL-16(8,R2),HEX-C'0'
         MVI   LL-8(R2),C' '
JDQESZLP CLI   LL-16(R2),C'0'    LEADING ZERO?
         BNE   JDQESZOK          NO.
         MVC   LL-16(8,R2),LL-15(R2)
         B     JDQESZLP          SUPPRESS LEADING ZERO.
JDQESZOK CLI   SECTIOWA+71,X'FF' PROCESSING SPQX?
         BE    JDQESPQX          YES.
         C     R7,J1.SPQESPQA    ON FIRST DQE CHAIN FOR SPQA?
         BE    JDQER24           YES.
         CLI   SECTIOWA+79,X'FF' DOES SPQX EXIST?
         BE    JDQEROK           NO.
         LA    R0,8
         A     R0,J1.SPQESPQA
         CR    R7,R0
         BE    JDQER31           MUST BE IN FIRST 2 GIGABYTES.
         B     JDQEROK           CAN BE BACKED ANYWHERE IN 64-BIT.
JDQESPQX C     R7,J1.SPQESPQX    ON FIRST DQE CHAIN FOR SPQX?
         BNE   JDQEROK           NO.
JDQER31  MVC   LL-6(4,R2),=C'R<2G'
         B     JDQEROK
JDQER24  MVC   LL-6(5,R2),=C'R<16M'
JDQEROK  TR    LL-79(79,R2),XLATETBL
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELD.
         MVI   LL-46(R2),X'24'   MAKE AREA ADDRESS TAB SELECTABLE.
         MVI   LL-37(R2),X'22'
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         BNL   UNSSAR            HANDLE END OF FORMATTING AREA.
         MVC   0(LL-79,R2),LOWX  LOW INTENSITY.
         MVI   LL-80(R2),X'F2'   RED.                           (I3279)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         B     JVDQELP           PROCESS NEXT DQE.
JSTGEXIT L     R3,SECTIOWA+4     RESTORE THE RETURN ADDRESS.
         BR    R3                RETURN TO CALLER.
         DROP  J1,J2,J3,J4       SPQE, SPQA, DQE, FQE.
         DROP  R8                JSTGDTLS.
         TITLE 'JOB STATUS MONITOR - MORE CONSTANTS'
         LTORG
         SPACE
         DS    0H
         TITLE 'JOB STATUS MONITOR - CHECK RECORD FETCH AUTHORITY'
         USING JSETFDAT,R5
JSETFDAT OI    JOBFLAG2,FDAT     SET "FETCH DATA" FLAG.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'S'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BO    LOOK4DCB          YES, RETURN TO CALLER.
         L     R1,PSAAOLD        POINT TO CURRENT ASCB.
         ICM   R1,15,JBNS(R1)    GET JOBNAME POINTER.
         BZ    JDNOFDAT          FORGET CHECK IF NO JOB NAME POINTER.
         CLC   0(8,R1),SECUSER+1 RACF AND TSO USERIDS EQUAL?
         BE    LOOK4DCB          YES, RETURN TO CALLER.
JDNOFDAT NI    JOBFLAG2,255-FDAT RESET "FETCH DATA" FLAG.
         B     LOOK4DCB          RETURN TO CALLER.
         DROP  R5                JSETFDAT.
         TITLE 'JOB STATUS MONITOR - FORMAT GENERAL A.S. DETAILS'
*
* ON INPUT:    R13             - GOTAREA BASE
*              R12             - MAINLINE BASE
*              R11,R10,R9      - JOBSTATS BASE
*              R5              - JASDTLS BASE
*              R3              - SUBJECT ASCB ADDRESS
*              R2              - CURRENT DISPLAY LINE ADDRESS
*
         USING JASDTLS,R5
         USING ASCB,R3
JASDTLS  XC    SECUSER,SECUSER   CLEAR USERID OF TARGET ASID.
         MVC   0(LL-79,R2),MEDX  MEDIUM INTENSITY.
         MVI   8(R2),X'F7'       WHITE.                         (I3279)
         MVC   LL-79(79,R2),BLANKS
         MVC   LL-77(38,R2),=C'JOB STATUS MONITOR SELECTION CRITERIA:'
         TM    JOBFLAGS,PRBS     SHOWING (PROGRAM) REQUEST BLOCKS?
         BZ    JPRBSOK           NO
         MVC   LL-36(14,R2),=C'REQUEST BLOCKS'
JPRBSOK  TM    JOBFLAGS,CDES     SHOWING CONTENTS DIRECTORY ELEMENTS?
         BZ    JCDESOK           NO
         MVC   LL-20(18,R2),=C'CONTENTS DIRECTORY'
JCDESOK  BAS   R1,JADDLINE       FIRST CRITERIA LINE NOW COMPLETE.
         MVC   0(LL-79,R2),MEDX  MEDIUM INTENSITY.
         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)
         MVI   5(R2),X'C4'       UNDERLINE.                     (F9526)
         MVI   8(R2),X'F7'       WHITE.                         (I3279)
         MVC   LL-79(79,R2),BLANKS
         TM    JOBFLAGS,LLES     SHOWING LOAD LIST ELEMENTS?
         BZ    JLLESOK           NO
         MVC   LL-77(9,R2),=C'LOAD LIST'
JLLESOK  TM    JOBFLAGS,REGS     SHOWING GENERAL PURPOSE REGISTERS?
         BZ    JREGSOK           NO
         MVC   LL-66(7,R2),=C'GP-REGS'
JREGSOK  TM    JOBFLAG2,PPRM     SHOWING PROGRAM PARAMETER?
         BZ    JPPRMOK           NO
         MVC   LL-57(13,R2),=C'PGM PARAMETER'
JPPRMOK  TM    JOBFLAG2,NODD     SHOWING DATA DEFINITIONS?
         BO    JFILEOK           NO
         MVC   LL-42(10,R2),=C'DATA DEFNS'
         TM    JOBFLAG2,ODCB     SHOWING OPEN DCB DATA?
         BZ    JODCBOK           NO
         MVC   LL-30(8,R2),=C'OPEN DCB'
JODCBOK  TM    JOBFLAG2,XCP0     SHOWING FILES WITH NO I/O?
         BZ    JFILEOK           NO
         MVC   LL-20(10,R2),=C'0 EXCP DDS'
JFILEOK  TM    JOBFLAGS,JVSM     VIRTUAL STORAGE SUBPOOLS?
         BZ    JSTOROK           NO
         MVC   LL-8(7,R2),=C'STORAGE'
         MVC   LL-1(1,R2),JVSPFLAG
JSTOROK  BAS   R1,JADDLINE       SECOND CRITERIA LINE NOW COMPLETE.
         MVI   OPTNATR,X'FA'     ENABLE TAB SELECTABLE FIELDS.
         C     R3,PSAAOLD        LOOKING AT SELF?
         BE    JTABOKAY          YES, PROCEED.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'B'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         OC    OPTNATR,C'V'-C' '(R15)  GATE CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
JTABOKAY MVC   0(LL-79,R2),HIGHX HIGH INSTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVC   LL-79(79,R2),JOBHDR
         BAS   R1,JADDLINE       FIRST DATA LINE NOW COMPLETE.
         USING JOBDTLS,R2
         MVC   JOBCOLOR,LOWX
         MVI   JOBNAME,C' '
         MVC   JOBNAME+1(78),JOBNAME
         MVC   JOBNAME,STARTING
         ICM   R4,15,ASCBJBNI    GET POINTER TO JOB NAME.
         BNZ   HASNAME
         ICM   R4,15,ASCBJBNS    GET POINTER TO JOB NAME.
         BZ    NONAME
HASNAME  MVC   JOBNAME,0(R4)     LOAD ADDRESS SPACE NAME.
NONAME   UNPK  JOBASID(5),ASCBASID(3)
         TR    JOBASID,HEX-C'0'  SHOW ASID IN HEX.
         MVI   JOBASID+4,C' '
         MVC   JBTARGAS,ASCBASID SAVE ASID FOR ZOOM PROCESSING.
         MVC   JDSPARM2,JOBASID  SAVE ASID FOR DATASPACE LISTING.
*                                DISPATCHING PRIORITY IN HEX.
         UNPK  PRTY(5),ASCBDPH(3)
         TR    PRTY,HEX-C'0'
         MVI   PRTY+4,C' '
         L     R4,ASCBRSME       GET RAX POINTER.
         USING RAX,R4
         L     R4,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.
         DROP  R4
         CVD   R4,WORK
         MVC   FRAMESCT,ED5
         ED    FRAMESCT,WORK+5
         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.
         CVD   R4,WORK
         MVC   REALMEM(7),ED5    LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    REALMEM,WORK+5
         L     R6,ASCBASSB       NO, LOAD POINTER TO ASSB.
         USING ASSB,R6
         SR    R4,R4             GET ZERO.
         TM    ASCBFLG3,ASCBREUS REUSABLE ASID?
         BNO   *+8               NO.
         L     R4,ASSBISQN       YES, GET THE ASID INSTANCE NUMBER.
         ST    R4,JBTARGI#       SAVE IT FOR ZOOM PROCESSING.
         L     R4,ASSBVSC        GET NUMBER OF ASSIGNED VIO SLOTS.
         A     R4,ASSBNVSC       ADD NON-VIO SLOT COUNT.
         DROP  R6                ASSB.
         CVD   R4,WORK
         MVC   SLOTS,ED5
         ED    SLOTS,WORK+5
         LM    R6,R7,ASCBEJST    GET TCB TIME.
         LA    R4,TCBTIME
         BAS   R14,CPUTIMEX
         LM    R6,R7,ASCBSRBT    GET SRB TIME.
         LA    R4,SRBTIME
         BAS   R14,CPUTIMEX
         SLR   R6,R6
         L     R7,ASCBDCTI       LOAD CHANNEL CONNECT TIME.
         SLDL  R6,7              CONVERT TO MICROSECONDS.
         LA    R4,100(,R2)       POINT TO A FORMAT WORK AREA.
         MVC   0(13,R4),BLANKS   CLEAR IT.
         BAS   R14,IOCTIMEX
         MVC   IOCTIME,4(R4)     LOAD MM:SS.SS INTO DISPLAY LINE.
         CLI   4(R4),C':'        ANY HOURS?
         BNE   DONEJDTL          NO, TIME DONE.
         MVC   IOCTIME,1(R4)     LOAD HH:MM:SS INTO DISPLAY LINE.
         DROP  R2                JOBDTLS.
DONEJDTL BAS   R1,JADDLINE       SECOND DATA LINE NOW COMPLETE.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVC   LL-79(79,R2),ASCBHDR
         BAS   R1,JADDLINE       THIRD DATA LINE NOW COMPLETE.
         USING ASCDTLS,R2
         MVC   ASCCOLOR,LOWX
         MVI   ASCSYNC,C' '
         MVC   ASCSYNC+1(78),ASCSYNC
         L     R1,ASCBSYNC_PREZOS12    SHOW SVRB POOL SYNC COUNT.
         TM    OSLEVEL+5,CVTH7770  Z/OS R12 OR LATER?
         BNO   JGOTSYNC          NO.
         L     R1,ASCBASSB       YES, POINT TO THE ASSB.
         USING ASSB,R1
         L     R1,ASSBSYNC
         DROP  R1                ASSB.
JGOTSYNC CVD   R1,WORK
         MVC   ASCSYNC+1(9),ED11+3
         ED    ASCSYNC,WORK+3
         L     R0,32(,R3)        SHOW ACTIVE CPU COUNT FOR THIS A.S.
         TM    OSLEVEL+1,CVTH5510 SP5 OR HIGHER?
         BNO   JNCPUSOK          NO.
         L     R1,ASCBOUCB       YES, POINT TO OUCB.
         SLR   R0,R0
         IC    R0,648(,R1)
JNCPUSOK CVD   R0,WORK
         MVC   ASCCPUS,ED5
         ED    ASCCPUS,WORK+5
         UNPK  ASCAFFN(5),ASCBAFFN(3)
         TR    ASCAFFN,HEX-C'0'
         MVI   ASCAFFN+4,C' '    SHOW ADDRESS SPACE CPU AFFINITY.
         UNPK  ASCNDSP(5),ASCBDSP1(3)
         TR    ASCNDSP,HEX-C'0'
         MVI   ASCNDSP+4,C' '    SHOW NON-DISPATCHABILITY FLAGS.
         L     R1,ASCBSCNT       SHOW SUSPENDED SRB COUNT.
         CVD   R1,WORK
         MVC   ASCSRBS,ED5
         ED    ASCSRBS,WORK+5
         LH    R1,ASCBSSRB       SHOW STATUS STOP SRB COUNT.
         CVD   R1,WORK
         MVC   ASCSSRB,ED5
         ED    ASCSSRB,WORK+5
         UNPK  ASCLOCK(9),ASCBLOCK(5)
         TR    ASCLOCK,HEX-C'0'
         MVI   ASCLOCK+8,C' '    SHOW ADDRESS SPACE LOCAL LOCK STATUS.
         UNPK  ASCLOCI(9),ASCBLOCI(5)
         TR    ASCLOCI,HEX-C'0'
         MVI   ASCLOCI+8,C' '    SHOW HOLDER OF LOCAL LOCK.
         L     R1,ASCBCMLC_PREZOS12  SHOW CROSS MEMORY LOCK HOLD COUNT.
         TM    OSLEVEL+5,CVTH7770  Z/OS R12 OR LATER?
         BNO   JGOTCMLC          NO.
         L     R1,ASCBASSB       YES, POINT TO THE ASSB.
         USING ASSB,R1
         L     R1,ASSBCMLC
         DROP  R1                ASSB.
JGOTCMLC CVD   R1,WORK
         MVC   ASCCMLC,ED5
         ED    ASCCMLC,WORK+5
         SLR   R1,R1
         IC    R1,ASCBSMCT       SHOW CURRENT STEP-MUST-COMPLETE COUNT.
         CVD   R1,WORK
         MVC   ASCSMCT,ED3
         ED    ASCSMCT,WORK+6
         UNPK  ASCIODP(3),ASCBIODP(2)
         TR    ASCIODP,HEX-C'0'
         MVI   ASCIODP+2,C' '    SHOW I/O DISPATCHING PRIORITY.
         DROP  R2                ASCDTLS.
         BAS   R1,JADDLINE       FOURTH DATA LINE NOW COMPLETE.
         TM    OSLEVEL+5,CVTH7760  Z/OS RELEASE 11 OR LATER?
         BNO   JDONASSB          NO, SKIP NEW ASSB LINE.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVC   LL-79(79,R2),ASSBHDR
         BAS   R1,JADDLINE       FIELD HEADING LINE NOW COMPLETE.
         L     R8,ASCBASSB       POINT TO RSM ASCB EXTENSION.
         USING ASSB,R8
         USING ASSDTLS,R2
         MVC   ASSCOLOR,LOWX
         MVI   ASSREUS,C' '
         MVC   ASSREUS+1(78),ASSREUS
         MVC   ASSREUS(2),=C'NO'
         TM    ASCBFLG3,ASCBREUS
         BZ    JREUSEOK          NOT A REUSABLE ASID.
         MVC   ASSREUS,=C'YES'   IS A REUSABLE ASID.
JREUSEOK L     R1,ASSBISQN       SHOW ADDRESS SPACE INSTANCE NUMBER.
         CVD   R1,WORK
         MVC   ASSNSTNC,ED11
         ED    ASSNSTNC,WORK+2
         LM    R0,R1,ASSBHREQ    LOAD LOCAL LOCK OWNER DETAILS.
         STM   R0,R1,WORK        PUT INTO STORAGE.
         UNPK  ASSLASID(5),WORK+4(3)
         UNPK  ASSLADDR(9),WORK(5)
         TR    ASSLASID(13),HEX-C'0'
         MVI   ASSLASID+4,C' '
         MVI   ASSLADDR+8,C' '
         DROP  R8                ASSB.
         L     R8,ASCBRSME       POINT TO RSM ASCB EXTENSION.
         USING RAX,R8
         MVC   ASRPGMNM,RAXPPTNAME
         SR    R15,R15
         IC    R15,RAXLVMEMLIMS  LOAD MEMLIMIT SOURCE ID.
         NILL  R15,15            ENSURE IN KNOWN RANGE.
         SLA   R15,2             MULTIPLY BY 4 FOR INDEX.
         L     R15,MEML_SRC(R15) LOAD MEMLIMIT SOURCE LABEL.
         STCM  R15,15,ASRMLSRC   SHOW MEMLIMIT SOURCE LABEL.
         MVC   ASRMEMLM+6(8),=C'NO LIMIT'
         CLC   RAXLVMEMLIM,=X'00000FFFFFFFF000'
         BE    JMEMLMOK          NO MEMORY LIMIT.
         LM    R14,R15,RAXLVMEMLIM
         LA    R1,=C'MGTPEZY?'
JMEMLMLP LTR   R14,R14           NUMBER FITS IN A FULLWORD?
         BNZ   JMEMLMBG          NO, TOO BIG SO SCALE IT.
         LTR   R15,R15           IS IT ZERO?
         BZ    JMEMLIM#          YES, SHOW THE NUMBER.
         TMLL  R15,1023          ROUND ENOUGH TO SCALE AGAIN?
         BZ    JMEMLMBG          YES, SO DO THAT.
         LTR   R15,R15           IS SIGN BIT ON?
         BNM   JMEMLIM#          NO, SHOW THE NUMBER.
         BCTR  R14,0             YES, REMEMBER THIS.
         LA    R15,0(,R15)       ZERO THE SIGN BIT.
JMEMLIM# CVD   R15,WORK          GET NUMBER IN DECIMAL
         LTR   R14,R14           WAS THE SIGN BIT ON?
         BZ    JMEMLMED          NO, NUMBER IS READY.
         AP    WORK,=P'2147483648'
JMEMLMED MVC   ASRMEMLM,ED11
         ED    ASRMEMLM,WORK+2
         MVC   ASRMSCL1,0(R1)
         MVI   ASRMSCL2,C'B'
         B     JMEMLMOK          MEMORY LIMIT NOW FORMATTED.
JMEMLMBG SRDL  R14,10            DIVIDE NUMBER BY 1024.
         LA    R1,1(,R1)         POINT TO NEXT SCALE INDICATOR.
         B     JMEMLMLP          GO TEST NUMBER AGAIN.
JMEMLMOK EQU   *
         DROP  R2                ASSDTLS.
         BAS   R1,JADDLINE       DATA LINE NOW COMPLETE.
JDONASSB EQU   *
         L     R1,RCEADDR        POINT TO RSM CNTRL & ENUMERATION AREA.
         USING RCE,R1
         L     R8,ASCBRSME       POINT TO RSM ASCB EXTENSION.
         ICM   R1,15,RCEESPL     ANY USEABLE EXPANDED FRAMES?
         BNZ   JSHOWRAX          YES, SHOW DETAILS FROM RAX.
         DROP  R1                RCE.
         ICM   R1,15,RAXQUOT     ANY STORAGE ISOLATION SET?
         BNZ   JSHOWRAX          YES, SHOW DETAILS FROM RAX.
         LM    R0,R1,RAXUKDSS    LOAD USER KEY DATA SPACE DETAILS.
         AR    R1,R0             ANY NON-ZERO DATA?
         BZ    JDONERAX          NO, SO SKIP RAX DETAILS ALTOGETHER.
JSHOWRAX MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVC   LL-79(79,R2),RAXHDR
         BAS   R1,JADDLINE       FIFTH DATA LINE NOW COMPLETE.
         USING RAXDTLS,R2
         MVC   RAXCOLOR,LOWX
         MVI   ESTORMEM,C' '
         MVC   ESTORMEM+1(78),ESTORMEM
         L     R4,RAXESCT        LOAD EXPANDED FRAME COUNT.
         CVD   R4,WORK
         MVC   ESTORECT,ED5
         ED    ESTORECT,WORK+5
         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.
         CVD   R4,WORK
         MVC   ESTORMEM(7),ED5   LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    ESTORMEM,WORK+5
         L     R4,RAXQUOT        LOAD STORAGE ISOLATION PAGE QUOTA.
         CVD   R4,WORK
         MVC   ISOQOTCT,ED5
         ED    ISOQOTCT,WORK+5
         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.
         CVD   R4,WORK
         MVC   ISOQOMEM,ED7      LOAD EDIT MASK.
         ED    ISOQOMEM,WORK+4
         MVI   ISOQOSCL,C'K'     INDICATE KILOBYTES.
         MVC   ESTORSWP+1(2),=C'NO'
         TM    RAXFLGS1,RAXESSW  SRM ALLOWING SWAP TO EXPANDED STORAGE?
         BZ    GOTESSWP          NO, GOOD GUESS.
         MVC   ESTORSWP,=C'ALLOW'
GOTESSWP L     R4,RAXUKDSS       LOAD USER KEY DATA SPACE PAGE COUNT.
         CVD   R4,WORK
         MVC   DATSPCCT,ED5
         ED    DATSPCCT,WORK+5
         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.
         CVD   R4,WORK
         MVC   DATSPMEM(7),ED5   LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    DATSPMEM,WORK+5
         L     R4,RAXDSHWM       LOAD USER DATA SPACE HIGH WATER MARK.
         CVD   R4,WORK
         MVC   EDSHWMEM,ED5      LOAD EDIT MASK.
         ED    EDSHWMEM,WORK+5
         MVI   EDSHWMEM+6,C'M'   DENOTE MEGABYTES.
         SRL   R4,8              DIVIDE BY 256 TO GET 4K PAGE COUNT.
         CVD   R4,WORK
         MVC   EDSHWMCT,ED5
         ED    EDSHWMCT,WORK+5
         L     R4,RAXHSPCT       LOAD HIPERSPACE PAGE COUNT.
         CVD   R4,WORK
         MVC   EHIPERCT,ED5
         ED    EHIPERCT,WORK+5
         SLL   R4,2              MULTIPLY BY 4 TO GET KILOBYTES.
         CVD   R4,WORK
         MVC   EHIPRMEM(7),ED5   LOAD EDIT MASK AND KILOBYTES FLAG.
         ED    EHIPRMEM,WORK+5
         DROP  R2                RAXDTLS.
         BAS   R1,JADDLINE       SIXTH DATA LINE NOW COMPLETE.
JDONERAX MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVC   LL-79(79,R2),SRVHDR
         BAS   R1,JADDLINE       SEVENTH DATA LINE NOW COMPLETE.
         USING SRVDTLS,R2
         MVC   SRVCOLOR,LOWX
         MVI   VIOXPMEM,C' '
         MVC   VIOXPMEM+1(78),VIOXPMEM
         L     R4,RAXVIOCT       LOAD EXPANDED VIO PAGE COUNT.
         CVD   R4,WORK
         MVC   VIOXPCNT,ED5
         ED    VIOXPCNT,WORK+5
         SRL   R4,10-2           DIVIDE BY 8 TO GET MEGABYTES.
         CVD   R4,WORK
         MVC   VIOXPMEM,ED5      LOAD EDIT MASK.
         ED    VIOXPMEM,WORK+5
         MVI   VIOXPSCL,C'M'     INDICATE MEGABYTES.
         DROP  R8                RAX.
         L     R8,ASCBOUCB       POINT TO OUCB.
         USING OUCB,R8
         MVC   SRVSBSYS,OUCBSUBN LOAD SRM SUBSYSTEM NAME.
         L     R4,OUCBCPU        LOAD CPU SERVICE.
         CVD   R4,WORK           DISPLAY IT.
         MVC   SRVCPU,ED11
         ED    SRVCPU,WORK+2
         L     R4,OUCBIOC        LOAD IOC SERVICE.
         CVD   R4,WORK           DISPLAY IT.
         MVC   SRVIOC,ED11
         ED    SRVIOC,WORK+2
         L     R4,OUCBMSO        LOAD MSO SERVICE.
         CVD   R4,WORK           DISPLAY IT.
         MVC   SRVMSO,ED11
         ED    SRVMSO,WORK+2
         L     R4,OUCBSRB        LOAD SRB SERVICE.
         CVD   R4,WORK           DISPLAY IT.
         MVC   SRVSRB,ED11
         ED    SRVSRB,WORK+2
         L     R4,OUCBWMS        LOAD TOTAL SERVICE.
         CVD   R4,WORK           DISPLAY IT.
         MVC   SRVTOTAL,ED11
         ED    SRVTOTAL,WORK+2
         TR    LL-79(79,R2),XLATETBL  ENSURE DISPLAYABILITY.
         DROP  R2                SRVDTLS.
         BAS   R1,JADDLINE       EIGHTH DATA LINE NOW COMPLETE.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVC   LL-79(79,R2),OUCBHDR
         L     R1,RMCTADDR       POINT TO THE RMCT.
         TM    220(R1),X'7F'     IN WLM GOAL MODE?
         BM    JWMPOLOK          NO, NO POLICY TO EXTRACT.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    JWMPOLOK          NO, CANNOT EXTRACT POLICY.
JGETPOLA L     R0,JPQRYLEN       YES, GET AREA SIZE.
         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=(31,64)
         ST    R1,JPQRYPTR       SAVE AREA ADDRESS.
         MVC   LL-79+35(8,R2),=C'SRVCLASS'
         MODESET MF=(E,MDSTSUP)  GET INTO SUPERVISOR STATE.
         L     R4,JPQRYPTR       POINT TO QUERY AREA.
         IWMPQRY ANSAREA=(R4),ANSLEN=JPQRYLEN,QUERYLEN=JPQRETLN,       +
               MF=(E,JPQRYLST)   GET CURRENT WORKLOAD POLICY.
         LR    R4,R0             SAVE REASON CODE.
         MODESET MF=(E,MDSTPRB)  REVERT TO PROBLEM STATE.
         CLM   R4,3,=X'040A'     WAS AREA LARGE ENOUGH?
         BNE   JWMPOLOK          YES.
         LM    R0,R1,JPQRYLEN    NO, GET LENGTH AND ADDRESS OF AREA.
         FREEMAIN RU,A=(1),LV=(0),SP=SUBPOOL
         ST    R15,JPQRYPTR      RESET AREA POINTER.
         L     R1,JPQRETLN       GET REQUIRED AREA SIZE.
         LA    R1,4095(,R1)
         SRL   R1,12
         SLL   R1,12             ROUND UP TO NEXT PAGE BOUNDARY.
         ST    R1,JPQRYLEN       SAVE THE NEW SIZE.
         B     JGETPOLA          RETRY.
JWMPOLOK BAS   R1,JADDLINE       NINTH DATA LINE NOW COMPLETE.
         USING OUCBDTLS,R2
         MVC   OUCCOLOR,LOWX
         MVI   OUCBLINE,C' '
         MVC   OUCBLINE+1(78),OUCBLINE
         L     R4,ASCBTCBS       GET NUMBER OF READY TASKS.
         CVD   R4,WORK           SHOW UP TO 99999 CORRECTLY.
         MVC   RDYTASKS,ED5
         ED    RDYTASKS,WORK+5
         MVC   CPULIMIT,=C'NO LIMIT'
**       ICM   R7,15,ASCBJSTL    LOAD JOB STEP TASK CPU TIME LIMIT.
**       BZ    NOTCBLIM          NO TCB TIME LIMIT.
**       C     R7,TIME1440       TIME=1440?
**       BE    NOTCBLIM          YES, NO TCB TIME LIMIT.
         TM    ASCBRCTF,ASCBTOFF EXEMPT FROM JOB STEP TIMING CHECKS?
         BO    NOTCBLIM          YES, NO TCB TIME LIMIT.
         L     R7,ASCBJSTL       LOAD JOB STEP TASK CPU TIME LIMIT.
         C     R7,TIMEMAX        HIGH POSITIVE INTEGER?
         BE    NOTCBLIM          YES, NO TCB TIME LIMIT.
         MVC   CPULIMIT,=C'**NONE**'
         S     R7,ASCBEJST       LESS USED TCB TIME HIGH-ORDER WORD.
         BNP   NOTCBLIM          BRANCH IF NO TIME LEFT.
         MVC   CPULIMIT,BLANKS
         LA    R4,CPULIMIT-2     POINT TO CPU TIME LIMIT OUTPUT AREA.
         SLR   R6,R6             CLEAR FOR SHIFT.
         SLDL  R6,20             CONVERT TO MICROSECONDS.
         BAS   R14,IOCTIMEX      CONVERT TO HH:MM:SS.
         MVC   CPULIMIT+8(3),BLANKS  ERASE CENTISECONDS.
NOTCBLIM L     R4,276(,R8)       LOAD OUCBWSS.
         SLL   R4,2              TIMES FOUR FOR K.
         MVC   WRKGSTSZ(7),ED5   MOVE IN THE EDIT MASK AND KB FLAG.
         CVD   R4,WORK           CONVERT TO DECIMAL.
         ED    WRKGSTSZ,WORK+5   EDIT THE RESULT.
         UNPK  NEWDISPR(3),OUCBNDP(2)
         TR    NEWDISPR,HEX-C'0'
         MVI   NEWDISPR+2,C' '   NEW DISPATCHING PRIORITY.
         MVC   TRANNAME,OUCBTRXN LOAD TRANSACTION NAME.
         MVC   TRANCLAS,OUCBCLS  LOAD TRANSACTION CLASS NAME.
         SLR   R4,R4
         IC    R4,OUCBPGP        LOAD WMPGP OFFSET.
         L     R6,RMCTADDR       POINT TO THE RMCT.
         USING RMCT,R6
         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?
         BNM   JHAVEPER          YES, HAVE PERIOD NUMBER.
         DROP  R6                RMCT.
         SRL   R4,4              GET RELATIVE PERFORMANCE PERIOD.
         LA    R4,1(,R4)         CONVERT TO PERFORMANCE PERIOD NUMBER.
JHAVEPER STC   R4,PERFPERD       STORE IT.
         TR    PERFPERD,HEX      MAKE DISPLAYABLE.
         LH    R4,OUCBNPG        LOAD THE PERFORMANCE GROUP NUMBER.
         CVD   R4,WORK
         MVC   PERFGRPN,ED3
         ED    PERFGRPN,WORK+6
         SLR   R4,R4
         IC    R4,OUCBDMN        LOAD THE DOMAIN NUMBER.
         CVD   R4,WORK
         MVC   DMNUMBER,ED3
         ED    DMNUMBER,WORK+6
         ICM   R1,15,JPQRYPTR    POLICY AREA FILLED?
         BZ    JSWAPRSN          NO.
         SLR   R7,R7             YES.
         MVC   SRVCCLAS,BLANKS   ERASE PGN AND DOMAIN NUMBER.
         ICM   R7,3,OUCBWSCI     GET SERVICE CLASS INDEX FOR JOB.
         USING SVPOLHD,R1
         BNP   JPOLQRYF          ZERO IS INVALID.
         CH    R7,SVPOLDCC       IS SERVICE CLASS INDEX TOO HIGH?
         BH    JPOLQRYF          YES, CAN'T SHOW SERVICE CLASS.
         BCTR  R7,0              CONVERT TO RELATIVE ENTRY NUMBER.
         MH    R7,SVPOLDCL       GET OFFSET INTO CLASS ENTRIES.
         A     R7,SVPOLDCO       ADD OFFSET OF FIRST CLASS ENTRY.
         ALR   R7,R1             POINT TO SERVICE CLASS ENTRY.
         USING SVPOLCD,R7
         MVC   SRVCCLAS,SVPOLCNM LOAD THE SERVICE CLASS NAME.
         DROP  R1,R7             SVPOLHD, SVPOLCD.
JPOLQRYF L     R0,JPQRYLEN       GET LENGTH OF POLICY QUERY AREA.
         FREEMAIN RU,A=(1),LV=(0),SP=SUBPOOL
         ST    R15,JPQRYPTR      RESET AREA POINTER.
JSWAPRSN IC    R4,OUCBSRC        LOAD SWAP REASON CODE.
         SLA   R4,R4             USE SWAP REASON CODE AS INDEX.
         LA    R4,SWAPRSNS(R4)   POINT TO SWAP REASON TEXT.
         MVC   SWAPCODE,0(R4)
         BNZ   SWAPRSOK          SHOWN WHY SWAPPED OUT.
         TM    OUCBSFL,OUCBNSW   TEST FOR NON-SWAP.
         BZ    SWAPRSOK          SWAPPABLE AND SHOWN THAT SWAPPED IN.
         MVC   SWAPCODE+11(5),=C'(N/S)' SUPPLY NON-SWAP INDICATION.
         TM    ASCBRSMF,ASCBVEQR VIRTUAL EQUALS REAL USER?
         BZ    SWAPRSOK          NO, NON-SWAPPABLE V=V.
         MVC   SWAPCODE+12(3),=C'V=R'   YES, MOVE IN REAL INDICATION.
SWAPRSOK DS    0H                OUCB DETAILS LINE NOW COMPLETE.
         TR    LL-79(79,R2),XLATETBL  ENSURE DISPLAYABILITY.
         DROP  R2,R8             OUCDTLS, OUCB.
         BAS   R1,JADDLINE       TENTH DATA LINE NOW COMPLETE.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    JDSPACOK          NO, CANNOT EXTRACT DATASPACES.
         LA    R1,DSLSTPRM       POINT TO DS LIST ROUTINE PARAMETER.
         L     R15,=V(IMDSPACE)  GET DATASPACE LIST ROUTINE EP.
         BASR  R14,R15           INVOKE IT.
         LTR   R15,R15           SUCCESSFUL CALL?
         BNZ   JDSPACOK          NO.
         L     R6,JDSPARM4       YES, POINT TO RETURNED AREA.
         USING INFTDD1,R6
         ICM   R4,15,TDD1DSP#    GET THE DATASPACE COUNT FOR THIS ASID.
         BNP   JDSPACDN          NONE - THAT'S FUNNY.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVC   LL-79(79,R2),DSPCHDR
         BAS   R1,JADDLINE       LINE NOW COMPLETE.
         LA    R7,TDD1DSPA       POINT TO THE FIRST DATASPACE RECORD.
         USING TDD1DSP,R7
         USING DSPCDTLS,R2
JDSPACLP MVC   DSPCOLOR,LOWX
         MVI   DSPCNAME,C' '
         MVC   DSPCNAME+1(78),DSPCNAME
         MVC   DSPCNAME,TDD1DSPN SHOW DATASPACE NAME.
         UNPK  DSPCSTKN(9),TDD1STOK(5)
         UNPK  DSPCSTKN+8(9),TDD1STOK+4(5)
         TR    DSPCSTKN,HEX-C'0'
         MVI   DSPCSTKN+16,C' '
         MVC   DSPCSCOP+1(3),=C'ALL'
         TM    TDD1ATTR,TDD1SALL SCOPE=ALL?
         BO    JDSCOPED          YES.
         MVC   DSPCSCOP,=C'SINGLE'
         TM    TDD1ATTR,TDD1SSGL SCOPE=SINGLE?
         BO    JDSCOPED          YES.
         MVC   DSPCSCOP,=C'COMMON'
         TM    TDD1ATTR,TDD1SCMN SCOPE=COMMON?
         BO    JDSCOPED          YES.
         MVC   DSPCSCOP,BLANKS
JDSCOPED IC    R0,TDD1KEYS
         SRL   R0,4              SHOW STORAGE PROTECTION KEY.
         STC   R0,DSPCKEY
         NI    DSPCKEY,X'0F'
         TR    DSPCKEY,HEX
         TM    TDD1KEYS,X'08'    FETCH PROTECTED?
         BNO   *+10              NO.
         MVC   DSPCPROT,=C'YES'  YES.
         UNPK  DSPCOTCB(7),TDD1OTCB+1(4)
         TR    DSPCOTCB,HEX-C'0'
         MVI   DSPCOTCB+6,C' '
         UNPK  DSPCRANG(9),TDD1RANG(5)
         TR    DSPCRANG,HEX-C'0'
         MVI   DSPCRANG+8,C' '
         ICM   R0,15,TDD1ORIG    GET ORIGIN.
         BZ    *+8
         MVI   DSPCORIG+4,C'K'   INDICATE KILOBYTES IF NON-ZERO.
         SRL   R0,10             CONVERT TO KILOBYTES.
         CVD   R0,WORK
         MVC   DSPCORIG,ED3
         ED    DSPCORIG,WORK+6
         L     R0,TDD1BLKS       SHOW MAXIMUM 4K PAGE COUNT.
         CVD   R0,WORK
         MVC   DSPCMXPG,ED7
         ED    DSPCMXPG,WORK+4
         TR    LL-79(79,R2),XLATETBL
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   *+12              NO, DISABLE TAB SELECTABLE FIELD.
         MVI   DSPCSTKN-1,X'24'  MAKE DATA SPACE TAB SELECTABLE.
         MVI   DSPCSTKN+16,X'25'
         BAS   R1,JADDDDLN       LINE NOW COMPLETE.
         A     R7,TDD1DSPL       POINT TO THE NEXT DATASPACE RECORD.
         BCT   R4,JDSPACLP       PROCESS THE NEXT DATASPACE RECORD.
JDSPACDN L     R0,TDD1SIZE       GET SIZE OF RETURNED AREA.
         DROP  R2,R6,R7          DSPCDTLS, INFTDD1, TDD1DSP.
         FREEMAIN RU,LV=(0),A=(6),SP=130
         ST    R15,JDSPARM4      RESET AREA POINTER.
JDSPACOK NI    JOBFLAGS,255-FOILED  RESET CROSS MEMORY FOILED FLAG.
         L     R1,ASCBRSME       GET RAX POINTER.
         USING RAX,R1
         L     R1,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.
         DROP  R1                RAX.
         LTR   R1,R1             ZERO FRAMES FOR THIS ADDRESS SPACE?
         BZ    ASNOTIN           YES, IT MUST BE SWAPPED OUT.
         TM    ASCBRCTF,ASCBOUT  IS THIS ADDRESS SPACE SWAPPED OUT?
         BZ    ASIDIN            NO, TRY FOR SSAR.
ASNOTIN  TM    JOBFLAGS,WAIT     WAITING FOR SWAP-IN?
         BZ    ASIDOUT           NO.
         MVI   SPYDELAY+3,2      WAIT 1/50TH SEC IF PHYSICALLY OUT.
         LTR   R1,R1             ZERO FRAMES FOR THIS ADDRESS SPACE?
         BZ    SPYWAIT           YES, GO WAIT A LITTLE WHILE.
         MVI   SPYDELAY+3,1      WAIT 1/100TH SEC IF PHYSICALLY IN.
         B     SPYWAIT           GO WAIT A LITTLE WHILE.
ASIDOUT  XC    SAVETCB(72),SAVETCB  ERASE TCB PLACE MARKERS.
         MVC   0(LL-79,R2),HIGHX INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVI   LL-79(R2),C' '
         MVC   LL-78(78,R2),LL-79(R2)
         L     R1,ASCBIOSC       GET EXCP COUNT.
         CVD   R1,WORK           SHOW UP TO 99999999999 CORRECTLY.
         MVC   43+LL-79(12,R2),ED11
         ED    43+LL-79(12,R2),WORK+2
         MVC   56+LL-79(5,R2),=C'EXCPS'
         L     R7,RMCTADDR       POINT TO THE RMCT.
         USING RMCT,R7
         L     R7,RMCTTOD        GET CURRENT 1024MS SINCE IPL.
         DROP  R7                RMCT.
         L     R6,ASCBOUCB       POINT TO TARGET OUCB.
         USING OUCB,R6
         ICM   R1,15,OUCBTMS     GET TIME OF LAST SWAP-OUT.
         BNZ   GTJSWPTM          NON-ZERO SO CONTINUE.
         L     R1,OUCBTMO        USE TRANSACTION START TIME.
         DROP  R6                OUCB.
GTJSWPTM SR    R7,R1             SUBTRACT TIME OF LAST SWAP-OUT.
         BNP   NOJSWPTM          PREPOSTEROUS, I CAN'T BELIEVE IT.
         SLR   R6,R6             CLEAR FOR SHIFT.
         SLDL  R6,10             CONVERT TO MICROSECONDS.
         LA    R4,LL-79(,R2)     POINT TO CPU TIME LIMIT OUTPUT AREA.
         BAS   R14,IOCTIMEX      CONVERT TO HH:MM:SS.
         MVC   14+LL-79(28,R2),=CL28'ELAPSED TIME SINCE LAST SWAP'
NOJSWPTM BAS   R1,JADDLINE       ELEVENTH DATA LINE NOW COMPLETE.
         B     DONESSAR          CAN'T SSAR TO SWAPPED OUT ASID.
ASIDIN   ICM   R8,15,ASCBOUXB    ANY OUXB?
         BZ    NOSOUXB           NO, SECONDARY ASID HAS NO OUXB.
         USING OUXB,R8
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVI   LL-80(R2),X'F3'   PINK.                          (I3279)
         MVC   LL-79(79,R2),OUXBHDR
         BAS   R1,JADDLINE       ELEVENTH DATA LINE NOW COMPLETE.
         MVC   0(LL-79,R2),LOWX
         MVI   2(R2),X'F4'       UNDERSCORE.                    (I3279)
         MVI   5(R2),X'C4'       UNDERLINE.                     (F9526)
         MVI   LL-79(R2),C' '    BLANK NEXT DETAIL LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         L     R4,OUXBPIN        REPORT PAGE-IN COUNT.
         A     R4,OUXBCAPI       INCLUDE NON-PRIVATE PAGE-IN COUNT.
         CVD   R4,WORK
         MVC   LL-78(9,R2),ED11+3
         ED    LL-79(10,R2),WORK+3
         L     R4,OUXBPOUT       REPORT PAGE-OUT COUNT.
         CVD   R4,WORK
         MVC   LL-68(9,R2),ED11+3
         ED    LL-69(10,R2),WORK+3
         L     R4,OUXBVAMI       REPORT VIO PAGE-IN COUNT.
         CVD   R4,WORK
         MVC   LL-58(7,R2),ED11+5
         ED    LL-59(8,R2),WORK+4
         L     R4,OUXBVAMO       REPORT VIO PAGE-OUT COUNT.
         CVD   R4,WORK
         MVC   LL-50(7,R2),ED11+5
         ED    LL-51(8,R2),WORK+4
         L     R4,OUXBSPIN       REPORT SWAP PAGE-IN COUNT.
         CVD   R4,WORK
         MVC   LL-42(9,R2),ED11+3
         ED    LL-43(10,R2),WORK+3
         L     R4,OUXBSPOT       REPORT SWAP PAGE-OUT COUNT.
         CVD   R4,WORK
         MVC   LL-32(9,R2),ED11+3
         ED    LL-33(10,R2),WORK+3
         L     R4,OUXBSWCT       REPORT SWAP COUNT.
         CVD   R4,WORK
         MVC   LL-23(6,R2),ED5
         ED    LL-23(6,R2),WORK+5
         L     R4,OUXBCRMS       GET PAGE RECLAIM COUNT.
         A     R4,OUXBVAMR       ADD VIO RECLAIM COUNT.
         A     R4,OUXBHSPI       ADD COMMON RECLAIM COUNT.
         CVD   R4,WORK           REPORT TOTAL RECLAIM COUNT.
         MVC   LL-16(7,R2),ED11+5
         ED    LL-17(8,R2),WORK+4
         L     R4,OUXBTRC        REPORT SESSION TRANSACTION COUNT.
         CVD   R4,WORK
         MVC   LL-8(7,R2),ED11+5
         ED    LL-9(8,R2),WORK+4
         BAS   R1,JADDLINE       TWELVETH DATA LINE NOW COMPLETE.
         SLR   R14,R14           KEY ZERO WILL GET MOST DATA.
NOSOUXB  TM    MODESW2,AUTH      APF AUTHORIZED?
         BO    GOSPYING          YES, INITIATE CROSS-MEMORY MODE.
         LA    R14,X'80'         NO, USE KEY 8 ON SELF.
         C     R3,PSAAOLD        LOOKING AT THE PRIMARY ADDRESS SPACE?
         BE    SSAROKAY          YES, DON'T HAVE TO DO SSAR.
         B     ASIDOUT           CAN'T DO AXSET SO END OF STORY.
         SPACE
         DROP  R5,R3             JASDTLS, ASCB.
         TITLE 'JOB STATUS MONITOR - MORE VARIABLES AND CONSTANTS'
DSLSTPRM DC    A(JDSPARM1)       PLIST FOR IMDSLIST ROUTINE.
TIMEMAX  DC    X'7FFFFFFF'       HIGHEST POSSIBLE TIME LIMIT.
JDSPARM1 DC    CL4'LD  '         FUNCTION REQUEST TYPE - 'LD' OR 'DS'.
JDSPARM2 DC    XL4'00'           ASID OR STORAGE START ADDRESS.
JDSPARM3 DC    XL8'00'           DATASPACE STOKEN.
JDSPARM4 DC    A(0)              RETURNED DATA AREA.
JPQRYLEN DC    F'4096' \_______  POLICY QUERY AREA LENGTH.
JPQRYPTR DC    A(0)    /         POLICY QUERY AREA POINTER.
JPQRETLN DC    F'0'              RETURNED AREA SIZE REQUIREMENT.
         IWMPQRY MF=(L,JPQRYLST) POLICY QUERY PARAMETER LIST.
JOBHDR   DC    CL79'JOBNAME  ASID  PRTY  TCB-CPU-TIME  SRB-CPU-TIME  IN+
               CORE-FRAMES  SLOTS  CHN-CNCT'
ASCBHDR  DC    CL79' SVRBSYNC#  CPUS  AFFN  NDSP  SRBS  SSRB  LCL-LOCK +
                LOCK-IMG  CML#  SMC#  IODP '
ASSBHDR  DC    CL79'REUS   INSTANCE  LCL-OWNR-DTLS      MEMLIMIT FROM  +
                                   A.S.PROG'
RAXHDR   DC    CL79' EXPAND-FRAMES_INCL.HIPER-SPC  STG-ISOLATION  DATAS+
               PC-SIZE  DATASPAC-HWM  E-SWP'
SRVHDR   DC    CL79' VIO-IN-EXPND SBSYS CPU-SERVICE IOC-SERVICE MSO-SER+
               VICE SRB-SERVICE TOTAL-ACCUM'
OUCBHDR  DC    CL79'RDY-TCBS  WSS  TRX-NAME+CLASS  PP  PGN  DMN  NEW-DP+
                 TCB-LEFT  LAST-SWAP-REASON'
OUXBHDR  DC    CL79'  PAGE-INS  PAGEOUTS  VIO-IN VIO-OUT SWPPG-INS SWPP+
               GOUTS SWAPS  RECLMS XACTNCT '
DSPCHDR  DC    CL79'DATASPACE    SPACE-TOKEN   SCOPE  KEY/PROT OWNTCB  +
               MAX-ADDR  ORIGIN  MAX-PAGES '
         LTORG
         SPACE
         DC    0F
MEML_SRC DC    CL4'    '         0 - NOT SET.
         DC    CL4'SMF '         1 - SMFPRM OR DEFAULT OF 0.
         DC    CL4'JCL '         2 - SET FROM JCL.
         DC    CL4'REG0'         3 - NOLIMIT FROM REGION=0.
         DC    CL4'USI '         4 - SET BY IEFUSI.
         DC    CL4'OMVS'         5 - SET BY UNIX OMVS SEGMENT.
         DC    CL4'SETR'         6 - SET BY UNIX SETRLIMIT.
         DC    CL4'SPWN'         7 - SET BY UNIX SPAWN.
         DC    CL4'SETO'         8 - SET BY UNIX SETOMVS COMMAND.
         DC    CL4'AUTH'         9 - SET BY AUTHORIZED APPLICATION.
         DC    CL4'URG '         10 - IEFSMFIE (IEFUSI SET REGION).
         DC    CL4'_11_'         11
         DC    CL4'_12_'         12
         DC    CL4'_13_'         13
         DC    CL4'_14_'         14
         DC    CL4'BAD '         255 - ERROR.
SWAPRSNS DC    CL16'SWAPPED IN      '
         DC    CL16'TERM OUTPUT WAIT'
         DC    CL16'TERM INPUT WAIT '
         DC    CL16'LONG WAIT       '
         DC    CL16'AUX STOR SHORTAG'
         DC    CL16'REAL STOR SHORTG'
         DC    CL16'DETECTED WAIT   '
         DC    CL16'REQUESTED SWAP  '
         DC    CL16'ENQUEUE SWAP    '
         DC    CL16'EXCHANGE SWAP   '
         DC    CL16'UNILATERAL SWAP '
         DC    CL16'TRANSITION SWAP '
         DC    CL16'IMPROV CSTOR USE'
         DC    CL16'IMPROV PAGE RATE'
         DC    CL16'MAKE SWAPIN ROOM'
         DC    CL16'APPC WAIT       '
         DC    CL16'OMVS INPUT WAIT '
         DC    CL16'OMVS OUTPUT WAIT'
         DC    CL16'FRAME RECOVERY  '
         DC    CL16'                '
         TITLE 'JOB STATUS MONITOR - DETECT AND PROCESS ZOOM REQUEST'
         USING JOBZMCHK,R5
JOBZMCHK L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         SLR   R1,R1             CLEAR FOR INSERT.
         IC    R1,INBUFF+1       GET RELATIVE LINE NUMBER OF CURSOR.
         CH    R1,WINHDGCT       CURSOR ON A HEADING LINE?
         BNH   REDOJOBS          YES, UPDATE JOB STATUS DISPLAY.
         BCTR  R1,0              DISCOUNT WINDOW HEADING.
         BCTR  R1,0              MAKE LINE NUMBER RELATIVE TO ZERO.
         A     R1,WINTOP         CONVERT TO WINDOW LINE NUMBER.
         C     R1,WINLINES       CURSOR BEFORE SUMMARY LINE?
         BNL   REDOJOBS          NO, NOT A ZOOMABLE LINE.
         MH    R1,WINLNLEN       YES, GET AN INDEX INTO WINDOW AREA.
         A     R1,WINBUFF        POINT TO DETAIL LINE CONTENTS.
         DROP  R15               WNDWMNGR.
         SLR   R15,R15
         IC    R15,INBUFF+2      GET RELATIVE COLUMN NUMBER.
         LA    R2,LL-80(R15,R1)  POINT TO DATA UNDER CURSOR.
         MVC   INCHARS,BLANKS    CLEAR INPUT BUFFER.
         LA    R0,8              GET MAXIMUM ADDRESS DIGIT LENGTH.
         CLI   LL-80(R1),X'F5'   TURQUOISE LINE?
         BE    JZDSPCHK          YES, SHOULD BE A DATA SPACE LINE.
JZMSCNLP BCTR  R2,0              BACK UP A BYTE.
         CLI   0(R2),X'24'       FOUND START OF TAB SELECTABLE FIELD?
         BE    JZMFIELD          YES.
         BCT   R0,JZMSCNLP       NO.
         B     REDOJOBS          NOT A ZOOMABLE LINE SO CONTINUE.
JZMFIELD MVC   INCHARS+4(6),1(R2)
         CLI   1+6(R2),C' '      END OF SELECTABLE FIELD?
         BL    JVBZOOM6          YES.
         MVC   INCHARS+2(8),1(R2)
         B     JVBZOOM8
         USING DSPCDTLS,R1
JZDSPCHK CLC   JVALDSPC,DSPCSTKN-2
         BNE   REDOJOBS          NOT A DATASPACE LINE.
         L     R15,=A(VWORDONE)  POINT TO OPTION "V" VARIABLES.
         USING VWORDONE,R15
         MVC   VBDSNAME,DSPCNAME SHOW DATASPACE NAME.
         TR    DSPCSTKN,JVHEXTAB-C'A'
         PACK  WORK(5),DSPCSTKN(9)
         PACK  WORK+4(5),DSPCSTKN+8(9)
         MVC   VBDSTOKN,WORK     SUPPLY SPACE TOKEN.
         TR    DSPCKEY,JVHEXTAB-C'A'
         IC    R0,DSPCKEY
         SLL   R0,4
         STC   R0,VKEYPROT       SUPPLY STORAGE PROTECTION KEY.
         CLI   DSPCPROT,C'Y'     FETCH PROTECTED?
         BNE   *+8               NO.
         OI    VKEYPROT,X'08'    YES.
         XC    VBDSADDR,VBDSADDR ZERO THE INITIAL FETCH ADDRESS.
         CLI   DSPCORIG+3,C'0'   PAGE ZERO AVAILABLE?
         BE    *+8               YES.
         MVI   VBDSADDR+2,X'10'  NO, START AT THE 4K LINE.
         DROP  R1,R15            DSPCDTLS, VWORDONE.
         OI    JBTARGAS,X'80'    FLAG DATA SPACE FETCH TO BE DONE.
JVBZOOM6 MVI   INCHARS+2,C'0'    SUPPLY LEADING ZEROS.
         MVI   INCHARS+3,C'0'
JVBZOOM8 CLI   INCHARS+2,C'0'    ADDRESS STARTS WITH DECIMAL NUMERIC?
         BNL   JVBNUMOK          YES, NO NEED TO RESET "SIGN BIT".
         TR    INCHARS+2(1),JVNOSIGN-C'A'
JVBNUMOK MVC   INBUFF,BLANKS     CLEAR READ HEADER BUFFER.
         MVI   INBUFF,X'7C'      SIMULATE PFK 12.
         MVI   INCHARS,C'V'      SIMULATE OPTION "V" REQUEST.
         MVI   INCHARS+1,C'B'    LOAD SUBCOMMAND FOR "V" TO PROCESS.
         MVI   TGETLEN+1,16      SET INPUT LENGTH.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNJ          PERFORM INTER-OPTION JUMP.
         DROP  R5                JOBZMCHK.
         SPACE
         DROP  R11,R10,R9        JOBSTATS.
         SPACE
JVNOSIGN DC    C'234567'         MAP A->F TO 2->7.
JVALDSPC DC    X'4024F8'         C'  8'
JVHEXTAB DC    X'FAFBFCFDFEFF',XL9'00'
         DC    XL32'00'
         DC    C'0123456789'
         LTORG
