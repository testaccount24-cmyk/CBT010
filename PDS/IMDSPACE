IMDSPACE CSECT
IMDSPACE AMODE 31
IMDSPACE RMODE ANY

*********************************************************************
*                                                                   *
*        This module performs the following functions:              *
*        1. List all dataspaces owned by a specified address space, *
*           along with general information about the dataspace.     *
*        2. Display a 4K page of dataspace storage.                 *
*                                                                   *
*        Entry point : IMDSPACE                                     *
*                                                                   *
*        Input registers:                                           *
*          R0: N/A                                                  *
*          R1: Address of caller's parameter list pointer           *
*          R2-12: N/A                                               *
*          R13: Address of register save area                       *
*          R14: Return address                                      *
*          R15: Entry point address                                 *
*                                                                   *
*        Output registers:                                          *
*          R0-14: Same as on entry                                  *
*          R15: Return code                                         *
*               0 - IMDSPACE completed successfully                 *
*               4 - No dataspaces owned by the specified asid       *
*               8 - Invalid asid or STOKEN specified                *
*              12 - IMDSPACE parameter list error                   *
*              16 - IMDSPACE internal error                         *
*              20 - Storage address out of range                    *
*                                                                   *
*        Register usage(internal):                                  *
*          R0-11: Work registers                                    *
*          R12: Base register                                       *
*          R13: Address of workarea                                 *
*          R14-15: Work and linkage registers                       *
*                                                                   *
*                                                                   *
*        Upon entry to this routine, R1 must point to the address   *
*        of the caller's parameter list pointer.  The parameter     *
*        list must be formatted as follows:                         *
*                                                                   *
*        PARMLIST DS   0CL20                                        *
*        PARM1    DS   CL4 (function request type "LD" or "DS")     *
*        PARM2    DS   XL4 (asid or storage start address)          *
*        PARM3    DS   CL8 (dataspace STOKEN)                       *
*        PARM4    DS   A   (return information table address        *
*                           or storage display buffer address)      *
*                                                                   *
*        PARM1 is an input parameter and specifies the function     *
*        request type.  PARM1 can have any of the following values: *
*        "LD" - List all dataspaces owned by the specified asid.    *
*        "DS" - Display one 4k page of dataspace storage.           *
*        The function type must be left justified and blank padded  *
*        on the right.                                              *
*                                                                   *
*        PARM2 must contain an asid if PARM1 specified "LD".  The   *
*        asid must be right-justified and padded with zeros on the  *
*        left.  If PARM1 specified "DS", then PARM2 must contain    *
*        the start address of the dataspace page of storage that is *
*        to be displayed (address must be on a 4k page boundary).   *
*                                                                   *
*        PARM3 must contain a dataspace STOKEN if PARM1 specified   *
*        "DS".                                                      *
*                                                                   *
*        PARM4 is an output parameter and contains the address of   *
*        the return information table that this routine acquires    *
*        for a "LD" type call or the address of the storage display *
*        buffer for a "DS" type call.  Storage for the information  *
*        return table is obtained in E(PVT), subpool 130, and the   *
*        caller's psw key, while storage for the dataspace storage  *
*        display buffer is obtained in E(CSA), subpool 241, and the *
*        caller's psw key.  It is the caller's responsibilty to     *
*        free storage when finished with its' use.                  *
*                                                                   *
*        The format of the "LD" information table is as follows:    *
*                                                                   *
*        INFTDD1  DS    0D   All dataspaces owned by specified asid *
*        TDD1SIZE DS    F    Total table size                       *
*        TDD1DSP# DS    F    Number of dataspace records            *
*        TDD1DSPL DS    F    Dataspace record length                *
*        TDD1DSPA EQU   *    Dataspace records area                 *
*                                                                   *
*        Environment: Amode 31, rmode any, supervisor state,        *
*                     psw key 0.                                    *
*                                                                   *
*                                                                   *
*        Author: Bob Break                                          *
*                                                                   *
*********************************************************************
*********************************************************************

***********************************************************************
*                                                                     *
*        Initialization.                                              *
*                                                                     *
***********************************************************************

R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15

         USING PSA,0
IMDSP000 BAKR R14,0                     Save caller's environment
         LR    R12,R15                  Set base register
         USING IMDSP000,R12               and addressability
         B     IMDSP001                 Branch around module identifier
         DC    CL8'IMDSPACE'            Module name
         DC    C'&SYSDATE'              Assembly date
         DC    C'VERS01'                Version
IMDSP001 DS    0H
         MODESET MODE=SUP               Set supervisor state
         IPK   0(0)                     Get caller's psw key
         SPKA  0(0)                     Set psw key 0
         LA    R0,WORKSIZE              Get workarea size
         STORAGE OBTAIN,LENGTH=(R0),LOC=ANY
         LR    R3,R1                    Save workarea pointer
         LR    R14,R3                   Get pointer into work register
         LA    R15,WORKSIZE             Set move to length
         XR    R1,R1                    Set move from length and pad
         MVCL  R14,R0                   Clear workarea
         ST    R3,8(,R13)               Chain save areas
         ST    R13,4(,R3)               *
         LR    R13,R3                   Set workarea pointer
         USING WORKAREA,R13
         EREG  R0,R1                    Restore entry registers 0-1
         L     R1,0(,R1)                Point to input parm list
         ST    R1,PARMPTR               Save parm list pointer
         STC   R2,CALLKEY               Save caller's psw key

***********************************************************************
*                                                                     *
*        Extract the input parameters.                                *
*                                                                     *
***********************************************************************

IMDSP010 CLC   0(2,R1),=CL2'LD'          List dataspaces for asid?
         BNE   IMDSP011                  No - branch, continue
         L     R15,=A(IMDSP100)          Get dsp list routine pointer
         BALR  R14,R15                   Branch - process request
         B     IMDSPRET                  Branch - return
IMDSP011 CLC   0(2,R1),=CL2'DS'          Display dataspace storage?
         BE    IMDSP012                  Yes - branch, continue
         MVC   RETCODE,=F'12'            Set error return code
         B     IMDSPRET                  Branch - return
IMDSP012 L     R15,=A(IMDSP200)          Get dataspace storage pointer
         BALR  R14,R15                   Branch - process request
         B     IMDSPRET                  Branch - return

***********************************************************************
*                                                                     *
*        Return to caller.                                            *
*                                                                     *
***********************************************************************

IMDSPRET L     R2,RETCODE                Get return code
         LA    R0,WORKSIZE               Get workarea size
         LR    R1,R13                    Get workarea pointer
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)
         LR    R15,R2                    Set return code
         PR                              Return to caller

         LTORG


*********************************************************************
*********************************************************************
*                                                                   *
*        IMDSP100 - List all dataspaces owned by a specified asid.  *
*                                                                   *
*        Register usage:                                            *
*                                                                   *
*        Input           Output           Internal                  *
*        -----           ------           --------                  *
* R0-11  N/A             Unchanged        Work                      *
* R12    N/A             Unchanged        Base register             *
* R13    Workarea        Unchanged        Workarea                  *
* R14    BALR address    Return address   Work                      *
* R15    N/A             Unchanged        Work                      *
*                                                                   *
*        Environment - Internal IMDSPACE routine. Invoked by BALR.  *
*                                                                   *
*********************************************************************
*********************************************************************

IMDSP100 DS    0H
         BAKR  R14,0                Save caller's environment
         LR    R12,R15              Set up base register
         USING IMDSP100,R12           and addressability

***********************************************************************
*                                                                     *
*        Determine the specified asid number.                         *
*                                                                     *
***********************************************************************

IMDSP110 XR    R1,R1                Clear work register
         L     R14,PARMPTR          Get input parm pointer
         LA    R14,4(,R14)          Get input asid value
         LA    R15,4                Set scan limit
IMDSP111 CLI   0(R14),C'A'          Validity check digit
         BL    IMDSP115             Branch if invalid
         CLI   0(R14),C'F'          Validity check digit
         BH    IMDSP112             Branch of not 'A' - 'F'
         TR    0(1,R14),ASIDTRAN    Translate character
         B     IMDSP113             Branch - continue
IMDSP112 CLI   0(R14),C'0'          Validity check digit
         BL    IMDSP115             Branch if invalid
         CLI   0(R14),C'9'          Validity check digit
         BH    IMDSP115             Branch if invalid
IMDSP113 NI    0(R14),X'0F'         Isolate digit
         XR    R0,R0                Retrieve digit
         IC    R0,0(R14)            *
         MH    R1,=H'16'            Multiply asid # by 16
         AR    R1,R0                Add current digit to total
         LA    R14,1(,R14)          Bump to next character
         BCT   R15,IMDSP111         Loop back for next digit
IMDSP114 LTR   R1,R1                ASID zero?
         BZ    IMDSP115             Yes - branch, invalid
         L     R15,CVTPTR(,0)       Get CVT pointer
         L     R15,CVTASVT-CVT(,R15)  Get ASVT pointer
         C     R1,ASVTMAXU-ASVT(,R15)  Is asid number valid?
         BH    IMDSP115             Branch - invalid asid
         STH   R1,ASIDNBR           Save specified asid number
         SLL   R1,2                 Multiply asid number by 4
         LA    R14,ASVTFRST-ASVT(R1,R15)  Get ASVT entry pointer
         TM    0(R14),ASVTAVAL      Address space active?
         BZ    IMDSP120             Yes - branch, continue
IMDSP115 MVC   RETCODE,=F'8'        Set error return code
         B     IMDSP199             Branch - return

***********************************************************************
*                                                                     *
*        Obtain a list of all dataspaces owned by the specified       *
*        address space, along with general information for each       *
*        dataspace.                                                   *
*                                                                     *
***********************************************************************

IMDSP120 L     R1,CVTPTR(,0)        Get CVT pointer
         L     R1,CVTASVT-CVTMAP(,R1)  Get ASVT pointer
         USING ASVT,R1
         L     R0,ASVTMAXU          Get max address spaces
         LA    R1,ASVTENTY          Get address of ASVT entries
         DROP  R1                   ASVT
IMDSP121 TM    0(R1),ASVTAVAL       Slot occupied?
         BO    IMDSP122             No - bypass this one
         ICM   R14,15,0(R1)         Get ASCB pointer
         BZ    IMDSP122             Branch - no ASCB pointer
         USING ASCB,R14
         ICM   R15,15,ASCBJBNS      Get jobname field for stc/tsu
         BZ    IMDSP122             Branch - batch ASCB
         CLC   0(8,R15),=CL8'RASP'  RASP ASCB?
         BE    IMDSP123             Yes - branch, continue
IMDSP122 LA    R1,4(,R1)            Point to next ASVT entry
         BCT   R0,IMDSP121          Loop back to check next ASVT
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP199             Branch - return
IMDSP123 LA    R1,WORKDSPL          Set parm pointer for DSPLIST
         USING DSPLIST,R1
         MVC   DSPLASID,ASCBASID    Set RASP asid for DSPLIST
         DROP  R1                   DSPLIST
         DROP  R14                  ASCB
         L     R15,CVTPTR(,0)       Get CVT pointer
         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer
         L     R15,PVTCCDSL-PVT(,R15)  Get IARCCDSL address
         BALR  R14,R15              Invoke DSPLIST service routine
         LTR   R15,R15              DSPLIST successful?
         BZ    IMDSP124             Yes - branch, continue
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP199             Branch - return
IMDSP124 LA    R1,WORKDSPL          Get DSPLIST pointer
         USING DSPLIST,R1
         ICM   R2,15,DSPLDSDP       Get DSD pointer
         BNZ   IMDSP125             Branch - continue
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP199             Branch - return
         DROP  R1                   DSPLIST
         USING DSD,R2
IMDSP125 ICM   R15,15,DSDTNUM       Get number of dataspace records
         BNZ   IMDSP126             Branch - continue
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP129             Branch - continue
IMDSP126 LA    R3,DSDTAB            Point to DSDTAB
         USING DSDE,R3
         L     R9,DSDTNUM           Get # DSDTAB entries
         LA    R10,RASPALET         Point to RASP ALETs save area
IMDSP127 MVC   WORKALET,=F'-1'      Set input ALET for ALESERV
         ALESERV SEARCH,ALET=WORKALET,STOKEN=DSDESTOK,AL=WORKUNIT
         LTR   R15,R15              ALET found?
         BZ    IMDSP128             Yes - branch, continue
         ALESERV ADD,ALET=WORKALET,STOKEN=DSDESTOK,AL=WORKUNIT,        X
               CHKEAX=NO
IMDSP128 MVC   0(4,R10),WORKALET    Save RASP dataspace ALET
         LA    R3,DSDESIZE(,R3)     Bump to next DSDTAB entry
         LA    R10,4(,R10)          Bump to next RASP ALET save area
         BCT   R9,IMDSP127          Loop back for next DSDTAB entry
IMDSP129 L     R0,DSDLEN            Get DSD length
         XR    R3,R3                Get DSD subpool number
         IC    R3,DSDSPID           *
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R2),SP=(R3)
         DROP  R2,R3                DSD, DSDE
         CLC   RETCODE,=F'0'        Any errors so far?
         BNE   IMDSP199             Yes - branch, return
IMDSP130 XC    WORKDSPL(DSPLISTL),WORKDSPL  Clear DSPLIST parm list
         LA    R1,WORKDSPL          Set parm pointer for DSPLIST
         USING DSPLIST,R1
         MVC   DSPLASID,ASIDNBR     Set asid for DSPLIST
         DROP  R1                   DSPLIST
         L     R15,CVTPTR(,0)       Get CVT pointer
         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer
         L     R15,PVTCCDSL-PVT(,R15)  Get IARCCDSL address
         BALR  R14,R15              Invoke DSPLIST service routine
         LTR   R15,R15              DSPLIST successful?
         BZ    IMDSP131             Yes - branch, continue
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP199             Branch - return
IMDSP131 LA    R1,WORKDSPL          Get DSPLIST pointer
         USING DSPLIST,R1
         ICM   R2,15,DSPLDSDP       Get DSD pointer
         BNZ   IMDSP132             Branch - continue
         MVC   RETCODE,=F'4'        Set no dataspaces return code
         B     IMDSP199             Branch - return
         DROP  R1                   DSPLIST
         USING DSD,R2
IMDSP132 LA    R1,TDD1DSPS          Get dataspace record size
         ICM   R15,15,DSDTNUM       Get number of dataspace records
         BNZ   IMDSP133             Branch - continue
         MVC   RETCODE,=F'4'        Set no dataspaces return code
         B     IMDSP160             Branch - continue
IMDSP133 MR    R14,R1               Calculate dataspaces area length
         LA    R0,(TDD1DSPA-INFTDD1)  Get fixed INFTDD1 length
         ALR   R0,R15               Calculate total INFTDD1 length
         LR    R3,R0                Save INFTDD1 length
         IC    R5,CALLKEY           Get caller's psw key
         STORAGE OBTAIN,LENGTH=(R0),SP=130,KEY=(R5),LOC=ANY
         ST    R1,INFTABP           Save table pointer
         LR    R11,R1               Set table pointer
         LR    R14,R1               Get pointer into work register
         LR    R15,R3               Set move to length
         XR    R1,R1                Set move from length and pad
         MVCL  R14,R0               Clear table
         USING INFTDD1,R11
         ST    R3,TDD1SIZE          Set INFTDD1 size in table
         L     R1,PARMPTR           Get input parameter list pointer
         ST    R11,16(,R1)          Set table address for caller
         MVC   TDD1DSP#,DSDTNUM     Set # dataspace records
         LA    R1,TDD1DSPS          Get dataspace record size
         ST    R1,TDD1DSPL          Set dataspace record length
         LA    R3,DSDTAB            Point to DSDTAB
         USING DSDE,R3
         L     R9,DSDTNUM           Get # DSDTAB entries
         LA    R10,TDD1DSPA         Point to dataspace records area
         USING TDD1DSP,R10
IMDSP134 MVC   TDD1DSPN,DSDENAME    Set dataspace name
         MVC   TDD1STOK,DSDESTOK    Set dataspace STOKEN
         MVC   TDD1ASTE,DSDEASTE    Set dataspace ASTE
         XC    WORKDSPC(DSPCNVTS),WORKDSPC  Clear CONVERT parm area
         LA    R1,WORKDSPC          Set parm pointer for CONVERT
         LR    R4,R1                Get CONVERT parm area in work reg
         USING DSPCNVT,R4
         MVI   DSPCLEVL,X'01'       Set CONVERT level
         MVC   DSPCSTOK,DSDESTOK    Set dataspace STOKEN for CONVERT
         LA    R0,2                 Indicate CONVERT TONAME call type
         L     R15,CVTPTR(,0)       Get CVT pointer
         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer
         L     R15,PVTDLCON-PVT(,R15)  Get IARDLCON address
         BALR  R14,R15              Invoke CONVERT service routine
         LTR   R15,R15              CONVERT service successful?
         BNZ   IMDSP150             No - branch for next DSDTAB entry
         CLC   DSPCDSPN,DSDENAME    Converted dataspace name match?
         BNE   IMDSP150             No - branch for next DSDTAB entry
         MVC   TDD1ATTR,DSPCATTR    Set dataspace scope attribute
         MVC   TDD1KEYS,DSPCKEYS    Set dataspace key/fetch protect
         LA    R1,RASPALET          Point to RASP ALETs save area
         XR    R14,R14              Get RASP dataspace SIB index #
         IC    R14,DSDESTOK+3       *
         SLL   R14,2                Multiply index # by 4
         ALR   R1,R14               Index to RASP dataspace ALET
         LAM   R15,R15,0(R1)        Get RASP dataspace ALET
         L     R15,=X'00800000'     Point to start of SIB pool
         LA    R15,SIBHDRL(,R15)    Bump past SIB pool header
         SAC   512                  Enter access register mode
         SYSSTATE ASCENV=AR         Indicate AR mode
         USING SIB,R15
IMDSP135 CLC   SIBNAME,DSDENAME     Dataspace name match?
         BNE   IMDSP137             No - branch, check next SIB
         MVC   TDD1OTCB,SIBOTCB     Set owning TCB address
         MVC   TDD1RANG,SIBRANG     Set dataspace storage range
         L     R1,CVTPTR(,0)        Get CVT pointer
         L     R1,CVTSCPIN-CVT(,R1)  Get SCCB pointer
         USING SCCB,R1
         LH    R14,SCCBOCP          Get cpu data array offset
         ALR   R1,R14               Point to cpu data array
         DROP  R1                   SCCB
         USING SCCBCP,R1
         TM    SCCBCPF2,SCCBMPSB    Private space bit installed?
         BO    IMDSP136             Yes - branch, continue
         DROP  R1                   SCCBCP
         MVC   TDD1ORIG,=F'4096'    Set dataspace origin = 4096
IMDSP136 MVC   TDD1BLKS,SIBBLKS     Set max. # dataspace storage blocks
         B     IMDSP138             Branch - continue
IMDSP137 LA    R15,SIBSIZE(,R15)    Point to next SIB
         CLC   SIBNAME,=XL8'00'     Last SIB checked?
         BNE   IMDSP135             Loop back to check next SIB
IMDSP138 SAC   0                    Return to primary mode
         SYSSTATE ASCENV=P          Indicate primary mode
         LAM   R0,R15,=16F'0'       Clear all access registers
         DROP  R15                  SIB
IMDSP150 LA    R3,DSDESIZE(,R3)     Bump to next DSDTAB entry
         LA    R10,TDD1DSPS(,R10)   Bump to next dataspace record
         BCT   R9,IMDSP134          Loop back for next DSDTAB entry
IMDSP160 L     R0,DSDLEN            Get DSD length
         XR    R3,R3                Get DSD subpool number
         IC    R3,DSDSPID           *
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R2),SP=(R3)
         DROP  R2,R3,R4             DSD, DSDE, DSPCNVT
         DROP  R10,R11              TDD1DSP, INFTDD1

IMDSP199 PR                         Restore environment & return

         DROP  R12                  IMDSP100 base

         LTORG

ASIDTRAN EQU   *-C'A'
         DC    X'0A0B0C0D0E0F'      ASID translate table

SIBHDRL  EQU   X'14'                SIB pool header length


*********************************************************************
*********************************************************************
*                                                                   *
*        IMDSP200 - Display one 4k page of dataspace storage.       *
*                                                                   *
*        Register usage:                                            *
*                                                                   *
*        Input           Output           Internal                  *
*        -----           ------           --------                  *
* R0-11  N/A             Unchanged        Work                      *
* R12    N/A             Unchanged        Base register             *
* R13    Workarea        Unchanged        Workarea                  *
* R14    BALR address    Return address   Work                      *
* R15    N/A             Unchanged        Work                      *
*                                                                   *
*        Environment - Internal IMDSPACE routine. Invoked by BALR.  *
*                                                                   *
*********************************************************************
*********************************************************************

IMDSP200 DS    0H
         BAKR  R14,0                Save caller's environment
         LR    R12,R15              Set up base register
         USING IMDSP200,R12           and addressability
         L     R14,PARMPTR          Get input parm pointer
         MVC   STORADDR,4(R14)      Get input storage start address
         MVC   WORKSTOK,8(R14)      Get input STOKEN
         XC    WORKDSPC(DSPCNVTS),WORKDSPC  Clear CONVERT parm area
         LA    R1,WORKDSPC          Set parm pointer for CONVERT
         LR    R4,R1                Get CONVERT parm area in work reg
         USING DSPCNVT,R4
         MVI   DSPCLEVL,X'01'       Set CONVERT level
         MVC   DSPCSTOK,WORKSTOK    Set dataspace STOKEN for CONVERT
         LA    R0,2                 Indicate CONVERT TONAME call type
         L     R15,CVTPTR(,0)       Get CVT pointer
         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer
         L     R15,PVTDLCON-PVT(,R15)  Get IARDLCON address
         BALR  R14,R15              Invoke CONVERT service routine
         LTR   R15,R15              CONVERT service successful?
         BZ    IMDSP210             Yes - branch, continue
         MVC   RETCODE,=F'8'        Set error return code
         B     IMDSP299             Branch - return
IMDSP210 L     R1,CVTPTR(,0)        Get CVT pointer
         L     R1,CVTASVT-CVTMAP(,R1)  Get ASVT pointer
         USING ASVT,R1
         L     R0,ASVTMAXU          Get max address spaces
         LA    R1,ASVTENTY          Get address of ASVT entries
         DROP  R1                   ASVT
IMDSP211 TM    0(R1),ASVTAVAL       Slot occupied?
         BO    IMDSP212             No - bypass this one
         ICM   R14,15,0(R1)         Get ASCB pointer
         BZ    IMDSP212             Branch - no ASCB pointer
         USING ASCB,R14
         ICM   R15,15,ASCBJBNS      Get jobname field for stc/tsu
         BZ    IMDSP212             Branch - batch ASCB
         CLC   0(8,R15),=CL8'RASP'  RASP ASCB?
         BE    IMDSP213             Yes - branch, continue
IMDSP212 LA    R1,4(,R1)            Point to next ASVT entry
         BCT   R0,IMDSP211          Loop back to check next ASVT
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP299             Branch - return
IMDSP213 LA    R1,WORKDSPL          Set parm pointer for DSPLIST
         USING DSPLIST,R1
         MVC   DSPLASID,ASCBASID    Set RASP asid for DSPLIST
         DROP  R1                   DSPLIST
         DROP  R14                  ASCB
         L     R15,CVTPTR(,0)       Get CVT pointer
         L     R15,CVTPVTP-CVT(,R15)  Get PVT pointer
         L     R15,PVTCCDSL-PVT(,R15)  Get IARCCDSL address
         BALR  R14,R15              Invoke DSPLIST service routine
         LTR   R15,R15              DSPLIST successful?
         BZ    IMDSP214             Yes - branch, continue
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP299             Branch - return
IMDSP214 LA    R1,WORKDSPL          Get DSPLIST pointer
         USING DSPLIST,R1
         ICM   R2,15,DSPLDSDP       Get DSD pointer
         BNZ   IMDSP215             Branch - continue
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP299             Branch - return
         DROP  R1                   DSPLIST
         USING DSD,R2
IMDSP215 ICM   R15,15,DSDTNUM       Get number of dataspace records
         BNZ   IMDSP216             Branch - continue
         MVC   RETCODE,=F'16'       Set error return code
         B     IMDSP219             Branch - continue
IMDSP216 LA    R3,DSDTAB            Point to DSDTAB
         USING DSDE,R3
         L     R9,DSDTNUM           Get # DSDTAB entries
         LA    R10,RASPALET         Point to RASP ALETs save area
IMDSP217 MVC   WORKALET,=F'-1'      Set input ALET for ALESERV
         ALESERV SEARCH,ALET=WORKALET,STOKEN=DSDESTOK,AL=WORKUNIT
         LTR   R15,R15              ALET found?
         BZ    IMDSP218             Yes - branch, continue
         ALESERV ADD,ALET=WORKALET,STOKEN=DSDESTOK,AL=WORKUNIT,        X
               CHKEAX=NO
IMDSP218 MVC   0(4,R10),WORKALET    Save RASP dataspace ALET
         LA    R3,DSDESIZE(,R3)     Bump to next DSDTAB entry
         LA    R10,4(,R10)          Bump to next RASP ALET save area
         BCT   R9,IMDSP217          Loop back for next DSDTAB entry
IMDSP219 L     R0,DSDLEN            Get DSD length
         XR    R3,R3                Get DSD subpool number
         IC    R3,DSDSPID           *
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R2),SP=(R3)
         DROP  R2,R3                DSD, DSDE
         CLC   RETCODE,=F'0'        Any errors so far?
         BNE   IMDSP299             Yes - branch, return
IMDSP220 LA    R1,RASPALET          Point to RASP ALETs save area
         XR    R14,R14              Get RASP dataspace SIB index #
         IC    R14,WORKSTOK+3       *
         SLL   R14,2                Multiply index # by 4
         ALR   R1,R14               Index to RASP dataspace ALET
         LAM   R15,R15,0(R1)        Get RASP dataspace ALET
         L     R15,=X'00800000'     Point to start of SIB pool
         LA    R15,SIBHDRL(,R15)    Bump past SIB pool header
         SAC   512                  Enter access register mode
         SYSSTATE ASCENV=AR         Indicate AR mode
         USING SIB,R15
IMDSP221 CLC   SIBNAME,DSPCDSPN     Dataspace name match?
         BNE   IMDSP222             No - branch, check next SIB
         L     R0,SIBRANG           Get dataspace storage range
         B     IMDSP223             Branch - continue
IMDSP222 LA    R15,SIBSIZE(,R15)    Point to next SIB
         CLC   SIBNAME,=XL8'00'     Last SIB checked?
         BNE   IMDSP221             Loop back to check next SIB
         MVC   RETCODE,=F'16'       Set error return code
         DROP  R15                  SIB
IMDSP223 SAC   0                    Return to primary mode
         SYSSTATE ASCENV=P          Indicate primary mode
         LAM   R0,R15,=16F'0'       Clear all access registers
         L     R1,CVTPTR(,0)        Get CVT pointer
         L     R1,CVTSCPIN-CVT(,R1)  Get SCCB pointer
         USING SCCB,R1
         LH    R14,SCCBOCP          Get cpu data array offset
         ALR   R1,R14               Point to cpu data array
         DROP  R1                   SCCB
         USING SCCBCP,R1
         TM    SCCBCPF2,SCCBMPSB    Private space bit installed?
         BO    IMDSP224             Yes - branch, continue
         CLC   STORADDR,=F'0'       Storage address = 0?
         BNE   IMDSP224             No - branch, continue
         MVC   RETCODE,=F'20'       Set error return code
         B     IMDSP299             Branch - return
IMDSP224 L     R1,STORADDR          Get storage address
         A     R1,=F'4095'          Point to end of page
         CR    R1,R0                Storage address out of range?
         BNH   IMDSP225             No - branch, continue
         MVC   RETCODE,=F'20'       Set error return code
         B     IMDSP299             Branch - return
IMDSP225 L     R0,=F'4096'          Get storage buffer length
         IC    R5,CALLKEY           Get caller's psw key
         STORAGE OBTAIN,LENGTH=(R0),SP=241,KEY=(R5),BNDRY=PAGE,LOC=ANY
         L     R14,PARMPTR          Get input parm pointer
         ST    R1,16(,R14)          Set buffer pointer for caller
         LR    R7,R1                Set buffer pointer work register
         LR    R14,R1               Set move to address
         L     R15,=F'4096'         Set move to length
         XR    R1,R1                Set move from length and pad
         MVCL  R14,R0               Clear return buffer
         TM    DSPCATTR,TDD1SCMN    Dataspace scope = "COMMON"?
         BO    IMDSP230             Yes - branch, continue
         TM    DSPCATTR,TDD1SALL    Dataspace scope = "ALL"?
         BO    IMDSP231             Yes - branch, continue
         B     IMDSP240             Branch - scope = "SINGLE"
IMDSP230 MVC   WORKALET,=F'-1'      Set input ALET for ALESERV
         ALESERV SEARCH,ALET=WORKALET,STOKEN=WORKSTOK,AL=PASN
         LTR   R15,R15              ALET found?
         BZ    IMDSP232             Yes - branch, continue
         ALESERV ADD,ALET=WORKALET,STOKEN=WORKSTOK,AL=PASN,CHKEAX=NO
         B     IMDSP232             Branch - continue
IMDSP231 MVC   WORKALET,=F'-1'      Set input ALET for ALESERV
         ALESERV SEARCH,ALET=WORKALET,STOKEN=WORKSTOK,AL=WORKUNIT
         LTR   R15,R15              ALET found?
         BZ    IMDSP232             Yes - branch, continue
         ALESERV ADD,ALET=WORKALET,STOKEN=WORKSTOK,AL=WORKUNIT,        X
               CHKEAX=NO
IMDSP232 SAC   512                  Enter access register mode
         SYSSTATE ASCENV=AR         Indicate AR mode
         L     R15,STORADDR         Get storage start address
         LAM   R15,R15,WORKALET     Get dataspace ALET
         LA    R0,256               Prepare for MVPG
         MVPG  R7,R15               Move storage into return buffer
         SAC   0                    Return to primary mode
         SYSSTATE ASCENV=P          Indicate primary mode
         LAM   R0,R15,=16F'0'       Clear all access registers
         B     IMDSP299             Branch - return
IMDSP240 LA    R0,SRBMODSL          Get SRB modules lengths
         STORAGE OBTAIN,LENGTH=(R0),SP=241,LOC=ANY
         ST    R1,SRBMODSP          Save SRB modules pointer
         LR    R0,R1                Set move to address
         LA    R1,SRBMODSL          Set move to length
         LA    R14,SRBMODS          Set move from address
         LR    R15,R1               Set move from length and pad
         MVCL  R0,R14               Relocate SRB modules code
         L     R1,SRBMODSP          Get SRB modules pointer
         MVC   CALLASCB-SRBMODS(4,R1),PSAAOLD  Set ASCB for xmpost
         MVC   SRBSTOK-SRBMODS(8,R1),WORKSTOK  Set dataspace STOKEN
         MVC   SRBSTORA-SRBMODS(4,R1),STORADDR  Set storage address
         ST    R7,SRBBUFA-SRBMODS(,R1)  Set return buffer address
         LA    R0,SRBSIZE           Get SRB length
         STORAGE OBTAIN,LENGTH=(R0),SP=245,LOC=ANY
         ST    R1,SRBPTR            Save SRB pointer
         USING SRBSECT,R1
         XC    SRBSECT(SRBSIZE),SRBSECT  Initialize SRB
         MVC   SRBID,=C'SRB '       Set SRB identifier
         MVC   SRBASCB,DSPCASCB     Set ASCB pointer
         L     R15,PSAAOLD          Get current ASCB pointer
         MVC   SRBPASID,ASCBASID-ASCB(R15)  Set asid
         MVC   SRBPTCB,PSATOLD      Set TCB pointer
         L     R15,SRBMODSP         Set SRB modules pointer in SRB
         ST    R15,SRBEP            *
         OI    SRBEP,SRBMODE        Run SRB in AMODE 31
         LA    R15,RMTRBEG-SRBMODS(,R15)  Set RMTR pointer in SRB
         ST    R15,SRBRMTR          *
         OI    SRBRMTR,SRBRMODE     Run RMTR in AMODE 31
         L     R15,SRBMODSP         Get SRB modules pointer
         LA    R15,FRRBEG-SRBMODS(,R15)  Set FRR module pointer in SRB
         ST    R15,SRBFRRA          *
         OI    SRBFRRA,SRBRMODE     Run FRR in AMODE 31
         DROP  R1,R4                SRBSECT, DSPCNVT
         SCHEDULE SRB=(R1),SCOPE=LOCAL,FRR=YES
         LA    R3,100               Set maximum wait of 10 seconds
IMDSP241 STIMER WAIT,BINTVL=WAITTIME  Wait .1 second
         L     R15,SRBMODSP         Get SRB modules pointer
         TM    CALLECB-SRBMODS(R15),X'40'  Did SRB routine finish?
         BO    IMDSP242             Yes - branch, return
         BCT   R3,IMDSP241          Loop back to wait again
         MVC   RETCODE,=F'16'       Set error return code
         L     R15,SRBMODSP         Get SRB modules pointer
         L     R1,SRBPTR            Get SRB pointer
         USING SRBSECT,R1
         L     R15,SRBASCB          Get target ASCB pointer
         MVC   ASIDNBR,ASCBASID-ASCB(R15)  Set target asid
         XC    WORKPDQ,WORKPDQ      Init PURGEDQ parm list
         MVC   WORKPDQA,SRBPASID    Init PURGEDQ ASID
         MVC   WORKPDQT,SRBPTCB     Init PURGEDQ TCB pointer
         L     R3,SRBRMTR           Get RMTR pointer
         OI    SRBFLGS,SRBFRRCL     Set SRB not complete flag
         DROP  R1                   SRBSECT
         MVC   WORKPURG(PURGEDQL),PURGEDQ  Set PURGEDQ parm list
         PURGEDQ RMTR=(R3),                                            X
               ASID=ASIDNBR,                                           X
               ASIDTCB=WORKPDQ,                                        X
               MF=(E,WORKPURG)
         L     R15,SRBMODSP         Get SRB modules pointer
         TM    CALLECB-SRBMODS(R15),X'40'  SRB purged?
         BO    IMDSP242             Yes - branch, continue
         L     R1,SRBPTR            Get SRB pointer
         USING SRBSECT,R1
         L     R15,CVTPTR(,0)       Get CVT pointer
         LA    R15,CVTBRET-CVT(,R15)  Set "B R14" instruction pointer
         ST    R15,SRBEP                in SRB
         OI    SRBEP,SRBMODE        Run SRB in AMODE 31
         ST    R15,SRBRMTR          Replace RMTR routine pointer
         OI    SRBRMTR,SRBRMODE     Run RMTR in AMODE 31
         ST    R15,SRBFRRA          Replace FRR routine pointer
         OI    SRBFRRA,SRBRMODE     Run FRR in AMODE 31
         DROP  R1                   SRBSECT
IMDSP242 STIMER WAIT,BINTVL=WAITTIME  Wait .1 second
         ICM   R1,15,SRBPTR         Get SRB pointer
         BZ    IMDSP243             Branch - no SRB
         USING SRBSECT,R1
         TM    SRBPARM,X'80'        Did SRB execute?
         BZ    IMDSP243             No - branch, continue
         DROP  R1                   SRBSECT
         LA    R0,SRBSIZE           Get SRB size
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=245
IMDSP243 STIMER WAIT,BINTVL=WAITTIME  Wait .1 second
         ICM   R1,15,SRBMODSP       Get SRB modules pointer
         BZ    IMDSP299             Branch - return, no SRB modules
         LA    R0,SRBMODSL          Get SRB modules length
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=241

IMDSP299 STIMER WAIT,BINTVL=WAITTIME  Wait .1 second
         PR                         Restore environment & return

         DROP  R12                  IMDSP200 base

         LTORG

WAITTIME DC    F'10'                Wait interval (.1 second)

PURGEDQ  PURGEDQ MF=L                   PURGEDQ parameter list
PURGEDQL EQU   *-PURGEDQ


***********************************************************************
*                                                                     *
*        SRB routine.                                                 *
*                                                                     *
***********************************************************************

         USING PSA,0
SRBMODS  DS    0F
SRBBEG   EQU   *
         LR    R12,R15                   Set base register
         USING SRBBEG,R12                  and addressability
         LR    R8,R14                    Save return address
         LR    R10,R0                    Get SRB pointer
         USING SRBSECT,R10
         TM    SRBFLGS,SRBFRRCL          Main task not waiting?
         BOR   R14                       Yes - branch, return to system
         OI    SRBPARM,X'80'             Set SRB executed flag
         LR    R9,R2                     Get FRR parm list pointer
         USING FRRPARMS,R9
         XC    FRRPARMS(FRRPARML),FRRPARMS  Init FRR parm list
         ST    R10,FRRSRB                Set SRB ptr in FRR parm list
         MVC   SRBALET,=F'-1'       Set input ALET for ALESERV
         ALESERV SEARCH,ALET=SRBALET,STOKEN=SRBSTOK,AL=WORKUNIT
         LTR   R15,R15              ALET found?
         BZ    SRBMOVE              Yes - branch, continue
         ALESERV ADD,ALET=SRBALET,STOKEN=SRBSTOK,AL=WORKUNIT,          X
               CHKEAX=NO
         OI    SRBPARM,X'40'        Set ALET added flag
SRBMOVE  SAC   512                  Enter access register mode
         SYSSTATE ASCENV=AR         Indicate AR mode
         L     R15,SRBSTORA         Get storage start address
         LAM   R15,R15,SRBALET      Get dataspace ALET
         L     R7,SRBBUFA           Get return buffer address
         LA    R0,256               Prepare for MVPG
         MVPG  R7,R15               Move storage into return buffer
         SAC   0                    Return to primary mode
         SYSSTATE ASCENV=P          Indicate primary mode
         LAM   R0,R15,=16F'0'       Clear all access registers
         TM    SRBPARM,X'40'        ALET added?
         BZ    SRBSETLK             No - branch, continue
         ALESERV DELETE,ALET=SRBALET,CHKEAX=NO
SRBSETLK SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE
         OI    FRRFLAGS,FRRLOCAL         Set local lock held flag
         XR    R0,R0                     Indicate ECB in key 0 storage
         LA    R10,X'7F'                 Set post code
         SLL   R10,24                    *
         LA    R11,CALLECB               Get ECB pointer
         CLC   PSAAOLD,CALLASCB          Cross memory post?
         BE    SRBNXMP                   No - branch, continue
         O     R11,SRBHBIT               Indicate cross memory post
SRBNXMP  L     R13,CALLASCB              Get ASCB pointer
         LA    R12,SRBRTRN               Set post error address
         DROP  R12                       Base
         L     R15,CVTPTR(,0)            Get CVT pointer
         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point
         BALR  R14,R15                   Post ECB
         OI    FRRFLAGS,FRRPOST          Indicate post completed
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE
         NI    FRRFLAGS,255-FRRLOCAL     Reset local lock held flag
         LR    R14,R8                    Get return address
SRBRTRN  BR    R14                       Return to caller
         DROP


***********************************************************************
*                                                                     *
*        RMTR routine.                                                *
*                                                                     *
***********************************************************************

         USING PSA,0
RMTRBEG  DS    0H
         LR    R12,R15                   Set base register
         USING RMTRBEG,R12                 and addressability
         LR    R10,R1                    Get SRB pointer
         USING SRBSECT,R10
         OI    SRBPARM,X'80'             Set SRB executed flag
         LR    R8,R14                    Save return address
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE
         XR    R0,R0                     Indicate ECB in key 0 storage
         LA    R10,X'7F'                 Set post code
         SLL   R10,24                    *
         LA    R11,CALLECB               Get ECB pointer
         CLC   PSAAOLD,CALLASCB          Cross memory post?
         BE    RMTRNXMP                  No -branch, continue
         O     R11,SRBHBIT               Indicate cross memory post
RMTRNXMP L     R13,CALLASCB              Get ASCB pointer
         LA    R12,RMTRRTRN              Set post error address
         DROP  R12                       Base
         L     R15,CVTPTR(,0)            Get CVT pointer
         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point
         BALR  R14,R15                   Post ECB
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE
         LR    R14,R8                    Get return address
RMTRRTRN BR    R14                         and return to caller
         DROP


***********************************************************************
*                                                                     *
*        FRR ROUTINE.                                                 *
*                                                                     *
***********************************************************************

         USING PSA,0
FRRBEG   DS    0H
         LR    R12,R15                   Set base register
         USING FRRBEG,R12                  and addressability
         LR    R2,R1                     Get SDWA pointer
         USING SDWA,R2
         L     R9,SDWAPARM               Get FRR parm list pointer
         USING FRRPARMS,R9
         TM    FRRPARMS,FRRENTER         FRR previously entered?
         BOR   R14                       Yes - branch, return
         OI    FRRPARMS,FRRENTER         Set FRR entered flag
         ST    R14,FRRETURN              Save return address
         ICM   R1,15,FRRSRB              Is there an SRB?
         BZ    FRRNOSRB                  No - branch, continue
         USING SRBSECT,R1
         OI    SRBPARM,X'80'             Set SRB executed flag
         DROP  R1                        SRBSECT
FRRNOSRB TM    FRRFLAGS,FRRPOST          ECB already posted?
         BO    FRRNPOST                  Yes - branch, continue
         TM    FRRFLAGS,FRRLOCAL         Local lock held?
         BO    FRRLOCK                   Yes - branch, continue
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE
         OI    FRRFLAGS,FRRLOCAL         Set local lock held flag
FRRLOCK  XR    R0,R0                     Indicate ECB in key 0 storage
         LA    R10,X'7F'                 Set post code
         SLL   R10,24                    *
         LA    R11,CALLECB               Get ECB pointer
         CLC   PSAAOLD,CALLASCB          Cross memory post?
         BE    FRRNXMP                   No - branch, continue
         O     R11,SRBHBIT               Indicate cross memory post
FRRNXMP  L     R13,CALLASCB              Get ASCB pointer
         ST    R12,FRRBASE               Save base register
         LA    R12,FRRPSTER              Set post error address
         L     R15,CVTPTR(,0)            Get CVT pointer
         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point
         BALR  R14,R15                   Post ECB
         L     R12,FRRBASE               Restore base register
FRRNPOST TM    FRRFLAGS,FRRLOCAL         Local lock held?
         BZ    FRRRTRN                   No - branch, continue
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE
         B     FRRRTRN                   Branch - continue
FRRPSTER BR    R14                       Branch - return to RTM

***********************************************************************
*                                                                     *
*        Return to RTM.                                               *
*                                                                     *
***********************************************************************

FRRRTRN  LR    R1,R2                     Set SDWA pointer for SETRP
         SETRP DUMP=YES,RECORD=YES,RC=0  Set return options
         L     R14,FRRETURN              Set FRR return address
         BR    R14                       Branch - return to RTM
         DS    0F
SRBHBIT  DC    X'80000000'               High-order bit indicator

         LTORG

CALLASCB DC    F'0'                      Caller's ASCB pointer
CALLECB  DC    F'0'                      ECB for xmpost
SRBSTOK  DC    CL8' '                    Dataspace STOKEN
SRBALET  DC    F'0'                      Dataspace ALET
SRBSTORA DC    A(0)                      Storage start address
SRBBUFA  DC    A(0)                      Storage return buffer address
SRBMODSL EQU   *-SRBMODS                 SRB modules length
         DROP

FRRPARMS DSECT                           FRR parameter list (6 words)
FRRFLAGS DS    X                         FRR flag byte
FRRENTER EQU   X'80'                     FRR recursion indicator
FRRLOCAL EQU   X'40'                     Local lock acquired
FRRPOST  EQU   X'20'                     ECB posted
         DS    3X                        Reserved
FRRETURN DS    A                         FRR return address
FRRBASE  DS    F                         FRR base register
FRRSRB   DS    A                         SRB pointer (or zero)
         DS    2F                        Reserved
FRRPARML EQU   *-FRRPARMS                FRR parameter list length


WORKAREA DSECT
         DS    18F
RETCODE  DS    F                IMDSPACE return code
PARMPTR  DS    A                Input parameter list pointer
WORKFLAG DS    XL1              Flag byte
CALLKEY  DS    XL1              Caller's psw key
WORKATTR DS    XL1              Dataspace
         DS    XL1              Reserved
ASIDNBR  DS    H                Input asid number
STORADDR DS    A                Input storage start address
WORKSTOK DS    CL8              Input STOKEN
         DS    0F
WORKDSPL DS    XL(DSPLISTL)     RSM DSPCALL DSPLIST parm list area
         DS    0F
WORKDSPC DS    XL(DSPCNVTS)     RSM DSPCALL CONVERT parm list area
RASPALET DS    10F              RASP dataspace ALETs save area
WORKALET DS    F                ALESERV ALET
INFTABP  DS    A                Information table pointer
SRBMODSP DS    A                SRB modules pointer
SRBPTR   DS    A                SRB area pointer
WORKPURG DS    (PURGEDQL)X      PURGEDQ parameter list
WORKPDQ  DS    0D               PURGEDQ parameter area
WORKPDQR DS    H                PURGEDQ reserved area
WORKPDQA DS    H                PURGEDQ asid
WORKPDQT DS    A                PURGEDQ TCB pointer
WORKSIZE EQU   *-WORKAREA

DSPLIST  DSECT                  RSM DSPCALL DSPLIST parm list
         DS    H                Reserved
DSPLASID DS    H                Requested ASID
DSPLDSDP DS    A                DSD pointer
DSPLISTL EQU   *-DSPLIST

DSD      DSECT                  Dataspace data table
DSDNEXT  DS    A                Next DSD pointer
DSDPREV  DS    A                Previous DSD pointer
DSDID    DS    CL4              'DSD' identifier
DSDVER   DS    X                Version number
DSDSPID  DS    X                DSD subpool id
DSDFLGS  DS    X                Flags
DSDSWAP  EQU   X'80'            0 - ASID swapped in
*                               1 - ASID swapped in
         DS    X                Reserved
DSDLEN   DS    F                DSD length
DSDASID  DS    H                DSDTAB owner
         DS    H                Reserved
DSDTNUM  DS    F                # dataspaces listed in DSDTAB
DSDTAB   DS    0CL20            Dataspace information table

DSDE     DSECT                  Dataspace data table entry
DSDENAME DS    CL8              Dataspace name
DSDESTOK DS    CL8              Dataspace STOKEN
DSDEASTE DS    A                Dataspace ASTE real address
DSDESIZE EQU   *-DSDE

DSPCNVT  DSECT                  RSM DSPCALL CONVERT parm list
DSPCLEVL DS    XL1              Parm list level
         DS    XL1              Reserved
DSPCATTR DS    XL1              Dataspace attributes
DSPCKEYS DS    XL1              Dataspace key/fetch protect
* Bits 0-3 --> Storage key
* Bit 4 --> Fetch protection indicator
* Bits 5-8 --> Unused
DSPCSTOK DS    CL8              Dataspace STOKEN
DSPCASCB DS    A                Dataspace ASCB
DSPCDSPN DS    CL8              Dataspace name
DSPCNVTS EQU   *-DSPCNVT

SIB      DSECT                  Dataspace SIB entry
SIBNAME  DS    CL8              Dataspace name
SIBSEQ#  DS    F                Dataspace sequence number
SIBRDD   DS    A                RASP RDD address
SIBASTE  DS    A                Dataspace ASTE virtual address
SIBOTCB  DS    F                Dataspace owning TCB address
SIBRANG  DS    F                Dataspace storage range
         DS    F                Reserved
SIBBLKS  DS    F                Dataspace maximum # 4K storage blocks
         DS    7F               Reserved
SIBSIZE  EQU   *-SIB

         COPY  IMDSDATA         Transported Dataspace Details

         PRINT NOGEN
         CVT   DSECT=YES
         IHAASCB
         IHAASVT
         IHAPSA
         IHAPVT
         IHASCCB
         IHASDWA
         IHASRB

         END
