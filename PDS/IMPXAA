*        COPYRIGHT (C) 1986,1994  PRYCROFT SIX PTY LTD
         TITLE 'ADDRESS SPACE MONITOR DISPLAY LINE MAPPING'
ASLINE   DSECT
LINE     DS    XL(L'LOWX)
JOB      DS    CL8
         DS    CL1
STEP     DS    CL8
         DS    CL1
PSTEPTRM DS    CL8
         DS    CL1
ASENF    DS    CL3
         DS    CL1
ASOMVS   DS    CL3
         DS    CL1
TYPE     DS    CL8
CANFLAG  DS    CL1
WHERE    DS    CL3
         DS    CL1
DP       DS    CL2
DMN      DS    CL4
SRVCLS   EQU   DMN+1,8
PGN      DS    CL4
         DS    CL2
PER      DS    CL1
         DS    CL1
ADSPCID  DS    CL4
CORESIZE DS    CL6
         DS    CL1
ESIZE    DS    CL6
         DS    CL1
AUXSIZE  DS    CL6
         DS    CL1
SWC      DS    CL4
SWCT     DS    CL6
         DS    CL1
SWPRSN   DS    CL2
APAGING  DS    CL7
AIORATE  DS    CL7
AEXCPCT  DS    CL12
         DS    CL1
WMR      DS    CL4
WMS      DS    CL8
ASWPTIME DS    CL10
ASCONNTM DS    CL9
IOPERCNT DS    CL4
         DS    CL1
CPUTIME  DS    CL9
USAGE    DS    CL4
         DS    CL1
ASDL     EQU   *-JOB
ASLL     EQU   *-LINE
         TITLE 'ADDRESS SPACE MONITOR SUBROUTINE'
IMPXA    CSECT
         USING ADDRSPCS,R11
ADDRSPCS DS    0H
         CLI   INBUFF,6          ENTRY VIA PF6/18?
         BE    CMDSCANA          YES, ANY COMMAND ALREADY IN PLACE.
         MVC   INCHARS(L'INCHARS-1),INCHARS+1
         MVI   INCHARS+L'INCHARS-1,C' ' NO, ADJUST ANY COMMAND INPUT.
         B     CMDSCANA          PROCESS IT.
         SPACE
FINDASVT DS    0H
         MVC   SECTIOWA,VSBTRACE PRESERVE OPTION "VB" TRACE.
         MVC   HEADINGA+51(7),=C'DMN PGN'
         L     R9,RMCTADDR       POINT TO THE RMCT.
         USING RMCT,R9
         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?
         BM    AWMPOLOK          NO, NO POLICY TO EXTRACT.
         DROP  R9                RMCT.
         MVC   HEADINGA+51(7),=C'SRVCLAS'
AWMPOLOK XC    REALJOBS(8),REALJOBS     ZERO REAL STORAGE COUNTERS.
         L     R10,JOBTBL        ADDRESS TABLE ENTRY FOR THIS ASID.
         USING ASENTRY,R10
         L     R2,ASVTADDR       GET ASVT ADDRESS.
         USING ASVT,R2
         L     R3,ASVTMAXU       MAXIMUM NUMBER OF ENTRIES.
         LA    R4,ASVTENTY-4     FIRST ENTRY MINUS 4.
         DROP  R2                ASVT.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R2,2              ASSUME HEADINGS WILL BE SET UP OKAY.
         ST    R2,WINLINES       INITIALIZE LINE COUNTER.
         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.
         MVC   0(L'LOWX,R2),LOWX SUPPLY 3270 ATTRIBUTES.
         MVI   0(R2),X'FF'       FIXED FLAG - NON-SCROLLABLE LINE.
         LA    R2,LL-79(,R2)     POINT PAST ATTRIBUTES.
         MVI   0(R2),C' '        BLANK A LINE.
         MVC   1(ASDL-1,R2),0(R2)
         MVC   0(79,R2),ASSELINE INDICATE SELECTION CRITERIA.
         TM    ASFLAGS,ASSTC     SELECTING STARTED TASKS?
         BO    ASSTCOK           YES.
         MVC   23(3,R2),BLANKS   NO.
ASSTCOK  TM    ASFLAGS,ASJOB     SELECTING BATCH JOBS?
         BO    ASJOBOK           YES.
         MVC   29(3,R2),BLANKS   NO.
ASJOBOK  TM    ASFLAGS,ASTSU     SELECTING TIME SHARING USERS?
         BO    ASTSUOK           YES.
         MVC   35(3,R2),BLANKS   NO.
ASTSUOK  TM    ASFLAGS,ASOUT     SELECTING SWAPPED OUT ADDRESS SPACES?
         BNO   ASOUTOK           NO.
         MVC   41(3,R2),=C'OUT'  YES.
ASOUTOK  TM    ASFLAGS,NINIT     SUPPRESSING INITIATOR/TERMINATORS?
         BO    ASINITOK          YES.
         MVC   47(6,R2),BLANKS   NO.
ASINITOK CLI   SELJOBNM,C' '     USING JOB NAME PREFIX SELECTION?
         BNH   ASELJMSK          NO.
         LH    R1,JPRFXLEN       GET PREFIX LENGTH.
         BCTR  R1,0              DECREMENT FOR EXECUTE.
         EX    R1,ASELDMSK       LOAD THE PREFIX INTO THE DISPLAY LINE.
ASELJMSK LA    R2,ASDL(,R2)      POINT TO NEXT DISPLAY LINE.
         MVC   0(L'HIGHX,R2),HIGHX   LOAD HEADING ATTRIBUTES.
         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)
         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)
         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)
         MVC   L'HIGHX(ASDL,R2),HEADINGA     LOAD DISPLAYABLE
         TR    L'HIGHX(ASDL,R2),XLATETBL          HEADING.
         LA    R2,ASLL(,R2)      POINT PAST HEADING.
         DROP  R15               WNDWMNGR.
         SPACE
         USING ASLINE,R2
         TIME  BIN               GET TIME-OF-DAY.
ASCBLOOP LA    R4,4(,R4)         POINT TO THE NEXT ASVT ENTRY.
         ICM   R5,B'1111',0(R4)  LOAD THE ASCB PTR.
         BNM   ASCBOK            PROCESS ASCB.
         ST    R0,TOD            STORE TIME-OF-DAY.
         XC    CPUSOFAR(12),CPUSOFAR ZERO COUNTS FOR NON-EXISTENT ASID.
         B     NOGOOD            FINISHED WITH BAD PTR.
         USING ASCB,R5
ASCBOK   L     R6,ASCBRSME       GET RAX POINTER.
         USING RAX,R6
         L     R6,RAXFMCT        LOAD ALLOCATED (REAL) FRAME COUNT.
         DROP  R6                RAX.
         ST    R6,SAVE+56        SAVE CENTRAL STORAGE USAGE FOR LATER.
         A     R6,REALJOBS       ACCUMULATE FRAME COUNTS
         ST    R6,REALJOBS                  OF ALL JOBS.
*        CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
*        BH    CLRLINE           YES, DON'T REJECT ANYTHING YET.
         ICM   R6,15,ASCBOUCB    LOAD PTR TO OUCB FOR TSO & WAIT CHK.
         BZ    CLRLINE           IF ZERO THEN NO OUCB EXISTS TO CHECK.
         USING OUCB,R6
         TM    OUCBQFL,OUCBOFF   TEST FOR WAIT STATE.
         BZ    ASTSUCHK          PROCEED IF READY TO RUN.
         TM    ASFLAGS,ASOUT     DISPLAY WAITING ADDRESS SPACES?
         BZ    NOGOOD            NO.
ASTSUCHK TM    OUCBYFL,OUCBLOG   CHECK FOR TSO.
         BZ    CLRLINE           PROCEED IF NOT.
         TM    ASFLAGS,ASTSU     DISPLAY TSO USERS?
         BZ    NOGOOD            NO.
         DROP  R6                OUCB.
CLRLINE  MVC   LINE,LOWX         LOAD 3270 LINE ATTRIBUTE ORDERS.
         MVI   JOB,C' '          CLEAR OUTPUT LINE TO BLANKS.
         MVC   JOB+1(ASDL-1),JOB
         MVC   JOB,STARTING      TO BYPASS GARBAGE.
         MVI   CANFLAG,C'.'      INDICATE NON-CANCELLABLE STATUS.
         ICM   R6,15,ASCBJBNI    LOAD PTR TO JOBNAME. CSCB+8 / CSCX+18.
         BZ    NOTBATCH          BRANCH IF ZERO POINTER.
         TM    ASFLAGS,ASJOB     DISPLAY BATCH JOBS?
         BZ    NOGOOD            NO.
         MVC   JOB,0(R6)         OTHERWISE, MOVE IN JOBNAME.
         LA    R1,8
         SLR   R6,R1             POINT TO THE START OF THE CSCB.
         TM    OSLEVEL,CVTH4410  IS THIS REALLY THE CSCX+10?
         BNO   AJCSCBOK          NO, PRE-SP4.
         L     R6,16(,R6)        YES, POINT TO THE CSCB VIA CHCSCBP.
         USING CHAIN,R6
AJCSCBOK TM    CHACT,CHCL+CHAFORCE CANCEL FLAGS OFF?
         BZ    JOBOK             YES, JOB IS NON-CANCELLABLE.
         MVI   CANFLAG,C'*'      NO, INDICATE JOB NOW FORCIBLE.
         TM    CHACT,CHAFORCE    WAS THIS THE FLAG THAT WAS ON?
         BO    JOBOK             YES, WELL DONE.
         MVI   CANFLAG,C' '      NO, JOB CANCELLABLE FLAG WAS ON.
         B     JOBOK             BYPASS FURTHER JOBNAME PROCESSING.
         DROP  R6                CHAIN.
NOTBATCH ICM   R7,15,ASCBCSCB    LOAD POINTER TO THE TOP CSCB.
         BZ    SMLCSCB           ASSUME NON-CAN IF CSCB PTR IS ZERO.
         USING CHAIN,R7
         TM    CHACT,CHCL+CHAFORCE CANCEL FLAGS OFF?
         BZ    SMLCSCB           YES, JOB IS NON-CANCELLABLE.
         MVI   CANFLAG,C'*'      NO, INDICATE JOB NOW FORCIBLE.
         TM    CHACT,CHAFORCE    WAS THIS THE FLAG THAT WAS ON?
         BO    SMLCSCB           YES, WELL DONE.
         MVI   CANFLAG,C' '      NO, JOB CANCELLABLE FLAG WAS ON.
         DROP  R7                CHAIN.
SMLCSCB  ICM   R6,15,ASCBTSB     TSO USER ADDRESS SPACE?
         BZ    STRTNMOK          NO, LEAVE DEFAULT NAME AS 'STARTING'.
         MVC   JOB,=C'*LOGON* '  YES, LOAD THE CORRECT "JOB NAME".
STRTNMOK ICM   R6,15,ASCBJBNS    PTR IF START/MOUNT/LOGON.
         BZ    JOBOK             BYPASS THIS MOVE IF POINTER IS ZERO.
         MVC   JOB,0(R6)         MOVE IN JOBNAME FOR S/M/L MEMORIES.
JOBOK    DS    0H
         CLI   SELJOBNM,C' '     LOOKING FOR CERTAIN JOB NAMES?
         BNH   CSCBLOOK          NO, CONTINUE.
         LH    R15,JPRFXLEN      GET LENGTH OF JOB NAME PREFIX.
         LA    R8,SELJOBNM       POINT TO DESIRED PREFIX.
         LA    R9,JOB            POINT TO JOB NAME.
         STM   R8,R9,WORK+4      SAVE PARAMETER LIST.
         ST    R15,WORK2+4
         L     R9,SAVE+56        SAVE CENTRAL STORAGE USAGE.
         L     R7,PRFCHKAD       LOAD PREFCHEK ENTRY POINT.
         BASR  R1,R7             COMPARE JOB NAME WITH PREFIX.
         BNE   NOGOOD            IF NOT EQUAL THEN GO AWAY.
CSCBLOOK ICM   R7,15,ASCBCSCB    LOAD POINTER TO THE TOP CSCB.
         BNZ   CSCBOK            BRANCH IF CSCB POINTER IS NOT ZERO.
         TM    ASFLAGS,ASSTC     ARE STARTED TASKS SELECTED?
         BZ    NOGOOD            NO.
         B     STEPOK            YES, KEEP WHAT MUST BE A SYSTEM ASID.
         USING CHAIN,R7
CSCBOK   CLI   CHTRKID,CHTSID    IS IT A TIME SHARING USER?
         BNE   TESTINIT          NO.
         MVI   TYPE,C'@'         YES, SIGNIFY A TSU ADDRESS SPACE.
         CLI   JOB+6,C'*'        STARTING TSU?
         BE    STEPOK            YES, FORGET STEPNAME.
         MVC   STEP,CHCLS        PICK UP CHCLS.
         B     STEPOK            BYPASS FURTHER CSCB PROCESSING.
TESTINIT CLI   CHTRKID,CHINITID  IS IT AN INITIATOR/TERMINATOR?
         BNE   STORMT            NO, JOB IS START, OR MOUNT.
         CLC   =C'INIT ',JOB     HAS THE INITIATOR A JOB?
         BE    SELINTST          NO, TEST FOR SELECTIVITY.
         CLC   =C'ASCHINT ',JOB  HAS THE INITIATOR A JOB?
         BE    SELINTST          NO, TEST FOR SELECTIVITY.
         CLC   =C'BPXAS ',JOB    HAS THE INITIATOR A JOB?
         BNE   JOBONLY           YES, CONTINUE JOB PROCESSING.
SELINTST TM    ASFLAGS,NINIT     DO WE WANT DRY INITIATORS?
         BO    NOGOOD            NO, GO AWAY.
         B     STORMT            YES, CONTINUE STC PROCESSING.
         DROP  R7                CHAIN.
         USING CHAIN,R6
JOBONLY  MVC   STEP,CHSTEP       PICK UP CHSTEP.
         MVC   PSTEPTRM,CHPROCSN PICK UP CHPROCSN.
         B     STEPOK            BYPASS FURTHER CSCB PROCESSING.
         DROP  R6                CHAIN.
         USING CHAIN,R7
STORMT   TM    ASFLAGS,ASSTC     DO WE WANT STARTED TASKS?
         BZ    NOGOOD            NO, GO AWAY.
         MVC   STEP(8),CHKEY     PICK UP CHKEY.
         MVC   PSTEPTRM,CHPROCSN PICK UP CHPROCSN.
         DROP  R7                CHAIN.
STEPOK   UNPK  ADSPCID(5),ASID(3,R5)
         TR    ADSPCID,HEX-C'0'  SHOW ASID IN HEX.
         MVI   ADSPCID+4,C' '    ERASE GARBAGE.
         L     R1,SAVE+56        RESTORE CENTRAL STORAGE FRAME COUNT.
         LR    R15,R1            COPY IT.
         A     R15,REALSHOW      ACCUMULATE FRAME COUNT FOR
         ST    R15,REALSHOW                 DISPLAYED JOBS.
         LA    R15,CORESIZE      POINT TO DISPLAY AREA.
         BAS   R14,ASTGSIZE      DISPLAY CENTRAL STORAGE USAGE.
         L     R1,ASCBRSME       GET RAX POINTER.
         USING RAX,R1
         L     R1,RAXESCT        LOAD EXPANDED STORAGE FRAME COUNT.
         DROP  R1                RAX.
         LA    R15,ESIZE         POINT TO DISPLAY AREA.
         BAS   R14,ASTGSIZE      DISPLAY EXPANDED STORAGE USAGE.
         MVI   LINE+4,X'F8'      HIGH INTENSITY.
         MVI   LINE+5,X'40'      NO HIGHLIGHTING.               (F9526)
         MVI   LINE+8,X'F5'      TURQUOISE.                     (I3279)
         L     R6,ASCBASSB       LOAD POINTER TO ASSB.
         USING ASSB,R6
         TM    ASSBFLG2,ASSBENFL ENF?
         BNO   ASENFOK           NO.
         MVC   ASENF,=C'YES'     SHOW IT.
ASENFOK  ICM   R1,15,ASSBOASB    USS USED BY THIS ASID?
         BZ    ASUNIXOK          NO.
         MVC   ASOMVS,=C'YES'    YES, SHOW UNIX USAGE.
ASUNIXOK L     R1,ASSBVSC        GET NUMBER OF ASSIGNED VIO SLOTS.
         A     R1,ASSBNVSC       ADD NON-VIO SLOT COUNT.
         DROP  R6                ASSB.
         LA    R15,AUXSIZE       POINT TO DISPLAY AREA.
         BAS   R14,ASTGSIZE      DISPLAY AUXILIARY STORAGE USAGE.
         ICM   R6,15,ASCBOUCB    LOAD THE POINTER TO THE OUCB.
         BZ    GETASXCP          IF ZERO THEN NO OUCB EXISTS TO CHECK.
         USING OUCB,R6
         TM    OUCBYFL,OUCBLOG   TIME SHARING USER?
         BZ    GOTPGCNT          NO.
         MVC   PSTEPTRM,OUCBTRXN YES, SHOW TSO COMMAND.
GOTPGCNT MVC   WHERE,=CL3'IN '   DEFAULT MEMORY POSITION IS IN.
         TM    OUCBSFL,OUCBPVL   TEST FOR PRIVILEGED JOB.
         BZ    TRYNS             BRANCH IF NOT PRIVILEGED.
         MVC   WHERE,=CL3'PRV'   MOVE IN PRIVILEGE INDICATION.
TRYNS    TM    OUCBSFL,OUCBNSW   TEST FOR NON-SWAP.
         BZ    TRYWAIT           BRANCH IF NOT NON-SWAP.
         MVI   LINE+8,X'F3'      PINK.                          (I3279)
         MVC   WHERE,=CL3'N/S'   MOVE IN NON-SWAP INDICATION.
         TM    ASCBRSMF,ASCBVEQR VIRTUAL EQUALS REAL USER?
         BZ    WHEREOK           NO, NON-SWAPPABLE V=V.
         MVC   WHERE,=CL3'V=R'   YES, MOVE IN REAL INDICATION.
         B     WHEREOK           BYPASS REST OF POSITION PROCESSING.
TRYWAIT  DS    0H
         TM    OUCBQFL,OUCBOFF   CHECK FOR WAIT
         BZ    TRYOUT            BRANCH IF NOT.
         MVC   WHERE,=CL3'WT'    MOVE IN WAIT POSITION INDICATION.
         MVI   LINE+4,X'F0'      LOW INTENSITY.
         MVI   LINE+8,X'F4'      GREEN.                         (I3279)
         TM    OUCBQFL,OUCBLSW   CHECK FOR TRIVIAL QUEUE POSITION.
         BZ    WHEREOK           IF NOT, EXIT POSITION PROCESSING.
         MVC   WHERE,=CL3'LOG'   LOGICAL SWAP (I S'POSE THAT'S TRIVIAL)
         MVI   LINE+8,X'F6'      YELLOW.                        (I3279)
         B     WHEREOK           BYPASS REST OF POSITION PROCESSING.
TRYOUT   TM    OUCBQFL,OUCBOUT   TRY OUT QUEUE.
         BZ    WHEREOK           BYPASS REST OF POSITION PROCESSING.
         MVC   WHERE,=CL3'OUT'   MOVE IN OUT QUEUE POSITION.
         MVI   LINE+4,X'F4'      MEDIUM INTENSITY.
         MVI   LINE+8,X'F1'      BLUE.                          (I3279)
WHEREOK  DS    0H
         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB
         BZ    NOTTRANS          BRANCH IF MEMORY NOT TRANSITIONING.
         MVC   WHERE(3),=CL3'<+>' INDICATE TRANSITIONING IN.
         TM    OUCBQFL,OUCBGOO   CHECK FOR TRANSITIONING OUT.
         BZ    NOTTRANS          BRANCH IF MEMORY NOT GOING OUT.
         MVI   WHERE+1,C'-'      INDICATE TRANSITIONING OUT.
         MVI   LINE+4,X'F0'      LOW INTENSITY.
         MVI   LINE+8,X'F4'      GREEN.                         (I3279)
NOTTRANS DS    0H
         TM    ASCBFLG1,ASCBABNT IS MEMORY ABNORMALLY TERMINATING?
         BZ    NOCAN             NO, SO FORGET IT.
         UNPK  STEP(9),ASCBMCC(5) SHOW MEMTERM COMPLETION CODE.
         TR    STEP(8),HEX-C'0'  CONVERT TO PRINTABLE HEX.
         MVI   STEP+8,C' '       ERASE GARBAGE.
         MVI   LINE+8,X'F2'      DYING, SO MAKE IT RED.         (I3279)
NOCAN    CLI   OUCBCLS,X'4A'     TEST TRANSACTION CLASS.
         BL    NOCLASS           EMPTY - LEAVE BLANK OR @.
         MVC   TYPE,OUCBCLS      REPORT TRANSACTION CLASS.
NOCLASS  CLC   TYPE+1(7),BLANKS  ROOM FOR JOBID?
         BNE   AJOBIDOK          NO.
         TM    OSLEVEL,CVTH4410  SP4 OR LATER?
         BNO   AJOBIDOK          NO, JSAB DOES NOT EXIST.
         L     R1,ASCBASSB       LOAD POINTER TO ASSB.
         USING ASSB,R1
         ICM   R1,15,ASSBJSAB    LOAD POINTER TO JSAB.
         BZ    AJOBIDOK          NO JSAB.
         DROP  R1                ASSB.
         USING JSAB,R1
         TM    JSABFLG1,JSABNVAL VALID JSAB?
         BO    AJOBIDOK          NO.
         MVC   TYPE+2(1),JSABJBID    COPY JOB TYPE.
         MVC   TYPE+3(5),JSABJBID+3  COPY JOB NUMBER.
         DROP  R1                JSAB.
         LA    R7,TYPE+2
         LA    R1,4
AJIDLOOP CLI   1(R7),C'0'        LEADING ZERO?
         BNE   AJOBIDOK          NO.
         MVC   1(1,R7),0(R7)     YES, SUPPRESS IT.
         MVI   0(R7),C' '
         LA    R7,1(,R7)
         BCT   R1,AJIDLOOP
AJOBIDOK TM    OSLEVEL+1,CVTWLM  WLM INSTALLED?
         BNO   ANOWLM            NO, ACCESS THE OUCB.
         LA    R1,SECTCT         POINT TO AREA FOR RASD.
         USING RASD,R1
         LA    R15,RASDSIZE      GET SIZE OF RASD.
         STH   R15,RASDLEN       SET THE LENGTH INDICATOR.
         STM   R14,R12,12(R13)   SAVE REGISTERS.
         LH    R0,ASID(,R5)      YES, GET SUBJECT ASID.
         LR    R7,R13            PRESERVE SAVE AREA POINTER.
         LA    R13,SECWORKA      POINT TO WORK AREA.
         SYSEVENT REQFASD,ASID=(0)
         LR    R13,R7            POINT BACK TO SAVE.
         CLM   R15,1,FFFF        CHECK RETURN CODE.
         LM    R14,R12,12(R13)   RESTORE REGISTERS.
         BNE   AWLMDONE          NO RESULTS RETURNED.
         TM    RASDBITS,RASDMODE IN GOAL MODE?
         BZ    AWLMGOAL          YES.
         LH    R7,RASDPGN        NO, GET PERFORMANCE GROUP NUMBER.
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         MVC   PGN,ED3           MOVE IN THE EDIT MASK.
         ED    PGN,WORK+6        EDIT THE OUTPUT FIELD.
         LH    R7,RASDDMN        GET DOMAIN NUMBER
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         MVC   DMN,ED3           MOVE IN THE EDIT MASK.
         ED    DMN,WORK+6        EDIT THE OUTPUT FIELD.
         B     AWLMDONE
AWLMGOAL MVC   SRVCLS,RASDSCL    SHOW THE SERVICE CLASS NAME.
         B     AWLMDONE
         DROP  R1                RASD.
ANOWLM   LH    R7,OUCBNPG        NEW PERFORMANCE GROUP NUMBER.
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         MVC   PGN,ED3           MOVE IN THE EDIT MASK.
         ED    PGN,WORK+6        EDIT THE OUTPUT FIELD.
         SLR   R7,R7             PREPARE FOR THE IC.
         IC    R7,OUCBDMN        NEW DOMAIN NUMBER
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         MVC   DMN,ED3           MOVE IN THE EDIT MASK.
         ED    DMN,WORK+6        EDIT THE OUTPUT FIELD.
AWLMDONE LH    R7,OUCBSWC        LOAD TRANSACTION SWAP COUNT.
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         MVC   SWC,ED3Z          MOVE IN THE EDIT MASK.
         ED    SWC,WORK+6        EDIT THE OUTPUT FIELD.
         TM    OSLEVEL,CVTH4410  EARLIER THAN MVS/SP4?
         BNO   WMROLD            YES, DO IT THE "OLD" WAY.
         L     R7,OUCBCMRV       GET COMPOSITE RECOMMENDATION VALUE.
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         LA    R1,WMR+3          HANDLE MULTIPLE OF 1000.
         MVC   WMR,ED3           MOVE IN EDIT MASK.
         EDMK  WMR,WORK+6        EDIT THE RESULT.
         LTR   R7,R7             IS THE VALUE NEGATIVE?
         BNM   WMRDONE           NO.
         BCTR  R1,0              YES.
         MVI   0(R1),C'-'        SUPPLY A MINUS SIGN.
         B     WMRDONE
WMROLD   L     R7,96(,R6)        LOAD OUCBWMR.
         LTR   R7,R7             SEE IF HI-ORDER BIT IS ON
         BNM   WMROK             INDICATING WMR INVALID.
         MVC   WMR,=C'ERR'       IF SO, MOVE IN NOT AVAIL INDICATOR
         MVI   WMS+4,C'-'        AND BLANK OUT THE SERVICE COUNTER.
         B     WMSOK             BYPASS THE SERVICE PROCESSING.
WMROK    SRL   R7,8              DIVIDE BY 256.
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         MVC   WMR,ED3           MOVE IN EDIT MASK.
         ED    WMR,WORK+6        EDIT THE RESULT.
WMRDONE  L     R7,OUCBWMS        LOAD SERVICE UNITS THIS TRANSACTION
         CVD   R7,WORK           AND CONVERT TO DECIMAL.
         MVC   WMS,ED7           MOVE IN THE EDIT MASK.
         ED    WMS,WORK+4        EDIT THE RESULT.
         ICM   R7,B'1111',WORK   IS INTERVAL SERVICE OVER 9,999,999?
         BZ    WMSOK             NO, SO NO LOSS OF SIGNIFICANT DIGITS.
         MVI   WMS+7,C' '        YES, SO BLANK DIGIT.
         LA    R1,=C'KMGT'       POINT TO SCALE INDICATORS.
WMSLOOP  SRP   WORK,64-3,0       DIVIDE BY ONE THOUSAND AND TRUNCATE.
         MVC   WMS(6),ED5
         ED    WMS(6),WORK+5     SHOW SCALED VALUE.
         MVC   WMS+6(1),0(R1)    LOAD SCALING INDICATOR.
         LA    R1,1(,R1)         POINT TO NEXT INDICATOR JUST IN CASE.
         OC    WORK(5),WORK      IS NUMBER NOW ON SCALE?
         BNZ   WMSLOOP           NO, FURTHER SCALING IS REQUIRED.
WMSOK    SLR   R7,R7             CLEAR REGISTER FOR INSERT CHARACTER.
         ICM   R7,1,OUCBSRC      GET REASON CODE FOR LAST SWAP-OUT.
         BZ    SKIPRLS           SWAPPED IN.
         SLL   R7,1              MULTIPLY BY 2.
         LA    R7,SWPREASN(R7)   POINT TO RIGHT ENTRY.
         MVC   SWPRSN,0(R7)      SHOW REASON FOR LAST SWAP.
SKIPRLS  L     R7,ASCBOUXB       POINT TO OUXB.
         USING OUXB,R7
         L     R7,OUXBSWCT       LOAD SWAP COUNT.
         DROP  R7                OUXB.
         MVC   SWCT,ED5Z
         CVD   R7,WORK
         ED    SWCT,WORK+5       SHOW TOTAL SWAP COUNT, BLANK IF ZERO.
         L     R9,RMCTADDR       POINT TO THE RMCT.
         USING RMCT,R9           POINT TO CURRENT OUCB.
         L     R9,RMCTTOD        GET CURRENT 1024MICROSECS SINCE IPL.
         DROP  R9                RMCT.
         ICM   R8,15,OUCBTMS     GET TIME OF LAST SWAP-OUT.
         BNZ   GTLSWPTM          NON-ZERO SO CONTINUE.
         L     R8,OUCBTMO        USE TRANSACTION START TIME.
GTLSWPTM SR    R9,R8             SUBTRACT TIME OF LAST SWAP-OUT.
         BNP   ASWPTMOK          PREPOSTEROUS, I CAN'T BELIEVE IT.
         SLR   R8,R8             PREPARE FOR DIVIDE.
         SLDL  R8,10             CONVERT TO MICROSECONDS.
         D     R8,=F'1000000'    GET TIME SINCE SWAP-OUT IN SECONDS.
         SLR   R8,R8             PREPARE FOR DIVIDE.
         D     R8,=F'60'         CONVERT TO MINUTES AND SECONDS.
         CVD   R8,WORK           GET SECONDS INTO DECIMAL.
         OI    WORK+7,15
         UNPK  ASWPTIME+8(2),WORK+6(2)
         MVI   ASWPTIME+7,C':'   SEPARATE MINUTES AND SECONDS.
         SLR   R8,R8             PREPARE FOR DIVIDE.
         D     R8,=F'60'         CONVERT TO HOURS AND MINUTES.
         CVD   R8,WORK           GET MINUTES INTO DECIMAL.
         OI    WORK+7,15
         UNPK  ASWPTIME+5(2),WORK+6(2)
         LTR   R9,R9             ANY HOURS?
         BZ    ASWPTMOK          NO, LEAVES HOURS SLOT BLANK
         MVI   ASWPTIME+4,C':'   SEPARATE HOURS AND MINUTES.
         CVD   R9,WORK           GET HOURS INTO DECIMAL.
         MVC   ASWPTIME(4),ED3   LOAD EDIT MASK FOR HOURS.
         ED    ASWPTIME(4),WORK+6
ASWPTMOK SLR   R1,R1
         IC    R1,OUCBPGP        LOAD WMPGP OFFSET.
         L     R9,RMCTADDR       POINT TO THE RMCT.
         USING RMCT,R9
         TM    RMCTICST,X'7F'    IN WLM GOAL MODE?
         BM    AOLDPGP           NO.
         DROP  R9,R6             RMCT, OUCB.
         BCT   R1,SHOWASPP       YES, SHOW PERIOD IF NOT 1.
         B     APERIOD1          PERIOD IS 1.
AOLDPGP  SRA   R1,4              GET RELATIVE PERFORMANCE PERIOD.
         BNZ   SHOWASPP          SHOW IF NOT IN FIRST PERF. PERIOD.
APERIOD1 CLI   TYPE,C' '         STARTED TASK OR SYSTEM ADDRESS SPACE?
         BNH   GETASXCP          YES, DON'T BOTHER WITH FIRST P.P.
SHOWASPP LA    R1,1(,R1)         CONVERT TO PERFORMANCE PERIOD NUMBER.
         STC   1,PER             SUPPLY PERFORMANCE PERIOD NUMBER.
         TR    PER,HEX           MAKE DISPLAYABLE HEX DIGIT.
GETASXCP L     R9,ASCBIOSC       GET SMF EXCP COUNT THIS STEP.
         CVD   R9,WORK
         MVC   AEXCPCT,=XL12'402020206B2020206B202020'
         ED    AEXCPCT,WORK+3    DISPLAY IT.
         LR    R1,R9
         S     R9,XCPSOFAR       GET CHANGE IN EXCP COUNT.
         BZ    CNCTCALC          NO CHANGE SO PROCEED.
         ST    R1,XCPSOFAR       SAVE CURRENT EXCP COUNT.
         BNM   AIORTOK           POSITIVE VALUE SO PROCEED.
         LR    R9,R1             CHANGE OF STEP - USE CURRENT COUNT.
AIORTOK  M     R8,TENGRAND       CENTISECONDS PLUS TWO DECIMAL PLACES.
EXCPRATS LR    R1,R0             GET CURRENT TIME.
         S     R1,TOD            GET CHANGE IN TIME.
         BNZ   GETIORAT          WON'T GET S0C9.
         TIME  BIN               SPIN LOOP FOR NEW CENTISECOND.
         B     EXCPRATS          RATS!  TRY AGAIN.
GETIORAT DR    R8,R1             GET EXCP'S PER SECOND.
         MVC   AIORATE,=X'402021204B2020'
         CVD   R9,WORK
         ED    AIORATE,WORK+5
         OC    WORK(5),WORK      EXCP RATE UNDER A THOUSAND PER SEC?
         BZ    CNCTCALC          YES, PROCEED.
         SRP   WORK,64-2,5       NO, ROUND 1/100THS TO INTEGER.
         MVC   AIORATE+1(6),ED5  SHOW HIGHER RATE THAN 999.99/SEC.
         ED    AIORATE+1(6),WORK+5
         CLI   WORK+4,0          RATE UNDER 100,000?
         BE    CNCTCALC          IT SEEMS TO BE.
         MVC   AIORATE+1(1),WORK+4
         OC    AIORATE+1(4),=C'0000'
CNCTCALC L     R9,ASCBDCTI       GET CHANNEL CONNECT TIME.
         LR    R1,R9
         S     R9,IOCSOFAR       GET CHANGE CHANNEL CONNECT TIME.
         BZ    CNCTDONE          NO CHANGE SO LEAVE BLANK.
         ST    R1,IOCSOFAR       SAVE CURRENT CHANNEL CONNECT TIME.
         BNM   ACNCTOK           POSITIVE VALUE SO PROCEED.
         LR    R9,R1             CHANGE OF STEP - USE CURRENT VALUE.
ACNCTOK  SLR   R8,R8
         SLDL  R8,7              CONVERT TO MICROSECONDS.
         LR    R1,R0             GET CURRENT TIME.
         S     R1,TOD            GET CHANGE IN TIME.
         DR    R8,R1             GET FRACTION.
         MVI   IOPERCNT+4,C'%'   INDICATE PERCENTAGE.
         SLR   R8,R8
         CHI   R9,994            HIGHER THAN 9.94%?
         BH    CNCTNTGR          YES, CAN'T FIT IN FRACTIONAL %.
         AHI   R9,5              ROUND FRACTIONAL DIGIT.
         D     R8,TEN            GET N.N%.
         CVD   R9,WORK           CONVERT IT TO DECIMAL.
         OI    WORK+7,X'0F'      ENSURE NUMERIC RESULT.
         UNPK  IOPERCNT+1(2),WORK+6(2)
         MVC   IOPERCNT+3(1),IOPERCNT+2
         MVI   IOPERCNT+2,C'.'
         B     CNCTDONE          PERCENTAGE CALCULATION DONE.
CNCTNTGR LA    R9,50(,R9)        ROUND TO NEAREST PERCENT.
         D     R8,AHUNDRED       GET PERCENTAGE.
         MVC   IOPERCNT+1(3),STARS
         C     R9,ONEGRAND       MORE THAN 999%
         BNL   CNCTDONE          YES, FIELD OVERFLOW.
         CVD   R9,WORK           CONVERT IT TO DECIMAL.
         MVC   IOPERCNT,ED3      MOVE IN EDIT MASK.
         ED    IOPERCNT,WORK+6   EDIT THE OUTPUT FIELD.
CNCTDONE L     R9,IOCSOFAR       GET CURRENT CHANNEL CONNECT TIME.
         SLR   R8,R8
         SLDL  R8,7              CONVERT TO MICROSECONDS.
         D     R8,TENGRAND       DIVIDE TO GET CENTISECONDS.
         CVD   R9,WORK           CONVERT CONNECT TIME TO DECIMAL.
         MVC   ASCONNTM,=X'4020202021204B2020' MOVE IN THE EDIT MASK.
         ED    ASCONNTM,WORK+4   EDIT THE RESULT.
         ICM   R7,15,ASCBOUXB    POINT TO OUXB.
         BZ    AGETDP            IGNORE IF NONE.
         USING OUXB,R7
         L     R8,OUXBPIN        GET PRIVATE PAGE-IN COUNT.
         A     R8,OUXBPOUT       ADD PRIVATE PAGE-OUT COUNT.
         A     R8,OUXBVAMI       ADD VIO PAGE-IN COUNT.
         A     R8,OUXBVAMO       ADD VIO PAGE-OUT COUNT.
*        A     R8,OUXBSPIN       ADD SWAP PAGE-IN COUNT.
*        A     R8,OUXBSPOT       ADD SWAP PAGE-OUT COUNT.
         A     R8,OUXBCAPI       ADD COMMON PAGE-IN COUNT.
         BZ    AGETDP            OUXB WAS DUMMY FOR SWAPPED-OUT JOB.
         C     R7,ASCBOUXB       STILL THE RIGHT OUXB?
         BNE   AGETDP            NO, A SWAP JUST HAPPENED.
         DROP  R7                OUXB.
         C     R8,ASPAGECT       YES, ANY CHANGE IN COUNT?
         BE    AGETDP            NO, INDICATE THIS WITH BLANKS.
         LR    R9,R8             COPY TOTAL PAGE TRANSFER COUNT.
         S     R9,ASPAGECT       SUBTRACT PREVIOUS COUNT.
         ST    R8,ASPAGECT       SAVE NEW TOTAL PAGE TRANSFER COUNT.
         BNM   APGRTOK           PROCEED IF POSITIVE.
         LR    R9,R8             CHANGE OF STEP - USE CURRENT COUNT.
APGRTOK  M     R8,ONEGRAND       CENTISECONDS PLUS ONE DECIMAL PLACE.
         LR    R1,R0             GET CURRENT TIME.
         S     R1,TOD            GET CHANGE IN TIME.
         DR    R8,R1             GET PAGE TRANSFERS PER SECOND.
         CVD   R9,WORK
         MVC   APAGING,=X'40202021204B20'
         ED    APAGING,WORK+5    DISPLAY TOTAL JOB PAGE TRANSFER RATE.
AGETDP   UNPK  DP(3),ASCBDP(2)   DISPLAY THE DISPATCHING PRIORITY.
         TR    DP,HEX-C'0'
         MVI   DP+2,C' '
         LM    R8,R9,ASCBEJST    LOAD UP TCB TIME.
         SRDL  R8,12             GET MICROSECONDS.
         LM    R6,R7,ASCBSRBT    LOAD UP SRB TIME.
         SRDL  R6,12             GET MICROSECONDS.
         ALR   R9,R7             ADD TOGETHER (LOW ORDER).
         BC    12,NOCARRY        CHECK FOR OVERFLOW.
         LA    R6,1(,R6)         ADD 1 FOR CARRY.
NOCARRY  AR    R8,R6             ADD TOGETHER (HIGH ORDER).
DELTABAD LR    R7,R0             CURRENT TIME-OF-DAY.
         S     R7,TOD            GET TIME SINCE LAST CHECK.
         BNZ   DELTAOK           NON-ZERO SO SHOULDN'T GET S0C9.
         TIME  BIN               SEE IF SAME CENTISEC IS TRANSPIRING.
         B     DELTABAD          JUST AVOIDED AN S0C9.
DELTAOK  LR    R1,R7             COPY THE TIME CHANGE.
         LR    R7,R9             TOTAL CPU TIME.
         S     R7,CPUSOFAR       GET CPU TIME USAGE SINCE LAST CHECK.
SKIPPCNT ST    R9,CPUSOFAR       STORE CPU TIME THIS STEP USED SO FAR.
         ST    R0,TOD            STORE THIS TIME.
         LTR   R7,R7             IS CPU USAGE ABSOLUTELY NIL?
         BZ    SKIPCALC          YES, SKIP USAGE CALCULATION.
         BNM   ACPUSOK           POSITIVE SO PROCEED.
         LR    R7,R9             CHANGE OF STEP - USE CURRENT VALUE.
ACPUSOK  SLR   R6,R6
         DR    R6,R1             GET FRACTION.
         MVC   USAGE(5),=X'21204B206C'   MOVE IN EDIT MASK.
         SLR   R6,R6
         CHI   R7,994            HIGHER THAN 9.94%?
         BH    INTEGER           YES, CAN'T FIT IN FRACTIONAL %.
         AHI   R7,5              ROUND FRACTIONAL DIGIT.
         D     R6,TEN            GET N.N%.
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         ED    USAGE-1(5),WORK+6 EDIT THE OUTPUT FIELD.
         B     SKIPCALC          PERCENTAGE CALCULATION DONE.
INTEGER  LA    R7,50(,R7)        ROUND TO NEAREST PERCENT.
         D     R6,AHUNDRED       GET PERCENTAGE.
         CVD   R7,WORK           CONVERT IT TO DECIMAL.
         MVC   USAGE,ED3         MOVE IN EDIT MASK.
         ED    USAGE,WORK+6      EDIT THE OUTPUT FIELD.
SKIPCALC N     R8,=F'511'        AVOID ABEND S0C9.
         D     R8,TENGRAND       DIVIDE TO GET CENTISECONDS.
         CVD   R9,WORK           CONVERT (TCB+SRB) TIME TO DECIMAL.
         MVC   CPUTIME,=X'4020202021204B2020' MOVE IN THE EDIT MASK.
         ED    CPUTIME,WORK+4    EDIT THE RESULT.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    DONELINE          NO, LINE COMPLETED.
         ICM   R6,15,ASCBTSB     POINT TO TERMINAL STATUS BLOCK.
         BZ    DONELINE          NO TSB OR ENTRY MAY BE COMPLETED.
         MODESET MF=(E,MDSET0)   GET INTO KEY ZERO.
         MVC   PSTEPTRM,104(R6)  GET TSO TERMINAL NAME.
         MODESET MF=(E,MDSETN0)  RETURN TO PROBLEM KEY.
DONELINE TR    JOB(ASDL),XLATETBL  ENSURE NO UNPRINTABLES.
         LA    R2,ASLL(,R2)      UPDATE CURRENT BUFFER POINTER.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R1,1
         A     R1,WINLINES       INCREMENT LINE COUNTER.
         ST    R1,WINLINES
         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.
         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.
         BNL   PUTSCRNA          IF YES, THEN GO PUT THIS SCREEN.
NOGOOD   LA    R10,ASENTLEN(,R10) POINT TO NEXT TABLE ENTRY.
         BCT   R3,ASCBLOOP       BRANCH BACK TO LOOK AT NEXT MEMORY.
         DROP  R10,R2,R5         ASENTRY, ASLINE, ASCB.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         L     R1,WINBUFF        GET WINDOW BUFFER START ADDRESS.
         CR    R1,R2             SUMMARY LINE ON FIRST LINE?
         BE    ASLLOKAY          YES, LAST LINE EDIT NOT NEEDED.
         LA    R9,ASLL
         LR    R1,R2
         SR    R1,R9
         MVI   2(R1),X'F4'       USE UNDERSCORE ON LAST LINE.   (I3279)
         MVI   5(R1),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)
         USING ASLINE,R2
ASLLOKAY MVI   JOB,C' '          PUT TRAILING BLANKS ON SUMMARY LINE.
         MVC   JOB+1(ASDL-1),JOB
         DROP  R2                ASLINE.
         L     R1,REALSHOW       FRAMES USED BY DISPLAYED JOBS.
         SRL   R1,8              CONVERT TO MEGABYTES.
         CVD   R1,WORK
         MVC   REALVARS+12(6),ED5
         ED    REALVARS+12(6),WORK+5
         L     R1,REALJOBS       FRAMES USED BY EVERY ADDRESS SPACE.
         SRL   R1,8              CONVERT TO MEGABYTES.
         CVD   R1,WORK
         MVC   REALVARS+30(6),ED5
         ED    REALVARS+30(6),WORK+5
         L     R1,FRAME#         GET NUMBER OF REAL FRAMES FOR CPU.
         L     R9,RCEADDR        POINT TO RSM CNTRL & ENUMERATION AREA.
         S     R1,136(,R9)       SUBTRACT CURRENT AVAILABLE FRAMES.
         S     R1,REALJOBS       SUBTRACT ALL JOBS' PRIVATE FRAMES.
         SRL   R1,8              CONVERT TO MEGABYTES.
         CVD   R1,WORK           RESULT SHOULD BE COMMON MEGABYTES.
         MVC   REALVARS+51(6),ED5
         ED    REALVARS+51(6),WORK+5
         MVC   0(LL,R2),REALINE  LOAD REAL STORAGE SUMMARY LINE.
         LA    R2,ASLL(,R2)      ADJUST BUFFER POINTER.
         LA    R1,1
         A     R1,WINLINES       INCREMENT LINE COUNTER.
         ST    R1,WINLINES
         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.
         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.
         BNL   PUTSCRNA          IF YES, THEN GO PUT THIS SCREEN.
         USING ASLINE,R2
         MVI   JOB,C' '          PUT TRAILING BLANKS ON SUMMARY LINE.
         MVC   JOB+1(ASDL-1),JOB
         DROP  R2                ASLINE.
         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.
         LA    R1,1
         A     R1,WINLINES       INCREMENT LINE COUNTER.
         ST    R1,WINLINES
         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.
         DROP  R15               WNDWMNGR.
PUTSCRNA LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.
         MVC   VSBTRACE(256),SECTIOWA RESTORE OPTION "VB" TRACE.
GETSCRNA L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         BASR  R14,R15           CALL WINDOW MANAGER.
         CLI   INBUFF,5          PF5/17?
         BE    ASIDEXAM          YES, PREPARE FOR OPTION "J".
         CLI   DOWNCNTR,C' '     CURRENTLY IN AUTO REFRESH MODE?
         BH    FINDASVT          YES, CONTINUE WITH DISPLAYS.
* THE FOLLOWING TEST IS ONLY NEEDED WHEN TGET NOWAIT IS USED, BECAUSE
* A MESSAGE MAY HAVE CLEARED THE SCREEN, AND LEFT THE CURSOR AT THE
* START OF THE NEXT LINE.  SO, OPTIONS "D" AND "G" NEED TO CHECK THIS.
* WHEN THE CURSOR IS "HOME" IT IS ON THE TOP LINE IN THE SECOND COLUMN.
* IF THE USER JUST USED THE DOWN ARROW TO MOVE THE CURSOR, THE CURSOR
* SHOULD STAY IN COLUMN 2, AND NOT BE IN THE FIRST SCREEN COLUMN.
*        CLI   INBUFF+2,0        CURSOR IN LEFT-MOST COLUMN?
*        BE    CMDSCANA          YES, DO NOT PERFORM ZOOM-IN.
         CLI   INBUFF+1,0        CURSOR ON HEADING LINE?
         BNE   ASIDEXAM          NO, CHECK FOR ZOOM-IN REQUEST.
CMDSCANA CLI   INCHARS,C' '      CHECK FOR JUST PLAIN OLD ENTER.
         BE    FINDASVT          GENERATE A DISPLAY UPDATE.
         CLI   INCHARS,C'J'      CHECK FOR SPECIFIC JOB NAME PREFIX.
         BNE   TSUCHECK          IF NOT, TRY FOR TS USERS ONLY MODE.
         XC    SELJOBNM,SELJOBNM ERASE PREVIOUS JOBNAME.
         SLR   R1,R1
         CLI   INCHARS+1,C'/'    ERASE PREVIOUS PREFIX REQUEST?
         BE    NOJOBPAS          YES, DO IT.
         CLI   INCHARS+1,C' '    JOB PREFIX SUPPLIED?
         BNH   AGETJNAM          NO.
         MVC   SELJOBNM,INCHARS+1   LOAD PRE-PROMPT SUPPLIED MASK.
         LA    R15,SELJOBNM+1    POINT TO FIRST BYTE TO CHECK.
         LA    R0,7              MAXIMUM BYTES TO CHECK.
         LA    R1,1              PREFIX LENGTH DETERMINED SO FAR.
AJOBLOOP CLI   0(R15),C' '       END OF JOB NAME PREFIX FOUND?
         BNH   NOJOBPAS          YES, SAVE THE PREFIX LENGTH.
         LA    R15,1(,R15)       NO, POINT TO NEXT BYTE.
         LA    R1,1(,R1)         INCREMENT PREFIX LENGTH.
         BCT   R0,AJOBLOOP
         B     NOJOBPAS          EIGHT CHARACTER MASK SUPPLIED.
AGETJNAM LA    R1,JPRFXMSG
         LA    R0,JOBSELEN       FULL SCREEN TPUT THE PROMPT MESSAGE.
         BAS   R14,SCREENIO      ISSUE PROMPT AND GET PREFIX.
         CLI   INBUFF+4,0        INPUT FROM THE FIRST SCREEN LINE?
         BE    AGETJNAM          YES, UNEXPECTED SO REDRIVE THE PROMPT.
         MVC   SELJOBNM,INCHARS  EXTRACT SPECIFIED PREFIX.
         LH    R1,TGETLEN        GET LENGTH OF INPUT STREAM.
         AHI   R1,-6             GET LENGTH OF TEXT.
NOJOBPAS STH   R1,JPRFXLEN       STORE PREFIX LENGTH.
         B     FINDASVT          START FROM 1ST ASID FOR SELECTED JOBS.
TSUCHECK CLI   INCHARS,C'T'      CHECK FOR TSO ONLY.
         BNE   INITCHKY          IF NOT, TRY FOR INITIATOR MODE.
         OI    ASFLAGS,ASTSU     SELECT TS USERS.
         NI    ASFLAGS,255-ASSTC-ASJOB
INOUTCHK CLI   INCHARS+1,C'O'    ALSO SHOW SWAPPED OUT JOBS?
         BE    INANDOUT          YES.
         CLI   INCHARS+1,C'I'    ALSO SHOW SWAPPED IN JOBS ONLY?
         BE    INLIKFLN          YES.
         B     FINDASVT          BYPASS FURTHER INPUT CHECKING.
GIVEHLPA MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.
         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNA          GO DISPLAY HELP PANEL.
INITCHKY CLI   INCHARS,C'Y'      CHECK FOR DISPLAY INITIATORS.
         BNE   INITCHKN          IF NOT, TRY FOR NO INITIATORS.
         NI    ASFLAGS,255-NINIT DON'T SUPPRESS INITIATORS.
         B     INOUTCHK          CHECK FOR IN/OUT REQUESTS AS WELL.
INITCHKN CLI   INCHARS,C'N'      CHECK FOR DON'T DISPLAY INITIATORS.
         BNE   BATCHCHK          IF NOT, TRY FOR BACKGROUND ONLY.
         OI    ASFLAGS,NINIT     SUPPRESS INITIATOR/TERMINATORS.
         B     INOUTCHK          CHECK FOR IN/OUT REQUESTS AS WELL.
BATCHCHK CLI   INCHARS,C'B'      CHECK FOR BACKGROUND ONLY.
         BNE   OTHERCHK          BRANCH TO CHECK OTHER OPTIONS.
         OI    ASFLAGS,ASSTC+ASJOB
         NI    ASFLAGS,255-ASTSU REJECT TS USERS.
SUBCHECK CLI   INCHARS+1,C'J'    CHECK FOR BATCH JOBS ONLY.
         BNE   STCSONLY          BRANCH TO NEXT SUB-CHECK.
         NI    ASFLAGS,255-ASSTC ONLY SELECT BATCH JOBS.
         B     IOROTHRD          CHECK FOR IN/OUT REQUEST ALSO.
STCSONLY CLI   INCHARS+1,C'S'    CHECK FOR STARTED TASKS ONLY.
         BNE   INOUTCHK          CHECK FOR IN/OUT REQUESTS AS WELL.
         NI    ASFLAGS,255-ASJOB ONLY SELECT STARTED TASKS.
IOROTHRD MVC   INCHARS+1(1),INCHARS+2
         B     INOUTCHK          CHECK FOR IN/OUT REQUEST ALSO.
OTHERCHK CLI   INCHARS,C'A'      CHECK FOR EVERYTHING.
         BNE   XYZ               IF NOT, TRY FOR IN OR OUT MODES.
         OI    ASFLAGS,ASSTC+ASJOB+ASTSU
         B     SUBCHECK
XYZ      DS    0H
         CLI   INCHARS,C'O'      CHECK FOR OUT MODE.
         BNE   WHATHECK
INANDOUT OI    ASFLAGS,ASOUT     ENABLE SWAPPED-OUT SELECTION.
         B     FINDASVT          RESTART ADDRESS SPACE SCAN.
WHATHECK CLI   INCHARS,C'I'      CHECK FOR IN OR READY MODE.
         BNE   GIVEHLPA          INVALID REQUEST, GIVE SOME HELP.
INLIKFLN NI    ASFLAGS,255-ASOUT DISABLE SWAPPED-OUT SELECTION.
         B     FINDASVT          START OVER FROM BEGINNING.
         SPACE
ASIDEXAM DS    0H                INVOKE OPTION "J" FOR SELECTED ASID.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         SLR   R1,R1             CLEAR FOR INSERT.
         IC    R1,INBUFF+1       GET RELATIVE LINE NUMBER OF CURSOR.
         CH    R1,WINHDGCT       CURSOR ON A HEADING LINE?
         BNH   AJZOOMIT          YES, DO NOT SPECIFY ANY ADDRESS SPACE.
         BCTR  R1,0
         BCTR  R1,0
         A     R1,WINTOP         CONVERT TO WINDOW LINE NUMBER.
         C     R1,WINLINES       CURSOR AFTER LAST LINE?
         BH    AJZOOMIT          YES, DO NOT SUPPLY AN ASID.
         MH    R1,WINLNLEN       NO, GET AN INDEX INTO WINDOW AREA.
         A     R1,WINBUFF        POINT TO DETAIL LINE CONTENTS.
         CLI   0(R1),X'FF'       CURSOR ON SUMMARY LINE?
         BE    AJZOOMIT          YES, DO NOT SUPPLY AN ASID.
         USING ASLINE,R1
         ICM   R1,15,ADSPCID     GET THE HEX ASID CHARACTERS.
         DROP  R1,R15            ASLINE, WNDWMNGR.
         MVC   INBUFF(L'INBUFF+L'INCHARS),BLANKS   CLEAR INPUT BUFFER.
         MVI   INCHARS+1,C'J'    LOAD SUBCOMMAND FOR "J" TO PROCESS.
         MVC   INCHARS+2(4),STARS LOAD ASTERISKS TO FIRST HALF OF NAME.
         STCM  R1,15,INCHARS+6   LOAD ASID TO SECOND HALF OF NAME.
         B     *+10              DON'T CLEAR WHAT WAS JUST DONE.
AINVOKEJ MVC   INBUFF(L'INBUFF+L'INCHARS),BLANKS   CLEAR INPUT BUFFER.
         MVI   INBUFF,X'7C'      SIMULATE PFK 12.
         MVI   INCHARS,C'J'      SIMULATE OPTION "J" REQUEST.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNA          PERFORM INTER-OPTION JUMP.
AJZOOMIT CLI   INBUFF,5          OPTION "J" REQUEST ANYWAY?
         BE    AINVOKEJ          YES, DO NOT SPECIFY ANY ADDRESS SPACE.
         B     CMDSCANA          NO, SCAN FOR LOCAL SUBCOMMAND.
         SPACE
ASTGSIZE DS    0H                DISPLAY STORAGE USAGE.
         LA    R9,=C'KMGT'       POINT TO SCALING LABELS.
         ST    R1,WORK           PUT THE PAGE COUNT INTO STORAGE.
         TM    WORK,X'E0'        OKAY TO MULTIPLY BY FOUR?
         BZ    ASTGKILO          YES.
         SRL   R1,8              NO, CONVERT TO MEGABYTES.
         LA    R9,1(,R9)         ADJUST LABEL POINTER.
         B     ASTGLOOP          GO PROCESS.
ASTGKILO SLL   R1,2              CONVERT PAGE COUNT TO KILOBYTES.
ASTGLOOP CL    R1,=F'99999'      IS 5 DECIMAL DIGITS SUFFICIENT?
         BNH   ASTGSHOW          YES, FORMAT AND DISPLAY IT.
         SRL   R1,10             NO, DIVIDE BY 1024.
         LA    R9,1(,R9)         ADJUST LABEL POINTER.
         B     ASTGLOOP          GO TRY AGAIN.
ASTGSHOW CVD   R1,WORK
         MVC   0(6,R15),ED5
         ED    0(6,R15),WORK+5
         MVC   6(1,R15),0(R9)    SUPPLY SCALING INDICATOR.
         BR    R14
         SPACE
ASELDMSK MVC   70(0,R2),SELJOBNM                <<< EXECUTED >>>
         SPACE
         DROP  R11               ADDRSPCS.
         TITLE 'ADDRESS SPACE MONITOR - VARIABLES AND CONSTANTS'
REALJOBS DC    F'0'              NUMBER OF FRAMES USED BY ALL JOBS.
REALSHOW DC    F'0'              NUMBER OF FRAMES USED BY SHOWN JOBS.
SWPREASN EQU   *                 SWAP REASONS.
         DC    C'IN'         0 - SWAPPED IN.
         DC    C'TO'         1 - TERMINAL OUTPUT WAIT.
         DC    C'TI'         2 - TERMINAL INPUT WAIT.
         DC    C'LW'         3 - LONG WAIT.
         DC    C'XS'         4 - AUXILIARY STORAGE SHORTAGE.
         DC    C'RS'         5 - CENTRAL (REAL) STORAGE SHORTAGE.
         DC    C'DW'         6 - DETECTED WAIT.
         DC    C'RQ'         7 - REQUESTED SWAP.
         DC    C'NQ'         8 - ENQUEUE EXCHANGE.
         DC    C'EX'         9 - EXCHANGE BASED ON WMR VALUE.
         DC    C'US'        10 - UNILATERAL.
         DC    C'TS'        11 - TRANSITION SWAP.
         DC    C'IC'        12 - IMPROVE CENTRAL STORAGE.
         DC    C'IP'        13 - IMPROVE SYSTEM PAGING RATE.
         DC    C'MR'        14 - MAKE ROOM TO SWAP IN OUT-TOO-LONG A.S.
         DC    C'AW'        15 - APPC WAIT.
         DC    C'IW'        16 - OMVS INPUT WAIT.
         DC    C'OW'        17 - OMVS OUTPUT WAIT.
         DC    C'SR'        18 - IN-REAL SWAP.
         DC    C'  '        19 - SPARE SLOT.
ASFLAGS  DC    X'E0'             ADDRESS SPACE SELECTION FLAGS.
ASSTC    EQU   X'80'             SELECT STARTED TASKS.
ASJOB    EQU   X'40'             SELECT BATCH JOBS.
ASTSU    EQU   X'20'             SELECT TIME SHARING USERS.
ASOUT    EQU   X'10'             SELECT SWAPPED-OUT ADDRESS SPACES.
NINIT    EQU   X'08'             SUPPRESS DISPLAY OF DRY INITIATORS.
*        EQU   X'04'             SPARE.
*        EQU   X'02'             SPARE.
*        EQU   X'01'             SPARE.
ASSELINE DC    CL79' SELECTION CRITERIA:   STC   JOB   TSU   IN    NOIN+
               IT   JOB-NAME-MASK=******** '
HEADINGA DC    C' JOBNAME STEPNAME PROCSTEP ENF USS CLASS/ID LOC DP DMN+
                PGN PP ASID  REAL  ESTOR    AUX  XSC SWAPS SR PAGING IO+
               RATE  EXCP-COUNT  WMR INT-SRV SWAP-TIME  CONNECT IOC% CP+
               U-TIME CPU%'
REALINE  DC    X'FF41001BF4402842F2' FIXED FLAG - NON-SCROLLABLE LINE.
REALVARS DC    CL79'REAL MEMORY: 00000MB DISPLAYED 00000MB FOR ALL JOBS+
                00000MB COMMON  00000MB MAX'
         SPACE
         LTORG
         SPACE
         DS    0H
