*        COPYRIGHT (C) 1987-2016  PRYCROFT SIX PTY LTD
         TITLE 'CPU INSTRUCTION SPEED RATING SUBROUTINE'
         USING RATEMIPS,R11,R10
RATEMIPS DS    0H
         LA    R10,2048(,R11)    SET UP SECOND
         LA    R10,2048(,R10)                  BASE REGISTER.
         MVC   INCHARS(L'INCHARS-1),INCHARS+1
         MVI   INCHARS+L'INCHARS-1,C' ' ADJUST ANY COMMAND INPUT.
         L     R1,PSAPCCAV              POINT TO THE PCCA.
         USING PCCA,R1
         MVC   TRAILERR+24(12),PCCACPID COPY CPU ID.
         DROP  R1                       PCCA.
         L     R1,SMCAADDR              POINT TO THE SMCA.
         USING SMCABASE,R1
         MVC   TRAILERR+43(4),SMCASID   COPY SYSTEM ID.
         DROP  R1                       SMCABASE.
         L     R1,CVTPTR(,0)            POINT TO THE CVT.
         USING CVT,R1
         MVC   TRAILERR+54(8),CVTSNAME  COPY SYSTEM NAME.
         DROP  R1                       CVT.
         L     R1,RMCTADDR              POINT TO THE RMCT.
         USING RMCT,R1
         L     R1,RMCTADJC              LOAD CPU RATE ADJUSTMENT.
         DROP  R1                       CVT.
         CVD   R1,WORK                  DISPLAY IT.
         MVC   TRAILERR+66(12),ED11
         ED    TRAILERR+66(12),WORK+2
         MVC   TRAILERR+66(2),=C'C='
         CLI   INCHARS,C' '      ANY OPTION PRE-SPECIFIED?
         BNH   REDOMIPS          NO, JUST SHOW DETAIL LINES.
         B     CMDSCANR          YES, GO PROCESS IT.
         SPACE
MIPSTEST MVC   RATETST#,RENTY#(R4) LOAD TEST NUMBER INTO MESSAGE.
         TM    MODESW,ADR14      14-BIT ADDRESSING AVAILABLE?
         BNO   MIPSWAIT          NO.
         CLI   OLDCOLS+3,80      ANY WIDE-SCREEN-NESS?
         BNH   MIPSWAIT          NO.
         LA    R1,STRM3270
         AHI   R1,STRMERAS-STRM3270
         L     R0,COLUMNS        GET PRIMARY SCREEN WIDTH.
         CLI   0(R1),X'7E'       IN ALTERNATE SCREEN SIZE?
         BNE   *+8               NO.
         L     R0,OLDCOLS        YES, GET ALTERNATE SCREEN WIDTH.
         LR    R1,R0             YES, UPDATE ORDERS FOR THIS SCREEN.
         MHI   R1,11
         STCM  R1,3,RBA1
         LR    R1,R0
         MHI   R1,15
         AHI   R1,19
         STCM  R1,3,RBA2
         LR    R1,R0
         MHI   R1,19
         AHI   R1,19
         STCM  R1,3,RBA3
MIPSWAIT L     R5,8(,R4)         LOAD TEST ADDRESS.
         LA    R1,MIPWTMSG       POINT TO THE "PLEASE WAIT" MESSAGE.
         L     R15,ATHTBADR      POINT TO FEATURE AUTHORIZATION TABLE.
         MVC   OPTNATR,C'R'-C' '(R15)  COPY CUSTOMIZABLE BYTE.
         NI    OPTNATR,X'F8'     RESET INVALID BITS.
         OC    OPTNATR,COPYATR1  TURN ON THIS USER'S BITS.
         TM    OPTNATR,X'FA'     SUITABLY AUTHORIZED?
         BNO   PROBMIPS          NO, USE ASID TASK CPU TIME.
         LA    R0,MIPAUTHL       GET THE "PLEASE WAIT" MESSAGE LENGTH.
         ICM   R1,B'1000',=X'0B' LOAD FULLSCR,WAIT,HOLD FLAGS.
         TPUT  (1),(0),R         SEND THE MESSAGE.
         MODESET MF=(E,MDSTSUPR) GET PRIVILEGE FOR INSTRUCTIONS.
         BAS   R14,DONTSWAP      BECOME NON-SWAPPABLE.
         L     R1,ATHTBADR
         SRL   R1,12             GET START OF FIRST PAGE TO PAGE-FIX.
         SLL   R1,12
         L     R15,=A(IMCOMSIZ)
         A     R15,IMCOMADR
         BCTR  R15,0
         LA    R15,4095(,15)
         SRL   R15,12
         SLL   R15,12            GET END OF LAST PAGE TO PAGE-FIX.
         BCTR  R15,0
         ST    R1,RFIXADDR       REMEMBER START ADDRESS.
         ST    R15,RFIXEADR      REMEMBER END ADDRESS.
         PGSER R,FIX,A=(1),EA=(15),ECB=0 PAGE-FIX RELEVANT PAGES.
         STNSM INTSOFFR+1,X'04'  DISABLE I/O AND EXTERNAL INTERRUPTS.
         LMH   R0,R15,=16F'0'    CLEAR REGISTER HIGH HALVES.
         STCK  WORKR             GET THE TIME.
         BASR  R14,R5            EXECUTE SAMPLE INSTRUCTIONS.
         STCK  WORKR2            GET THE TIME.
INTSOFFR STOSM INTSOFFR+1,X'07'  ENABLE I/O AND EXTERNAL INTERRUPTS.
         L     R1,RFIXADDR       LOAD START ADDRESS.
         L     R15,RFIXEADR      LOAD END ADDRESS.
         PGSER R,FREE,A=(1),EA=(15) FREE PREVIOUSLY FIXED PAGES.
         BAS   R14,OKAYSWAP      BECOME SWAPPABLE.
         MODESET MF=(E,MDSTPRBR) GET OUT OF SUPERVISOR STATE.
         B     CALCMIPS          GO CALCULATE CPU RATING.
PROBMIPS LA    R0,MIPWTLEN       GET THE "PLEASE WAIT" MESSAGE LENGTH.
         ICM   R1,B'1000',=X'0B' LOAD FULLSCR,WAIT,HOLD FLAGS.
         TPUT  (1),(0),R         SEND THE MESSAGE.
         LMH   R0,R15,=16F'0'    CLEAR REGISTER HIGH HALVES.
***      L     R3,PSAAOLD        POINT TO THE CURRENT ASCB.
***      STIMER WAIT,BINTVL=FW1  ENSURE ASCBEJST IS UPDATED.
***      MVC   WORKR,EJST(R3)    GET CURRENT ADDRESS SPACE TCB TIME.
         TIMEUSED STORADR=WORKR,LINKAGE=SYSTEM,ECT=COND
         BASR  R14,R5            EXECUTE SAMPLE INSTRUCTIONS.
***      STIMER WAIT,BINTVL=FW1  ENSURE ASCBEJST IS UPDATED.
***      MVC   WORKR2,EJST(R3)   GET CURRENT ADDRESS SPACE TCB TIME.
         TIMEUSED STORADR=WORKR2,LINKAGE=SYSTEM,ECT=COND
CALCMIPS LG    R1,WORKR2         GET THE "AFTER" TIME.
         SLG   R1,WORKR          SUBTRACT THE "BEFORE" TIME.
         SRLG  R1,R1,12          CONVERT THE TIME TO MICROSECONDS.
         LLGT  R9,RONEMILL       GET INSTRUCTION COUNT.
         MSGF  R9,RONEMILL       SCALE TO INSTRUCTIONS PER SECOND.
         DSGR  R8,R1             DIVIDE INSTRUCTION COUNT BY TIME.
         STG   R9,0(,R4)         SAVE THE RESULT.
         LMH   R0,R15,=16F'0'    CLEAR REGISTER HIGH HALVES.
         SPACE
REDOMIPS L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         L     R2,WINBUFF        GET WINDOW BUFFER START ADDRESS.
         SLR   R0,R0             CLEAR FOR DIVIDE.
         ST    R0,WINLINES       INITIALIZE LINE COUNTER.
         DROP  R15               WNDWMNGR.
         SPACE
         MVC   0(LL-79,R2),HIGHX SUPPLY HEADING ATTRIBUTES.
         MVI   8(R2),X'F7'       SHOW HEADING IN WHITE.         (I3279)
         MVI   2(R2),X'F4'       USE UNDERSCORE FOR HEADING.    (I3279)
         MVI   5(R2),X'C4'       SUPPLY UNDERLINE ALSO.         (F9526)
         MVC   LL-79(79,R2),HEADINGR  LOAD HEADING.
         BAS   R14,RADDLINE      LINE NOW COMPLETE.
         LA    R4,RTESTABL       POINT TO INSTRUCTION TEST VECTOR.
NEXTMIPS MVC   LL-78(4,R2),=C'TEST'
         MVC   LL-73(12,R2),RENTY#-1(R4)  SHOW TEST NUMBER AND TYPE.
         MVC   LL-54(13,R2),=CL13'NOT PERFORMED'
         LG    R1,0(,R4)         LOAD THE RESULT.
         LTGR  R1,R1             HAS THIS TEST BEEN PERFORMED?
         BM    MIPSLINE          NO.
         CVDG  R1,WORKR
         MVC   LL-61(20,R2),RATEMASK
         ED    LL-61(20,R2),WORKR2
         MVC   LL-41(24,R2),=CL24' INSTRUCTIONS PER SECOND'
MIPSLINE BAS   R14,RADDLINE      LINE NOW COMPLETE.
         LA    R4,RENTYLEN(,R4)  POINT TO NEXT TABLE ENTRY.
         CLI   0(R4),X'FE'       END OF RATING TEST TABLE?
         BNE   NEXTMIPS          NO, FORMAT NEXT DISPLAY LINE.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVC   LL-79(79,R2),TRAILERR  SHOW WHICH SYSTEM WAS TESTED.
         BAS   R14,RADDLINE      LINE NOW COMPLETE.
         XC    SECWORKA,SECWORKA ZERO CP DATA COLLECTION AREA.
         LA    R0,16             LOAD MAXIMUM CPU COUNT.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R3,CVTPCCAT       POINT TO THE PCCAVT.
         DROP  R3                CVT.
         LA    R4,SECWORKA+128   POINT TO I/O COUNT SAVE AREA.
LOOPPCCA ICM   R5,B'1111',0(R3)  POINT TO THIS PCCA.
         BZ    NEXTPCCA          IT DOES NOT EXIST SO SKIP IT.
         USING PCCA,R5
         LM    R6,R7,PCCASLIH    LOAD I/O COUNTS.
         ALR   R6,R7             GET TOTAL I/O COUNT FOR THIS CP.
         ST    R6,0(,R4)         SAVE IT.
NEXTPCCA LA    R3,4(,R3)         POINT TO NEXT PCCA ADDRESS.
         LA    R4,4(,R4)         POINT TO NEXT I/O COUNT SAVE AREA.
         BCT   R0,LOOPPCCA       PROCESS NEXT CPU.
         DROP  R5                PCCA.
         BAS   R14,RSPCLINE      INSERT A BLANK LINE.
         BAS   R14,RSPCLINE      INSERT A BLANK LINE.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    RTUPTIME          NO, CAN'T LOOK AT LCCA.
         MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVC   LL-58(36,R2),CPUAVHDG
         BAS   R14,RADDLINE      LINE NOW COMPLETE.
         MODESET MF=(E,MDSTZERO) GET INTO KEY ZERO FOR LCCA.
         LA    R0,16             LOAD MAXIMUM CPU COUNT.
         L     R3,CVTPTR(,0)     POINT TO THE CVT.
         USING CVT,R3
         L     R3,CVTLCCAT       POINT TO THE PCCAVT.
         DROP  R3                CVT.
         LA    R4,SECWORKA       POINT TO WAIT TIME SAVE AREA.
LOOPLCCA ICM   R5,B'1111',0(R3)  POINT TO THIS LCCA.
         BZ    NEXTLCCA          IT DOES NOT EXIST SO SKIP IT.
         USING LCCA,R5
         LM    R6,R7,LCCAWTIM    LOAD CPU WAIT TIME.
         STM   R6,R7,0(R4)       SAVE IT.
NEXTLCCA LA    R3,4(,R3)         POINT TO NEXT LCCA ADDRESS.
         LA    R4,8(,R4)         POINT TO NEXT WAIT TIME SAVE AREA.
         BCT   R0,LOOPLCCA       PROCESS NEXT CPU.
         DROP  R5                LCCA.
         MODESET MF=(E,MDSTNOT0) END OF KEY ZERO ACCESS REQUIREMENT.
RTUPTIME TIME  BIN               GET CURRENT TIME AND DATE.
         STM   R0,R1,WORK        SAVE IT.
         L     R1,SMCAADDR       POINT TO THE SMCA.
         USING SMCABASE,R1
         MVC   WORK2,SMCAITME    COPY THE IPL TIME AND DATE.
         DROP  R1                SMCABASE.
         SP    WORK+4(4),WORK2+4(4)  GET THE DAYS SINCE IPL.
         CP    WORK+4(4),=PL2'635'   IPL'D THIS YEAR?
         BL    YEAROKAY              YES.
         SP    WORK+4(4),=PL2'635'   NO, MAP 636-1000 TO 1-365.
         TM    WORK2+5,X'01'         IS IPL YEAR ODD?
         BO    YEAROKAY              YES, SO IT WAS NOT A LEAP YEAR.
         TM    WORK2+5,X'12'         NO, WAS IT A LEAP YEAR?
         BM    YEAROKAY              NO.
         AP    WORK+4(4),=PL1'1'     YES, SO ADD 1 MORE DAY SINCE IPL.
YEAROKAY L     R3,WORK
         S     R3,WORK2          GET TIME DIFFERENCE SINCE IPL TIME.
         SLR   R0,R0
         ST    R0,WORK
         CVB   R1,WORK           GET BINARY DAYS SINCE IPL.
         M     R0,SECSADAY       CONVERT TO CENTISECONDS.
         AR    R3,R1             GET CENTISECONDS SINCE IPL.
         TM    MODESW2,AUTH      APF AUTHORIZED?
         BZ    RATEIO            NO, CAN'T SHOW CP UTILIZATION.
         LA    R1,4              INITIALIZE OUTER LOOP COUNTER.
         LA    R5,SECWORKA       POINT TO CPU WAIT TIME ARRAY.
         LA    R9,HEX            POINT TO CP NUMBERS.
RATEAVLN LA    R4,LL-80(,R2)     INITIALIZE DISPLAY LINE POINTER.
         LA    R0,4              INITIALIZE INNER LOOP COUNTER.
RATEAVCP LM    R6,R7,0(R5)       GET CPU WAIT TIME FOR THIS CP.
         LTR   R6,R6             ANY DATA?
         BNZ   RSOMECPU          YES.
         LTR   R7,R7
         BZ    RATEAVNX          NO, TRY NEXT ONE.
RSOMECPU SRDL  R6,12             CONVERT TO MICROSECONDS.
         DR    R6,R3             DIVIDE BY CENTISECONDS SINCE IPL.
         L     R6,TENGRAND
         SR    R6,R7             UTILIZATION = 100% - (WAIT TIME).
         CVD   R6,WORK
         MVC   2(12,R4),CPUAVMSG PRIME DISPLAY SLOT.
         MVC   4(1,R4),0(R9)     SUPPLY CP NUMBER.
         ED    6(7,R4),WORK+5    SUPPLY AVERAGE UTILIZATION PERCENTAGE.
RATEAVNX LA    R5,8(,R5)         POINT TO NEXT CP'S WAIT TIME.
         LA    R9,1(,R9)         POINT TO NEXT CP'S NUMBER.
         LA    R4,20(,R4)        POINT TO NEXT DISPLAY SLOT.
         BCT   R0,RATEAVCP       PROCESS NEXT CPU.
         BAS   R14,RADDLINE      LINE NOW COMPLETE.
         BCT   R1,RATEAVLN       PROCESS NEXT CPU.
         BAS   R14,RSPCLINE      INSERT A BLANK LINE.
RATEIO   MVC   0(LL-79,R2),HIGHX HIGH INTENSITY.
         MVC   LL-59(38,R2),CPUIOHDG
         BAS   R14,RADDLINE      LINE NOW COMPLETE.
         LA    R1,4              INITIALIZE OUTER LOOP COUNTER.
         LA    R5,SECWORKA+128   POINT TO CP I/O COUNT ARRAY.
         LA    R9,HEX            POINT TO CP NUMBERS.
RATEIOLN LA    R4,LL-80(,R2)     INITIALIZE DISPLAY LINE POINTER.
         LA    R0,4              INITIALIZE INNER LOOP COUNTER.
RATEAVIO ICM   R7,B'1111',0(R5)  GET I/O COUNT FOR THIS CP.
         BZ    RATEIONX          ZERO SO TRY NEXT ONE.
         M     R6,TENGRAND       SCALE FOR CENTISECONDS & 2 DEC PLACES.
         DR    R6,R3             DIVIDE BY CENTISECONDS SINCE IPL.
         CVD   R7,WORK
         MVC   2(13,R4),CPUIOMSG PRIME DISPLAY SLOT.
         MVC   4(1,R4),0(R9)     SUPPLY CP NUMBER.
         ED    6(9,R4),WORK+4    SUPPLY AVERAGE I/O RATE.
RATEIONX LA    R5,4(,R5)         POINT TO NEXT CP'S I/O COUNT.
         LA    R9,1(,R9)         POINT TO NEXT CP'S NUMBER.
         LA    R4,20(,R4)        POINT TO NEXT DISPLAY SLOT.
         BCT   R0,RATEAVIO       PROCESS NEXT CPU.
         BAS   R14,RADDLINE      LINE NOW COMPLETE.
         BCT   R1,RATEIOLN       PROCESS NEXT CPU.
         B     RRTRIALS
RSHOWSUM LMH   R0,R15,=16F'0'    CLEAR REGISTER HIGH HALVES.
         BAS   R1,SYSUMMRY       PRODUCE & SHOW SYSTEM SUMMARY LINE.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R1,1
         A     R1,WINLINES       INCREMENT LINE COUNTER.
         ST    R1,WINLINES
         MVC   0(2,R2),FFFF+2    SET FINAL LINE FLAG FOR WINDOW DATA.
         DROP  R15               WNDWMNGR.
PUTSCRNR LA    R0,LL             MAKE REGISTER 0 POSITIVE FOR OUTPUT.
GETSCRNR L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         BASR  R14,R15           CALL WINDOW MANAGER.
         CLI   DOWNCNTR,C' '     ARE WE IN AUTO REFRESH MODE?
         BH    REDOMIPS          YES.
         CLI   INCHARS,C' '      ANY SUBCOMMAND REQUESTED?
         BNH   REDOMIPS          NO, JUST REDO IT ALL.
CMDSCANR CLI   INCHARS,C'I'      RR-TEST ITERATION COEFFICIENT?
         BE    RRLPCNTR          YES.
         CLI   INCHARS,C'T'      TEST RUN REQUEST?
         BNE   GIVEHLPR          NO.
***      CLI   INCHARS+1,C'1'    INVALID TEST NUMBER?
***      BL    GIVEHLPR          YES.
         LA    R4,RTESTABL       POINT TO TEST TABLE.
TESTSELN CLI   0(R4),X'FE'       REACHED THE END OF THE TABLE?
         BE    GIVEHLPR          YES, INVALID TEST NUMBER.
         CLC   INCHARS+1(1),RENTY#(R4) IS THIS THE REQUESTED TEST?
         BE    MIPSTEST          YES, SO GO DO IT.
         LA    R4,RENTYLEN(,R4)  NO, POINT TO NEXT TEST TABLE ENTRY.
         B     TESTSELN          GO CHECK IT OUT.
RRLPCNTR CLI   INCHARS+1,C'1'    VALID COEFFICIENT?
         BL    GIVEHLPR          NO.
         CLI   INCHARS+1,C'9'    VALID COEFFICIENT?
         BH    GIVEHLPR          NO.  (HOW WAS THAT DONE?)
         MVC   RRTIMEHD+36(1),INCHARS+1
         NI    INCHARS+1,X'0F'   CLEAR THE ZONE.
         SLR   R1,R1
         IC    R1,INCHARS+1      GET THE NEW COEFFICIENT.
         M     R0,FIFTYK         GET THE NEW ITERATION COUNT.
         ST    R1,NLP            SAVE IT.
         B     REDOMIPS          GO REFRESH THE SCREEN.
GIVEHLPR MVC   INBUFF(8),SBLST   REQUEST SUBCOMMAND LIST FROM TUTORIAL.
         MVI   TGETLEN+1,8       SUPPLY LENGTH OF INPUT TO PARSE.
         LNR   R0,R11            MAKE REGISTER 0 NEGATIVE FOR PARSE.
         B     GETSCRNR          GO DISPLAY HELP PANEL.
         SPACE
MIPSTST1 L     R1,GRAND100       LOAD LOOP COUNTER.
         LA    R15,TST1LOOP      LOAD LOOP ADDRESS.
         CNOP  0,8
TST1LOOP LR    R9,R12            DO ONE MILLION INSTRUCTIONS.
         AR    R9,R12
         XR    R9,R12
         OR    R9,R12
         LCR   R8,R1
         SR    R8,R1
         NR    R8,R1
         ALR   R8,R9
         SLR   R8,R1
         BCTR  R1,R15
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTST9 L     R1,GRAND100       LOAD LOOP COUNTER.
         LA    R15,TST9LOOP      LOAD LOOP ADDRESS.
         LMH   R12,R12,RONEMILL  GET NON-ZERO HIGH WORD.
         CNOP  0,8
TST9LOOP LGR   R9,R12            DO ONE MILLION INSTRUCTIONS.
         AGR   R9,R12
         XGR   R9,R12
         OGR   R9,R12
         LCGR  R8,R1
         SGR   R8,R1
         NGR   R8,R1
         ALGR  R8,R9
         SLGR  R8,R1
         BCTGR R1,R15
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTST2 L     R1,GRAND100       LOAD LOOP COUNTER.
         LA    R15,TST2LOOP      LOAD LOOP ADDRESS.
         CNOP  0,8
TST2LOOP LR    R9,R12            DO ONE MILLION INSTRUCTIONS.
         AR    R9,R12
         XR    R9,R12
         OR    R9,R12
         MR    R8,R1
         DR    R8,R1
         SR    R8,R1
         NR    R8,R1
         ALR   R8,R9
         BCTR  R1,R15
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTSTA L     R1,GRAND100       LOAD LOOP COUNTER.
         LA    R15,TSTALOOP      LOAD LOOP ADDRESS.
         LMH   R12,R12,RONEMILL  GET NON-ZERO HIGH WORD.
         CNOP  0,8
TSTALOOP LTGR  R9,R12            DO ONE MILLION INSTRUCTIONS.
         AGR   R9,R12
         XGR   R9,R12
         OGR   R9,R12
         MSGR  R9,R1
         DSGR  R8,R1
         SGR   R8,R1
         NGR   R8,R1
         ALGR  R8,R9
         BCTGR R1,R15
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTST3 L     R1,GRAND100       LOAD LOOP COUNTER.
         CNOP  0,8
TST3LOOP L     R9,GRAND100       DO ONE MILLION INSTRUCTIONS.
         A     R9,TENGRAND
         X     R9,ONEGRAND
         O     R8,AHUNDRED
         IC    R8,=X'05'
         N     R8,TENGRAND
         S     R9,ONEGRAND
         AL    R8,GRAND100
         SL    R8,TENGRAND
         BCT   R1,TST3LOOP
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTST4 L     R1,GRAND100       LOAD LOOP COUNTER.
         CNOP  0,8
TST4LOOP L     R9,TENGRAND       DO ONE MILLION INSTRUCTIONS.
         A     R9,TENGRAND
         X     R9,TENGRAND
         O     R9,TENGRAND
         M     R8,TENGRAND
         D     R8,TENGRAND
         S     R8,TENGRAND
         CVD   R9,WORKR2
         CVB   R9,WORKR2
         BCT   R1,TST4LOOP
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTST5 L     R1,GRAND100
         SRL   R1,2              LOAD LOOP COUNTER.
         L     R2,IMCOMADR       GET WORK AREA BASE.
         CNOP  0,8
TST5LOOP MVC   WORKR2,DECNMBR1   DO ONE MILLION INSTRUCTIONS.
         XC    WORKR2,DECNMBR1
         OC    WORKR2,DECNMBR1
         MVC   2048(4,R2),ED3
         ED    2048(4,R2),WORKR2+6
         CLC   2048(1,R2),2049(2)
         TR    2048(1,R2),XLATETBL
         ZAP   WORKR2,DECNMBR2
         AP    WORKR2,DECNMBR2
         UNPK  2148(1,R2),WORKR2+7(1)
         MVC   WORKR2,DECNMBR1
         XC    WORKR2,DECNMBR1
         OC    WORKR2,DECNMBR1
         MVC   2048(4,R2),ED3
         ED    2048(4,R2),WORKR2+6
         CLC   2048(1,R2),2048(R2)
         TR    2048(1,R2),XLATETBL
         ZAP   WORKR2,DECNMBR1
         SP    WORKR2,DECNMBR2
         NC    2048(1,R2),2049(R2)
         MVC   WORKR2,DECNMBR1
         XC    WORKR2,DECNMBR1
         OC    WORKR2,DECNMBR1
         MVC   2048(4,R2),ED3
         ED    2048(4,R2),WORKR2+6
         CLC   2048(1,R2),2049(2)
         TR    2048(1,R2),XLATETBL
         ZAP   WORKR2,DECNMBR2
         AP    WORKR2,DECNMBR2
         UNPK  2148(1,R2),WORKR2+7(1)
         MVC   WORKR2,DECNMBR1
         XC    WORKR2,DECNMBR1
         OC    WORKR2,DECNMBR1
         MVC   2048(4,R2),ED3
         ED    2048(4,R2),WORKR2+6
         CLC   2048(1,R2),2048(R2)
         TR    2048(1,R2),XLATETBL
         ZAP   WORKR2,DECNMBR1
         SP    WORKR2,DECNMBR2
         BCT   R1,TST5LOOP
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTST6 L     R1,GRAND100
         SRL   R1,2              LOAD LOOP COUNTER.
         L     R2,IMCOMADR       GET WORK AREA BASE.
         CNOP  0,8
TST6LOOP MVC   WORKR2,DECNMBR1   DO ONE MILLION INSTRUCTIONS.
         XC    WORKR2,DECNMBR1
         OC    WORKR2,DECNMBR1
         MVC   2048(12,R2),ED11
         ED    2048(12,R2),WORKR2+2
         CLC   2048(256,R2),2049(R2)
         TR    2048(256,R2),XLATETBL
         MP    WORKR2,DECNMBR2
         DP    WORKR2,DECNMBR2
         UNPK  2148(15,R2),WORKR2
         MVC   WORKR2,DECNMBR1
         XC    WORKR2,DECNMBR1
         OC    WORKR2,DECNMBR1
         MVC   2048(12,R2),ED11
         ED    2048(12,R2),WORKR2+2
         CLC   2048(256,R2),2048(R2)
         TR    2048(256,R2),XLATETBL
         MP    WORKR2,DECNMBR2
         DP    WORKR2,DECNMBR2
         NC    2048(256,R2),2049(R2)
         MVC   WORKR2,DECNMBR1
         XC    WORKR2,DECNMBR1
         OC    WORKR2,DECNMBR1
         MVC   2048(12,R2),ED11
         ED    2048(12,R2),WORKR2+2
         CLC   2048(256,R2),2049(R2)
         TR    2048(256,R2),XLATETBL
         MP    WORKR2,DECNMBR2
         DP    WORKR2,DECNMBR2
         UNPK  2148(15,R2),WORKR2
         MVC   WORKR2,DECNMBR1
         XC    WORKR2,DECNMBR1
         OC    WORKR2,DECNMBR1
         MVC   2048(12,R2),ED11
         ED    2048(12,R2),WORKR2+2
         CLC   2048(256,R2),2048(R2)
         TR    2048(256,R2),XLATETBL
         MP    WORKR2,DECNMBR2
         DP    WORKR2,DECNMBR2
         BCT   R1,TST6LOOP
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTST7 L     R1,GRAND100
         SRL   R1,1              LOAD LOOP COUNTER.
         CNOP  0,8
TST7LOOP LE    R0,FLOTPNT1       DO ONE MILLION INSTRUCTIONS.
         AE    R0,FLOTPNT2
         SE    R0,FLOTPNT1
         ME    R0,FLOTPNT1
         DE    R0,FLOTPNT2
         CE    R0,FLOTPNT1
         LCER  R2,R0
         SER   R0,R2
         MER   R0,R2
         DER   R0,R2
         LE    R0,FLOTPNT1
         AE    R0,FLOTPNT2
         SE    R0,FLOTPNT1
         ME    R0,FLOTPNT1
         DE    R0,FLOTPNT2
         CE    R0,FLOTPNT1
         LCER  R2,R0
         AER   R0,R2
         HER   R2,R0
         BCT   R1,TST7LOOP
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
MIPSTST8 L     R1,GRAND100
         SRL   R1,1              LOAD LOOP COUNTER.
         CNOP  0,8
TST8LOOP LD    R0,FLOTPNT1       DO ONE MILLION INSTRUCTIONS.
         AD    R0,FLOTPNT2
         SD    R0,FLOTPNT1
         MD    R0,FLOTPNT1
         DD    R0,FLOTPNT2
         CD    R0,FLOTPNT1
         LCDR  R2,R0
         SDR   R0,R2
         MDR   R0,R2
         DDR   R0,R2
         LD    R0,FLOTPNT1
         AD    R0,FLOTPNT2
         SD    R0,FLOTPNT1
         MD    R0,FLOTPNT1
         DD    R0,FLOTPNT2
         CD    R0,FLOTPNT1
         LCDR  R2,R0
         ADR   R0,R2
         HDR   R2,R0
         BCT   R1,TST8LOOP
         BR    R14               END OF BENCHMARK INSTRUCTION STREAM.
         SPACE
RADDLINE LARL  R15,PRTXLATE
         TR    LL-79(79,R2),0(R15)
RSPCLINE LA    R2,LL(,R2)        ADJUST BUFFER POINTER.
         L     R15,WINMANAD      POINT TO THE WINDOW MANAGER.
         USING WNDWMNGR,R15
         LA    R0,1
         A     R0,WINLINES       INCREMENT LINE COUNTER.
         ST    R0,WINLINES
         MVC   0(2,R2),WINFULL   PREPARE FOR FULL WINDOW.
         C     R2,WINEND         SEE IF THE BUFFER IS FULL YET.
         BNL   PUTSCRNR          IF YES, THEN FORGET SUMMARY LINE.
         MVC   0(LL-79,R2),LOWX  SUPPLY ATTRIBUTE BYTES.
         MVI   LL-79(R2),C' '    BLANK A LINE.
         MVC   LL-78(78,R2),LL-79(R2)
         BR    R14
         DROP  R15               WNDWMNGR.
         TITLE 'CPU SPEED RATER - VARIABLES AND CONSTANTS'
MDSTSUPR MODESET MODE=SUP,MF=L
MDSTPRBR MODESET MODE=PROB,MF=L
MDSTZERO MODESET KEY=ZERO,MF=L
MDSTNOT0 MODESET KEY=NZERO,MF=L
FLOTPNT1 DC    D'147.625'
FLOTPNT2 DC    D'29.5'
WORKR    DC    D'0'
WORKR2   DC    D'0'
RFIXADDR DC    A(0)              START OF PAGE-FIXED AREA.
RFIXEADR DC    A(0)              END OF PAGE-FIXED AREA.
RTESTABL DC    0D                TABLE OF SAMPLE INSTRUCTIONS STREAMS.
         DC    FD'-1'            INSTRUCTIONS PER SECOND FOR THIS TEST.
         DC    A(MIPSTST1)       SAMPLE INSTRUCTIONS STREAM ADDRESS.
RENTY#   EQU   *-RTESTABL+1      OFFSET TO TEST NUMBER.
         DC    C'T1 RR(F-32):'   LINE LABEL FOR THIS TEST.
RENTYLEN EQU   *-RTESTABL
         DC    FD'-1'
         DC    A(MIPSTST2)
         DC    C'T2 RR(S-32):'
         DC    FD'-1'
         DC    A(MIPSTST3)
         DC    C'T3 RX(FAST):'
         DC    FD'-1'
         DC    A(MIPSTST4)
         DC    C'T4 RX(SLOW):'
         DC    FD'-1'
         DC    A(MIPSTST5)
         DC    C'T5 SS(FAST):'
         DC    FD'-1'
         DC    A(MIPSTST6)
         DC    C'T6 SS(SLOW):'
         DC    FD'-1'
         DC    A(MIPSTST7)
         DC    C'T7 FP(E-32):'
         DC    FD'-1'
         DC    A(MIPSTST8)
         DC    C'T8 FP(D-64):'
         DC    FD'-1'
         DC    A(MIPSTST9)
         DC    C'T9 RR(F-64):'
         DC    FD'-1'
         DC    A(MIPSTSTA)
         DC    C'TA RR(S-64):'
         DC    X'FE'             DENOTE END OF TABLE.
DECNMBR2 DC    PL3'12345'
DECNMBR1 DC    PL8'123456789'
FW1      DC    F'1'              ONE.
FIFTYK   DC    F'5E4'            FIFTY THOUSAND.
GRAND100 DC    F'100000'         ONE HUNDRED THOUSAND.
RONEMILL DC    F'1000000'        ONE MILLION.
SECSADAY DC    A(60*60*24*100)   CENTISECONDS IN A DAY.
RATEMASK DC    X'402020206B2020206B2020206B2020206B202120'
HEADINGR DC    CL79'             MISLEADING INDICATORS OF PERFORMANCE S+
               AMPLING  (MIPS)             '
TRAILERR DC    CL79' TEST RESULTS FOR CPUID=123456789ABC/SYSID=1234/SNA+
               ME=12345678/ADJC=123456789A '
MIPWTMSG DCS   X'40',SBA
RBA1     DCS   (12,1),RA
RBA2     DCS   (16,20),C' ',SF,PROHIS
         DC    C'PLEASE WAIT - PERFORMING CPU SPEED TEST '
RATETST# DC    C'0'
         DCS   SF,PROLOS,RA,(1,1),C' '
MIPWTLEN EQU   *-MIPWTMSG
         DCS   SBA
RBA3     DCS   (20,20),SF,PROHIS
         DC    C'======  WARNING - CPU IS DISABLED  ======'
         DCS   SF,PROLOS
MIPAUTHL EQU   *-MIPWTMSG
CPUAVHDG DC    CL36'AVERAGE CPU UTILIZATION(S) SINCE IPL'
CPUIOHDG DC    CL38'AVERAGE I/O RATE(S) (IO/SEC) SINCE IPL'
CPUAVMSG DC    C'CP#:',X'402021204B2020',C'%'
CPUIOMSG DC    C'CP#:',X'4020202020204B2020'
RRTIMEHD DC    C'RR INSTRUCTION TIMINGS (COEFFICIENT=1)'
         SPACE
         LTORG
         SPACE
         DS    0H
         TITLE 'CPU SPEED RATER - RR INSTRUCTION TIME TRIALS'
*        RICK HEVENER'S FAMOUS RR INSTRUCTION TIMING ROUTINE.
*        PUBLISHED IN NASPA'S TECHNICAL SUPPORT MAGAZINE IN
*        AUGUST 1997 IN AN ARTICLE BY RICHARD N. HEVENER.
RRTRIALS DS    0H
         BAS   R14,RSPCLINE
         BAS   R14,RSPCLINE
         MVC   0(LL-79,R2),HIGHX
         MVC   LL-60(38,R2),RRTIMEHD
         BAS   R14,RADDLINE
         BAS   R14,RSPCLINE
         XC    TMO,TMO        TMO = 0 FOR OVERHEAD LOOP
         LA    R6,1
         LD    F4,LONE
         LD    F6,LONE+8
         L     R5,NLP         NUMBER OF TIMES TO LOOP
         SPACE
         STIMER TASK,BINTVL=LONGTIME
         SPACE
* LOOP TO OBTAIN OVERHEAD TIME.
         MVC   LL-60(5,R2),=CL5'BASE'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
B        BCT   R4,B
         BAS   R14,PSTLOOP
         SPACE
         ST    R9,TMO         SAVE LOOP OVERHEAD TIME
         BAS   R14,RSPCLINE
         SPACE
         MVC   LL-60(5,R2),=CL5'AR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
AR       AR    R2,R6
         BCT   R4,AR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'ALR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
ALR      ALR   R2,R6
         BCT   R4,ALR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'AHI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
AHI      AHI   R2,-7
         BCT   R4,AHI
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'AGHI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
AGHI     AGHI  R2,-7
         BCT   R4,AGHI
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         LDR   F2,F6
         MVC   LL-60(5,R2),=CL5'AXR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
AXR      AXR   F0,F4
         BCT   R4,AXR
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         MVC   LL-60(5,R2),=CL5'ADR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
ADR      ADR   F0,F4
         BCT   R4,ADR
         BAS   R14,PSTLOOP
         SPACE
         LER   F0,F4
         MVC   LL-60(5,R2),=CL5'AER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
AER      AER   F0,F4
         BCT   R4,AER
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         MVC   LL-60(5,R2),=CL5'AWR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
AWR      AWR   F0,F4
         BCT   R4,AWR
         BAS   R14,PSTLOOP
         SPACE
         LER   F0,F4
         MVC   LL-60(5,R2),=CL5'AUR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
AUR      AUR   F0,F4
         BCT   R4,AUR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'NR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
NR       NR    R2,R6
         BCT   R4,NR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'BALR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
BALR     BALR  R2,0
         BCT   R4,BALR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'BASR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
BASR     BASR  R2,0
         BCT   R4,BASR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'BASSM'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
BASSM    BASSM R2,0
         BCT   R4,BASSM
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'BSM'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
BSM      BSM   R2,0
         BCT   R4,BSM
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'BR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
BR       BR    0
         BCT   R4,BR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'BNOR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
BNOR     BNOR  0
         BCT   R4,BNOR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'NOP'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
NOP      NOP   0(,0)
         BCT   R4,NOP
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'BCTR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
BCTR     BCTR  R2,0
         BCT   R4,BCTR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'CR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
CR       CR    R2,R6
         BCT   R4,CR
         BAS   R14,PSTLOOP
         SPACE
         SDR   F0,F0
         MVC   LL-60(5,R2),=CL5'CDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
CDR      CDR   F0,F4
         BCT   R4,CDR
         BAS   R14,PSTLOOP
         SPACE
         SER   F0,F0
         MVC   LL-60(5,R2),=CL5'CER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
CER      CER   F0,F4
         BCT   R4,CER
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'CHI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
CHI      CHI   R2,-7
         BCT   R4,CHI
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'CGHI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
CGHI     CGHI  R2,-7
         BCT   R4,CGHI
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'CLR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
CLRR     CLR   R2,R6
         BCT   R4,CLRR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'CLI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
CLI      CLI   WORK,X'97'
         BCT   R4,CLI
         BAS   R14,PSTLOOP
         SPACE
         LR    R3,R6
         MVC   LL-60(5,R2),=CL5'DR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
DR       DR    R2,R6
         BCT   R4,DR
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         LDR   F2,F6
         MVC   LL-60(5,R2),=CL5'DXR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
DXR      DXR   F0,F4
         BCT   R4,DXR
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         MVC   LL-60(5,R2),=CL5'DDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
DDR      DDR   F0,F4
         BCT   R4,DDR
         BAS   R14,PSTLOOP
         SPACE
         LER   F0,F4
         MVC   LL-60(5,R2),=CL5'DER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
DER      DER   F0,F4
         BCT   R4,DER
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'XR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
XR       XR    R2,R6
         BCT   R4,XR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'HDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
HDR      HDR   F0,F4
         BCT   R4,HDR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'HER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
HER      HER   F0,F4
         BCT   R4,HER
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'IPM'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
IPM      IPM   R2
         BCT   R4,IPM
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LR       LR    R2,R6
         BCT   R4,LR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LHI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LHI      LHI   R2,-7
         BCT   R4,LHI
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LGHI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LGHI     LGHI  R2,-7
         BCT   R4,LGHI
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LDR      LDR   F0,F4
         BCT   R4,LDR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LER      LER   F0,F4
         BCT   R4,LER
         BAS   R14,PSTLOOP
         SPACE
         LA    R1,4095
         MVC   LL-60(5,R2),=CL5'LA'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LA       LA    R2,4095(R6,R1)
         BCT   R4,LA
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LTR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LTR      LTR   R2,R6
         BCT   R4,LTR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LTDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LTDR     LTDR  F0,F4
         BCT   R4,LTDR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LTER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LTER     LTER  F0,F4
         BCT   R4,LTER
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LCR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LCR      LCR   R2,R6
         BCT   R4,LCR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LCDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LCDR     LCDR  F0,F4
         BCT   R4,LCDR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LCER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LCER     LCER  F0,F4
         BCT   R4,LCER
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LNR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LNR      LCR   R2,R6
         BCT   R4,LNR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LNDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LNDR     LNDR  F0,F4
         BCT   R4,LNDR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LNER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LNER     LNER  F0,F4
         BCT   R4,LNER
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LPR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LPR      LPR   R2,R6
         BCT   R4,LPR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LPDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LPDR     LPDR  F0,F4
         BCT   R4,LPDR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LPER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LPER     LPER  F0,F4
         BCT   R4,LPER
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LRDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LRDR     LRDR  F0,F4
         BCT   R4,LRDR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'LRER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
LRER     LRER  F0,F4
         BCT   R4,LRER
         BAS   R14,PSTLOOP
         SPACE
         LR    R3,R6
         MVC   LL-60(5,R2),=CL5'MR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
MR       MR    R2,R6
         BCT   R4,MR
         BAS   R14,PSTLOOP
         SPACE
         LA    3,3
         MVC   LL-60(5,R2),=CL5'MHI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
MHI      MHI   R3,-7
         BCT   R4,MHI
         BAS   R14,PSTLOOP
         SPACE
         LA    3,3
         MVC   LL-60(5,R2),=CL5'MGHI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
MGHI     MHI   R3,-7
         BCT   R4,MGHI
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'MVI'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
MVI      MVI   WORK,X'97'
         BCT   R4,MVI
         BAS   R14,PSTLOOP
         SPACE
         SPACE
         LDR   F0,F4
         LDR   F2,F6
         MVC   LL-60(5,R2),=CL5'MXR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
MXR      MXR   F0,F4
         BCT   R4,MXR
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         MVC   LL-60(5,R2),=CL5'MXDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
MXDR     MXDR  F0,F4
         BCT   R4,MXDR
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         MVC   LL-60(5,R2),=CL5'MDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
MDR      MDR   F0,F4
         BCT   R4,MDR
         BAS   R14,PSTLOOP
         SPACE
         LER   F0,F4
         MVC   LL-60(5,R2),=CL5'MER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
MER      MER   F0,F4
         BCT   R4,MER
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'OR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
OR       OR    R2,R6
         BCT   R4,OR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SPM'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SPM      SPM   R2
         BCT   R4,SPM
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SLDA'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SLDA     SLDA  R2,63
         BCT   R4,SLDA
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SLDL'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SLDL     SLDL  R2,63
         BCT   R4,SLDL
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SLA'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SLA      SLA   R2,63
         BCT   R4,SLA
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SLL'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SLL      SLL   R2,63
         BCT   R4,SLL
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SRDA'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SRDA     SRDA  R2,63
         BCT   R4,SRDA
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SRDL'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SRDL     SRDL  R2,63
         BCT   R4,SRDL
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SRA'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SRA      SRA   R2,63
         BCT   R4,SRA
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SRL'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SRL      SRL   R2,63
         BCT   R4,SRL
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SR       SR    R2,R6
         BCT   R4,SR
         BAS   R14,PSTLOOP
         SPACE
         MVC   LL-60(5,R2),=CL5'SLR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SLR      SLR   R2,R6
         BCT   R4,SLR
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         LDR   F2,F6
         MVC   LL-60(5,R2),=CL5'SXR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SXR      SXR   F0,F4
         BCT   R4,SXR
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         MVC   LL-60(5,R2),=CL5'SDR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SDR      SDR   F0,F4
         BCT   R4,SDR
         BAS   R14,PSTLOOP
         SPACE
         LER   F0,F4
         MVC   LL-60(5,R2),=CL5'SER'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SER      SER   F0,F4
         BCT   R4,SER
         BAS   R14,PSTLOOP
         SPACE
         LDR   F0,F4
         MVC   LL-60(5,R2),=CL5'SWR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SWR      SWR   F0,F4
         BCT   R4,SWR
         BAS   R14,PSTLOOP
         SPACE
         LER   F0,F4
         MVC   LL-60(5,R2),=CL5'SUR'
         CNOP  4,8            ALIGN TARGET INSTRUCTION ON DOUBLEWORD
         BAS   R14,PRELOOP
SUR      SUR   F0,F4
         BCT   R4,SUR
         BAS   R14,PSTLOOP
         SPACE
         B     RSHOWSUM       RETURN
         SPACE 2
PRELOOP  ST    R14,RRRESAVE   SAVE RETURN ADDRESS
         ST    R2,RRR2SAVE    SAVE DISPLAY LINE POINTER
         LR    R4,R5          NUMBER OF TIMES TO LOOP
         BAS   R14,CPUTIMER   TIME BEFORE LOOP
         SLR   R2,R2          ZERO A REGISTER FOR USE IN LOOP
         L     R14,RRRESAVE   RESTORE RETURN ADDRESS
         BR    R14
         SPACE 2
PSTLOOP  ST    R14,RRRESAVE   SAVE RETURN ADDRESS
         LM    R8,R9,WORK2    SAVE TIME BEFORE LOOP
         BAS   R14,CPUTIMER   TIME AFTER LOOP
         SPACE
         SL    R9,WORK2+4
         BC    3,PSTLOOPA
         SPACE
         BCTR  R8,0           BORROW
         SPACE
PSTLOOPA SL    R8,WORK2
         SPACE
* MAKE R8-R9 < 2**31.
         LNR   R2,R6          # OF SHIFTS = -1 (SET UP FOR LOOP)
         SLDL  R8,2           RECOVER ONE OF THESE IN LOOP, ONE AFTER
         SPACE
PSTLOOPB AR    R2,R6          # = # + 1
         SRDL  R8,1
         LTR   R8,R8
         BNZ   PSTLOOPB
         SPACE
         SRDL  R8,1           NOW R8-R9 < 2**31
         SPACE
         M     R8,=F'1E6'     CONVERT MICROSEC. TO PICOSEC.
* RESTORE SHIFTS, MAKING BIT 51 = 1 PICOSEC.
         SLDL  R8,0(R2)
* PREVENT 0C9, MAKING BIT 54 = 1 PICOSEC.
         SRDL  R8,3
         LA    R14,RPICOS     POINT TO TIME UNIT LABEL.
         LR    R15,R5         COPY LOOP COUNT.
         SRL   R15,1          HALVE IT.
         CR    R15,R8         WILL RESULT CAUSE S0C9?
         LR    R15,R5         COPY LOOP COUNT AGAIN.
         BH    RDODIV         HOPE NOT!
         MH    R15,ONEGRAND+2 YES, MAKE DENOMINATOR BIGGER.
         LA    R14,RNANOS     POINT TO LARGER TIME UNIT LABEL.
RDODIV   DR    R8,R15         ELAPSED TIME / LOOP ITERATIONS
         SRL   R9,9           PICOSEC.
         SPACE
         CLI   0(R14),C'N'    HAD TO SCALE TO NANOSECONDS?
         BE    *+8            YES, IGNORE LOOP OVERHEAD
         S     R9,TMO         SUBTRACT LOOP OVERHEAD TIME
         SPACE
* WRITE OUT THE NUMBER.
         CVD   R9,WORK
         L     R2,RRR2SAVE    RESTORE DISPLAY LINE POINTER
         MVC   LL-50+LPTRN+1(11,R2),0(R14)
         MVC   LL-50(LPTRN,R2),PTRN
         LA    R1,LL-50+LPTRN-1(,R2)
         EDMK  LL-50(LPTRN,R2),WORK+2
         BAS   R14,RADDLINE
         L     R14,RRRESAVE   RESTORE RETURN ADDRESS
         LTR   R9,R9          POSITIVE RESULT?
         BNMR  R14            I SHOULD HOPE SO
         MVI   0(R1),C'-'
         BR    R14
         SPACE 2
CPUTIMER CPUTIMER MIC,WORK2
         L     R14,12(,R13)
         BR    R14
         SPACE
         DROP  R11,R10           RATEMIPS.
         SPACE 3
         LTORG
         SPACE
RPICOS   DC    CL11'PICOSECONDS'
RNANOS   DC    CL11'NANOSECONDS'
LONE     DC    L'1'
NLP      DC    F'5E4'
LONGTIME DC    F'2E9'
PTRN     DC    X'40',9X'20',X'2120'
LPTRN    EQU   *-PTRN
         SPACE
TMO      DC    F'0'
RRR2SAVE DC    F'0'
RRRESAVE DC    F'0'
