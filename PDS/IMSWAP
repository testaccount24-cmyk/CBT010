IMSWAP   CSECT
IMSWAP   AMODE 31
IMSWAP   RMODE ANY

***********************************************************************
*                                                                     *
*  Function - Make an address space swappable or nonswappable.        *
*                                                                     *
*        Entry point: IWSWAP                                          *
*                                                                     *
*        Input registers:                                             *
*          R0: N/A                                                    *
*          R1: Address of caller's parameter list pointer             *
*          R2-12: N/A                                                 *
*          R13: Address of register save area                         *
*          R14: Return address                                        *
*          R15: Entry point address                                   *
*                                                                     *
*          Output registers:                                          *
*            R0-14: Same as on entry                                  *
*            R15: Return code                                         *
*                 0 - IMSWAP function completed successfully          *
*                12 - IMSWAP function encountered errors              *
*                                                                     *
*          Register usage(internal):                                  *
*            R0-11: Work registers                                    *
*            R12: Base register                                       *
*            R13: Workarea address                                    *
*            R14-15: Work and linkage registers                       *
*                                                                     *
*          Upon entry to this routine, R1 must point to the address   *
*          of the caller's parameter list pointer.  The parameter     *
*          list must be formatted as follows:                         *
*                                                                     *
*  PARMLIST DS   0CL14                                                *
*  PARM1    DS   CL1 ("S"=SWAP, "D"=DONTSWAP)                         *
*  PARM2    DS   CL1 ("J"=JOBNAME, "A"=ASID)                          *
*  PARM3    DS   CL8 (jobname)                                        *
*  PARM4    DS   CL4 (asid)                                           *
*                                                                     *
*  PARM1 must be either "S" or "D" and specifies the request type.    *
*  PARM2 must be either "J" or "A" and specifies whether a jobname    *
*  or asid is being used to identify the address space that is to be  *
*  made swappable or non-swappable.                                   *
*  PARM3 must contain a jobname if PARM2 specified "J".  The jobname  *
*  must be blank padded on the right.                                 *
*  PARM4 must contain an asid if PARM2 specified "A".  The asid must  *
*  must be right-justified and padded with zeros on the left.         *
*                                                                     *
*                                                                     *
*          Environment: Amode 31, rmode any, supervisor state,        *
*                       psw key 0.  The caller must be authorized.    *
*                                                                     *
*                                                                     *
*  Author   - Bob Break                                               *
*                                                                     *
***********************************************************************

***********************************************************************
*                                                                     *
*        Initialization.                                              *
*                                                                     *
***********************************************************************

R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15

         USING PSA,0
SWAP0000 BAKR  R14,0                    Save caller's environment
         LR    R12,R15                  Set base register
         USING SWAP0000,R12               and addressability
         B     SWAP0001                 Branch around module identifier
         DC    CL8'IMSWAP'              Module name
         DC    C'&SYSDATE'              Assembly date
         DC    C'VERS01'                Version
SWAP0001 DS    0H
         MODESET MODE=SUP               Set supervisor state
         SPKA  0(0)                     Set psw key 0
         LA    R0,WORKSIZE              Get workarea size
         STORAGE OBTAIN,LENGTH=(R0),LOC=ANY
         LR    R2,R1                    Save workarea pointer
         LR    R14,R2                   Get pointer into work register
         LA    R15,WORKSIZE             Set move to length
         XR    R1,R1                    Set move from length and pad
         MVCL  R14,R0                   Clear workarea
         ST    R2,8(,R13)               Chain save areas
         ST    R13,4(,R2)               *
         LR    R13,R2                   Set workarea pointer
         USING WORKAREA,R13
         EREG  R0,R1                    Restore entry registers 0-1
         L     R1,0(,R1)                Point to input parm list

***********************************************************************
*                                                                     *
*        Extract the input parameters.                                *
*                                                                     *
***********************************************************************

SWAP0100 CLI   0(R1),C'S'                Swap request?
         BNE   SWAP0101                  No - branch, dontswap request
         OI    WORKFLAG,SWAPREQ          Set swap request indicator
SWAP0101 CLI   1(R1),C'J'                Jobname specified?
         BNE   SWAP0102                  No - branch, asid specified
         MVC   JOBNAME,2(R1)             Save specified jobname
         B     SWAP0110                  Branch - continue
SWAP0102 MVC   ASIDVAL,10(R1)            Save specified asid
         B     SWAP0120                  Branch - continue

***********************************************************************
*                                                                     *
*        Find the ASCB for the specified jobname.                     *
*                                                                     *
***********************************************************************

SWAP0110 L     R1,CVTPTR(,0)             Get CVT pointer
         L     R1,CVTASVT-CVT(,R1)       Get ASVT pointer
         L     R14,ASVTMAXU-ASVT(,R1)    Get max number of asids
         LA    R1,ASVTENTY-ASVT(,R1)     Bump to first ASCB slot
SWAP0111 TM    0(R1),ASVTAVAL            This slot being used?
         BO    SWAP0113                  No - branch, check next slot
         L     R2,0(,R1)                 Get ASCB pointer
         USING ASCB,R2
         ICM   R15,15,ASCBJBNI           Get batch job name pointer
         BNZ   SWAP0112                  Branch - continue
         L     R15,ASCBJBNS              Get STC/TSU name pointer
SWAP0112 CLC   JOBNAME,0(R15)            Jobname match?
         BE    SWAP0200                  Yes - branch, continue
SWAP0113 LA    R1,4(,R1)                 Bump to next ASVT entry
         BCT   R14,SWAP0111              Loop back to check next slot
         MVC   RETCODE,=F'12'            Set error return code
         B     SWAPRET                   Branch - return

***********************************************************************
*                                                                     *
*        Determine the specified asid number.                         *
*                                                                     *
***********************************************************************

SWAP0120 XR    R1,R1                     Clear work register
         LA    R14,ASIDVAL               Point to input asid value
         LA    R15,4                     Set scan limit
SWAP0121 CLI   0(R14),C'A'               Validity check digit
         BL    SWAP0126                  Branch if invalid
         CLI   0(R14),C'F'               Validity check digit
         BH    SWAP0122                  Branch of not 'A' - 'F'
         TR    0(1,R14),ASIDTRAN         Translate character
         B     SWAP0123                  Branch - continue
SWAP0122 CLI   0(R14),C'0'               Validity check digit
         BL    SWAP0126                  Branch if invalid
         CLI   0(R14),C'9'               Validity check digit
         BH    SWAP0126                  Branch if invalid
SWAP0123 NI    0(R14),X'0F'              Isolate digit
         XR    R0,R0                     Retrieve digit
         IC    R0,0(R14)                 *
         MH    R1,=H'16'                 Multiply asid # by 16
         AR    R1,R0                     Add current digit to total
         LA    R14,1(,R14)               Bump to next character
         BCT   R15,SWAP0121              Loop back for next digit
SWAP0124 LTR   R1,R1                     ASID zero?
         BZ    SWAP0126                  Yes - branch, invalid
         L     R15,CVTPTR(,0)            Get CVT pointer
         L     R15,CVTASVT-CVT(,R15)     Get ASVT pointer
         C     R1,ASVTMAXU-ASVT(R15)     Is asid number valid?
         BH    SWAP0126                  Branch - invalid asid
         STH   R1,ASIDNBR                Save specified asid number
         SLL   R1,2                      Multiply asid number by 4
         LA    R14,ASVTFRST-ASVT(R1,R15)  Get ASVT entry pointer
         TM    0(R14),ASVTAVAL           Address space active?
         BO    SWAP0126                  No - branch, error
         L     R2,0(,R14)                GET ASCB PTR
         ICM   R15,15,ASCBJBNI           Get batch job name pointer
         BNZ   SWAP0125                  Branch - continue
         L     R15,ASCBJBNS              Get STC/TSU name pointer
SWAP0125 MVC   JOBNAME,0(R15)            Save jobname
         B     SWAP0200                  Branch - continue
SWAP0126 MVC   RETCODE,=F'12'            Set error return code
         B     SWAPRET                   Branch - return

***********************************************************************
*                                                                     *
*        Check if the address space is already in the requested       *
*        status (swappable or non-swappable).                         *
*                                                                     *
***********************************************************************

SWAP0200 L     R15,ASCBOUCB              Get OUCB pointer
         USING OUCB,R15
         TM    WORKFLAG,SWAPREQ          Swap request?
         BZ    SWAP0201                  No - branch, continue
         TM    OUCBSFL,OUCBNSW           OUCB marked non-swappable?
         BO    SWAP0300                  Yes - branch, continue
         B     SWAPFREE                  Branch - continue
SWAP0201 TM    OUCBSFL,OUCBNSW           OUCB marked non-swappable?
         BO    SWAPFREE                  Yes - branch, continue
         DROP  R2,R15                    ASCB, OUCB

***********************************************************************
*                                                                     *
*        Obtain an area of storage for the SRB/RMTR/FRR routines.     *
*                                                                     *
***********************************************************************

SWAP0300 LA    R0,SRBMODSL               Get module lengths
         STORAGE OBTAIN,LENGTH=(R0),SP=241,LOC=ANY
         ST    R1,SRBMODSP               Save SRB modules pointer
         LR    R0,R1                     Set move to address
         LA    R1,SRBMODSL               Set move to length
         LA    R14,SRBMODS               Set move from address
         LR    R15,R1                    Set move from length and pad
         MVCL  R0,R14                    Relocate SRB modules code
         L     R1,SRBMODSP               Get SRB modules pointer
         MVC   CALLASCB-SRBMODS(4,R1),PSAAOLD  Set ASCB for xmpost

***********************************************************************
*                                                                     *
*        Schedule an SRB to the specified address space.              *
*                                                                     *
***********************************************************************

         LA    R0,SRBSIZE                Get SRB length
         STORAGE OBTAIN,LENGTH=(R0),SP=245,LOC=ANY
         ST    R1,SRBPTR                 Save SRB pointer
         USING SRBSECT,R1
         XC    SRBSECT(SRBSIZE),SRBSECT  Initialize SRB
         MVC   SRBID,=C'SRB '            Set SRB identifier
         ST    R2,SRBASCB                Set ASCB pointer
         L     R15,PSAAOLD               Get current ASCB pointer
         MVC   SRBPASID,ASCBASID-ASCB(R15)  Set asid
         MVC   SRBPTCB,PSATOLD           Set TCB pointer
         L     R15,SRBMODSP              Set SRB modules pointer in SRB
         ST    R15,SRBEP                 *
         OI    SRBEP,SRBMODE             Run SRB in AMODE 31
         LA    R15,RMTRBEG-SRBMODS(,R15)  Set RMTR pointer in SRB
         ST    R15,SRBRMTR               *
         OI    SRBRMTR,SRBRMODE          Run RMTR in AMODE 31
         L     R15,SRBMODSP              Get SRB modules pointer
         LA    R15,FRRBEG-SRBMODS(,R15)  Set FRR module pointer in SRB
         ST    R15,SRBFRRA               *
         OI    SRBFRRA,SRBRMODE          Run FRR in AMODE 31
         DROP  R1                        SRBSECT
         SCHEDULE SRB=(R1),SCOPE=LOCAL,FRR=YES

***********************************************************************
*                                                                     *
*        Wait until the SRB routine has completed execution.          *
*                                                                     *
***********************************************************************

         LA    R3,100                    Set maximum wait of .1 second
SWAP0400 STIMER WAIT,BINTVL=WAITTIME     Wait .1 second
         L     R15,SRBMODSP              Get SRB modules pointer
         TM    CALLECB-SRBMODS(R15),X'40'  Did SRB routine finish?
         BO    SWAPFREE                  Yes - branch, continue
         BCT   R3,SWAP0400               Loop back to wait again

***********************************************************************
*                                                                     *
*        The SRB did not complete execution.  Purge the SRB.          *
*                                                                     *
***********************************************************************

         L     R15,SRBMODSP              Get SRB modules pointer
         MVC   SYSEVTRC-SRBMODS(4,R15),=C'PURG'  Set error return code
         L     R1,SRBPTR                 Get SRB pointer
         USING SRBSECT,R1
         L     R15,SRBASCB               Get target ASCB pointer
         MVC   ASIDNBR,ASCBASID-ASCB(R15)  Set target asid
         XC    WORKPDQ,WORKPDQ           Init PURGEDQ parm list
         MVC   WORKPDQA,SRBPASID         Init PURGEDQ ASID
         MVC   WORKPDQT,SRBPTCB          Init PURGEDQ TCB pointer
         L     R3,SRBRMTR                Get RMTR pointer
         OI    SRBFLGS,SRBFRRCL          Set SRB not complete flag
         DROP  R1                        SRBSECT
         MVC   WORKPURG(PURGEDQL),PURGEDQ  Set PURGEDQ parm list
         PURGEDQ RMTR=(R3),                                            X
               ASID=ASIDNBR,                                           X
               ASIDTCB=WORKPDQ,                                        X
               MF=(E,WORKPURG)
         L     R15,SRBMODSP              Get SRB modules pointer
         TM    CALLECB-SRBMODS(R15),X'40'  SRB purged?
         BO    SWAPFREE                  Yes - branch, continue

***********************************************************************
*                                                                     *
*        The SRB was not purged.  Change the entry points for the     *
*        SRB, RMTR, and FRR routines to an IEFBR14, so that the areas *
*        of storage that were obtained for the modules can be safely  *
*        freed.  The SRB SQA storage will remain permanently          *
*        allocated, since the SRB could still be scheduled after this *
*        task terminates.                                             *
*                                                                     *
***********************************************************************

         L     R1,SRBPTR                Get SRB pointer
         USING SRBSECT,R1
         L     R15,CVTPTR(,0)           Get CVT pointer
         LA    R15,CVTBRET-CVT(,R15)    Set "B R14" instruction pointer
         ST    R15,SRBEP                  in SRB
         OI    SRBEP,SRBMODE            Run SRB in AMODE 31
         ST    R15,SRBRMTR              Replace RMTR routine pointer
         OI    SRBRMTR,SRBRMODE         Run RMTR in AMODE 31
         ST    R15,SRBFRRA              Replace FRR routine pointer
         OI    SRBFRRA,SRBRMODE         Run FRR in AMODE 31
         DROP  R1                       SRBSECT

***********************************************************************
*                                                                     *
*        Free the obtained E/CSA and E/SQA areas.                     *
*                                                                     *
***********************************************************************

SWAPFREE ICM   R1,15,SRBPTR              Get SRB pointer
         BZ    SWAPFR01                  Branch - no SRB
         USING SRBSECT,R1
         TM    SRBPARM,X'80'             Did SRB execute?
         BZ    SWAPFR01                  No - branch, continue
         DROP  R1                        SRBSECT
         LA    R0,SRBSIZE                Get SRB size
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=245
SWAPFR01 ICM   R1,15,SRBMODSP            Get SRB modules pointer
         BZ    SWAPFR02                  Branch - no SRB modules
         LA    R0,SRBMODSL               Get SRB modules length
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=241
SWAPFR02 DS    0H

***********************************************************************
*                                                                     *
*        Return to caller.                                            *
*                                                                     *
***********************************************************************

SWAPRET  L     R2,RETCODE                Get return code
         LA    R0,WORKSIZE               Get workarea size
         LR    R1,R13                    Get workarea pointer
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)
         LR    R15,R2                    Set return code
         PR                              Return to caller

         LTORG


PURGEDQ  PURGEDQ MF=L                   PURGEDQ parameter list
PURGEDQL EQU   *-PURGEDQ

WAITTIME DC    F'10'                    Wait interval (.1 second)
ASIDTRAN EQU   *-C'A'
         DC    X'0A0B0C0D0E0F'          ASID translate table

         DROP  R12,R13                  Base, WORKAREA


***********************************************************************
*                                                                     *
*        SRB routine.                                                 *
*                                                                     *
***********************************************************************

         USING PSA,0
SRBMODS  DS    0F
SRBBEG   EQU   *
         LR    R12,R15                   Set base register
         USING SRBBEG,R12                  and addressability
         LR    R8,R14                    Save return address
         LR    R10,R0                    Get SRB pointer
         USING SRBSECT,R10
         TM    SRBFLGS,SRBFRRCL          Main task not waiting?
         BOR   R14                       Yes - branch, return to system
         OI    SRBPARM,X'80'             Set SRB executed flag
         LR    R9,R2                     Get FRR parm list pointer
         USING FRRPARMS,R9
         XC    FRRPARMS(FRRPARML),FRRPARMS  Init FRR parm list
         ST    R10,FRRSRB                Set SRB ptr in FRR parm list
         L     R2,SRBASCB                Get SRB ASCB
         USING ASCB,R2
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE
         OI    FRRFLAGS,FRRLOCAL         Set local lock held flag

***********************************************************************
*                                                                     *
*        Make the address space swappable or non-swappable.           *
*                                                                     *
***********************************************************************

         L     R15,ASCBOUCB              Get OUCB pointer
         USING OUCB,R15
         TM    OUCBSFL,OUCBNSW           Is asid non-swappable?
         BO    SRBSWAP                   Yes - branch, swap request
         DROP  R15                       OUCB
         LH    R0,ASCBASID               Get asid
         XR    R1,R1                     Set no parms for SYSEVENT
         LA    R13,SYSEVTSV              Get SYSEVENT save area pointer
         SYSEVENT DONTSWAP,ASID=(R0),ENTRY=BRANCH
         STC   R1,SYSEVTRC+3             Save return code
         B     SRBPOST                   Branch - post caller
SRBSWAP  LH    R0,ASCBASID               Get asid
         XR    R1,R1                     Set no parms for SYSEVENT
         LA    R13,SYSEVTSV              Get SYSEVENT save area pointer
         SYSEVENT OKSWAP,ASID=(R0),ENTRY=BRANCH
         STC   R1,SYSEVTRC+3             Save return code

***********************************************************************
*                                                                     *
*        Post the caller for SRB completion.                          *
*                                                                     *
***********************************************************************

SRBPOST  XR    R0,R0                     Indicate ECB in key 0 storage
         LA    R10,X'7F'                 Set post code
         SLL   R10,24                    *
         LA    R11,CALLECB               Get ECB pointer
         CLC   PSAAOLD,CALLASCB          Cross memory post?
         BE    SRBPOST1                  No - branch, continue
         O     R11,SRBHBIT               Indicate cross memory post
SRBPOST1 L     R13,CALLASCB              Get ASCB pointer
         LA    R12,SRBRTRN               Set post error address
         DROP  R12                       Base
         L     R15,CVTPTR(,0)            Get CVT pointer
         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point
         BALR  R14,R15                   Post ECB
         OI    FRRFLAGS,FRRPOST          Indicate post completed
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE
         NI    FRRFLAGS,255-FRRLOCAL     Reset local lock held flag
         LR    R14,R8                    Get return address
SRBRTRN  BR    R14                         and return to caller
         DROP


***********************************************************************
*                                                                     *
*        RMTR routine.                                                *
*                                                                     *
***********************************************************************

         USING PSA,0
RMTRBEG  DS    0H
         LR    R12,R15                   Set base register
         USING RMTRBEG,R12                 and addressability
         LR    R10,R1                    Get SRB pointer
         USING SRBSECT,R10
         OI    SRBPARM,X'80'             Set SRB executed flag
         LR    R8,R14                    Save return address
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE
         XR    R0,R0                     Indicate ECB in key 0 storage
         LA    R10,X'7F'                 Set post code
         SLL   R10,24                    *
         LA    R11,CALLECB               Get ECB pointer
         CLC   PSAAOLD,CALLASCB          Cross memory post?
         BE    RMTRNXMP                  No -branch, continue
         O     R11,SRBHBIT               Indicate cross memory post
RMTRNXMP L     R13,CALLASCB              Get ASCB pointer
         LA    R12,RMTRRTRN              Set post error address
         DROP  R12                       Base
         L     R15,CVTPTR(,0)            Get CVT pointer
         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point
         BALR  R14,R15                   Post ECB
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE
         LR    R14,R8                    Get return address
RMTRRTRN BR    R14                         and return to caller
         DROP


***********************************************************************
*                                                                     *
*        FRR ROUTINE.                                                 *
*                                                                     *
***********************************************************************

         USING PSA,0
FRRBEG   DS    0H
         LR    R12,R15                   Set base register
         USING FRRBEG,R12                  and addressability
         LR    R2,R1                     Get SDWA pointer
         USING SDWA,R2
         L     R9,SDWAPARM               Get FRR parm list pointer
         USING FRRPARMS,R9
         TM    FRRPARMS,FRRENTER         FRR previously entered?
         BOR   R14                       Yes - branch, return
         OI    FRRPARMS,FRRENTER         Set FRR entered flag
         ST    R14,FRRETURN              Save return address
         ICM   R1,15,FRRSRB              Is there an SRB?
         BZ    FRRNOSRB                  No - branch, continue
         USING SRBSECT,R1
         OI    SRBPARM,X'80'             Set SRB executed flag
         DROP  R1                        SRBSECT
FRRNOSRB MVC   SYSEVTRC,=C'ABND'         Set abend in return code
         TM    FRRFLAGS,FRRPOST          ECB already posted?
         BO    FRRNPOST                  Yes - branch, continue
         TM    FRRFLAGS,FRRLOCAL         Local lock held?
         BO    FRRLOCK                   Yes - branch, continue
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE
         OI    FRRFLAGS,FRRLOCAL         Set local lock held flag
FRRLOCK  XR    R0,R0                     Indicate ECB in key 0 storage
         LA    R10,X'7F'                 Set post code
         SLL   R10,24                    *
         LA    R11,CALLECB               Get ECB pointer
         CLC   PSAAOLD,CALLASCB          Cross memory post?
         BE    FRRNXMP                   No - branch, continue
         O     R11,SRBHBIT               Indicate cross memory post
FRRNXMP  L     R13,CALLASCB              Get ASCB pointer
         ST    R12,FRRBASE               Save base register
         LA    R12,FRRPSTER              Set post error address
         L     R15,CVTPTR(,0)            Get CVT pointer
         L     R15,CVT0PT01-CVT(,R15)    Get POST entry point
         BALR  R14,R15                   Post ECB
         L     R12,FRRBASE               Restore base register
FRRNPOST TM    FRRFLAGS,FRRLOCAL         Local lock held?
         BZ    FRRRTRN                   No - branch, continue
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE
         B     FRRRTRN                   Branch - continue
FRRPSTER BR    R14                       Branch - return to RTM

***********************************************************************
*                                                                     *
*        Return to RTM.                                               *
*                                                                     *
***********************************************************************

FRRRTRN  LR    R1,R2                     Set SDWA pointer for SETRP
         SETRP DUMP=YES,RECORD=YES,RC=0  Set return options
         L     R14,FRRETURN              Set FRR return address
         BR    R14                       Branch - return to RTM
         DS    0F
SRBHBIT  DC    X'80000000'               High-order bit indicator

         LTORG

CALLASCB DC    F'0'                      Caller's ASCB pointer
CALLECB  DC    F'0'                      ECB for xmpost
SYSEVTRC DC    F'0'                      SYSEVENT return code
SYSEVTSV DC    18F'0'                    SYSEVENT save area
SRBMODSL EQU   *-SRBMODS                 SRB modules length
         DROP


FRRPARMS DSECT                           FRR parameter list (6 words)
FRRFLAGS DS    X                         FRR flag byte
FRRENTER EQU   X'80'                     FRR recursion indicator
FRRLOCAL EQU   X'40'                     Local lock acquired
FRRPOST  EQU   X'20'                     ECB posted
         DS    3X                        Reserved
FRRETURN DS    A                         FRR return address
FRRBASE  DS    F                         FRR base register
FRRSRB   DS    A                         SRB pointer (or zero)
         DS    2F                        Reserved
FRRPARML EQU   *-FRRPARMS                FRR parameter list length


WORKAREA DSECT
         DS    18F
WORKFLAG DS    XL1                       Flag byte
SWAPREQ  EQU   X'80'                     Swap request
         DS    XL3                       Reserved
RETCODE  DS    F                         SWAP return code
JOBNAME  DS    CL8                       Specified jobname
ASIDVAL  DS    CL4                       Specified asid
ASIDNBR  DS    H                         ASID number
R14SAVE  DS    F                         R14 SAVE AREA
SRBMODSP DS    A                         SRB modules pointer
SRBPTR   DS    A                         SRB area pointer
         DS    0F
WORKPURG DS    (PURGEDQL)X               PURGEDQ parameter list
WORKPDQ  DS    0D                        PURGEDQ parameter area
WORKPDQR DS    H                         PURGEDQ reserved area
WORKPDQA DS    H                         PURGEDQ asid
WORKPDQT DS    A                         PURGEDQ TCB pointer
WORKSIZE EQU   *-WORKAREA                Workarea length


         PRINT NOGEN
         CVT DSECT=YES
         IHAASCB
         IHAASVT
         IHAPSA
         IHASDWA
         IHASRB
         IRAOUCB

         END
